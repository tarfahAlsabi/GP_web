{"version":3,"file":"material-datepicker.umd.min.js","sources":["../../src/lib/datepicker/calendar.ts","../../src/lib/datepicker/datepicker.ts","../../src/lib/datepicker/datepicker-input.ts","../../src/lib/datepicker/datepicker-toggle.ts","../../src/lib/datepicker/datepicker-module.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/datepicker/datepicker-errors.ts","../../src/lib/datepicker/datepicker-intl.ts","../../src/lib/datepicker/calendar-body.ts","../../src/lib/datepicker/month-view.ts","../../src/lib/datepicker/multi-year-view.ts","../../src/lib/datepicker/year-view.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {take} from 'rxjs/operators/take';\nimport {Subscription} from 'rxjs/Subscription';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView, yearsPerPage, yearsPerRow} from './multi-year-view';\nimport {MatYearView} from './year-view';\nimport {Directionality} from '@angular/cdk/bidi';\n\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendar<D> implements AfterContentInit, OnDestroy, OnChanges {\n  private _intlChanges: Subscription;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: 'month' | 'year' | 'multi-year' = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when the currently selected date changes. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the year chosen in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the month chosen in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView) yearView: MatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(MatMultiYearView) multiYearView: MatMultiYearView<D>;\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get _activeDate(): D { return this._clampedActiveDate; }\n  set _activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  _currentView: 'month' | 'year' | 'multi-year';\n\n  /** The label for the current calendar view. */\n  get _periodButtonText(): string {\n    if (this._currentView == 'month') {\n      return this._dateAdapter.format(this._activeDate, this._dateFormats.display.monthYearLabel)\n          .toLocaleUpperCase();\n    }\n    if (this._currentView == 'year') {\n      return this._dateAdapter.getYearName(this._activeDate);\n    }\n    const activeYear = this._dateAdapter.getYear(this._activeDate);\n    const firstYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n    const lastYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n    return `${firstYearInView} \\u2013 ${lastYearInView}`;\n  }\n\n  get _periodButtonLabel(): string {\n    return this._currentView == 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the the previous button. */\n  get _prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this._currentView];\n  }\n\n  /** The label for the the next button. */\n  get _nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this._currentView];\n  }\n\n  constructor(private _elementRef: ElementRef,\n              private _intl: MatDatepickerIntl,\n              private _ngZone: NgZone,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir?: Directionality) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngAfterContentInit() {\n    this._activeDate = this.startAt || this._dateAdapter.today();\n    this._focusActiveCell();\n    this._currentView = this.startView;\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change = changes.minDate || changes.maxDate || changes.dateFilter;\n\n    if (change && !change.firstChange) {\n      const view = this.monthView || this.yearView || this.multiYearView;\n\n      if (view) {\n        view._init();\n      }\n    }\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  /** Handles year selection in the multiyear view. */\n  _yearSelectedInMultiYearView(normalizedYear: D) {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Handles month selection in the year view. */\n  _monthSelectedInYearView(normalizedMonth: D) {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles month selection in the multi-year view. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this._activeDate = date;\n    this._currentView = view;\n  }\n\n  /** Handles user clicks on the period label. */\n  _currentPeriodClicked(): void {\n    this._currentView = this._currentView == 'month' ? 'multi-year' : 'month';\n  }\n\n  /** Handles user clicks on the previous button. */\n  _previousClicked(): void {\n    this._activeDate = this._currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this._activeDate, -1) :\n        this._dateAdapter.addCalendarYears(\n            this._activeDate, this._currentView == 'year' ? -1 : -yearsPerPage);\n  }\n\n  /** Handles user clicks on the next button. */\n  _nextClicked(): void {\n    this._activeDate = this._currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this._activeDate, 1) :\n        this._dateAdapter.addCalendarYears(\n            this._activeDate, this._currentView == 'year' ? 1 : yearsPerPage);\n  }\n\n  /** Whether the previous period button is enabled. */\n  _previousEnabled(): boolean {\n    if (!this.minDate) {\n      return true;\n    }\n    return !this.minDate || !this._isSameView(this._activeDate, this.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  _nextEnabled(): boolean {\n    return !this.maxDate || !this._isSameView(this._activeDate, this.maxDate);\n  }\n\n  /** Handles keydown events on the calendar body. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n    if (this._currentView == 'month') {\n      this._handleCalendarBodyKeydownInMonthView(event);\n    } else if (this._currentView == 'year') {\n      this._handleCalendarBodyKeydownInYearView(event);\n    } else {\n      this._handleCalendarBodyKeydownInMultiYearView(event);\n    }\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._elementRef.nativeElement.querySelector('.mat-calendar-body-active').focus();\n      });\n    });\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this._currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this._currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) ==\n        Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  private _handleCalendarBodyKeydownInMonthView(event: KeyboardEvent): void {\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n             this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this._activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this._activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n        if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n          this._dateSelected(this._activeDate);\n          this._userSelected();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  private _handleCalendarBodyKeydownInYearView(event: KeyboardEvent): void {\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this._activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this._activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n        this._goToDateInView(this._activeDate, 'month');\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  private _handleCalendarBodyKeydownInMultiYearView(event: KeyboardEvent): void {\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -1);\n        break;\n      case RIGHT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate, 1);\n        break;\n      case UP_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);\n        break;\n      case END:\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n        break;\n      case PAGE_UP:\n        this._activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this._activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n        this._goToDateInView(this._activeDate, 'year');\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take} from 'rxjs/operators/take';\nimport {filter} from 'rxjs/operators/filter';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n  ElementRef,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {DOCUMENT} from '@angular/common';\nimport {Subject} from 'rxjs/Subject';\nimport {Subscription} from 'rxjs/Subscription';\nimport {merge} from 'rxjs/observable/merge';\nimport {MatCalendar} from './calendar';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {CanColor, mixinColor, ThemePalette} from '@angular/material/core';\n\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n// Boilerplate for applying mixins to MatDatepickerContent.\n/** @docs-private */\nexport class MatDatepickerContentBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatDatepickerContentMixinBase = mixinColor(MatDatepickerContentBase);\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n  },\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color'],\n})\nexport class MatDatepickerContent<D> extends _MatDatepickerContentMixinBase\n  implements AfterContentInit, CanColor {\n  datepicker: MatDatepicker<D>;\n\n  @ViewChild(MatCalendar) _calendar: MatCalendar<D>;\n\n  constructor(elementRef: ElementRef) {\n    super(elementRef);\n  }\n\n  ngAfterContentInit() {\n    this._calendar._focusActiveCell();\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatDatepicker<D> implements OnDestroy, CanColor {\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' = 'month';\n\n  /** Color palette to use on the datepicker's calendar. */\n  @Input() color: ThemePalette;\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean { return this._touchUi; }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits new selected date when selected date changes.\n   * @deprecated Switch to the `dateChange` and `dateInput` binding on the input element.\n   * @deletion-target 6.0.0\n   */\n  @Output() readonly selectedChanged: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected year in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected month in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { value ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id: string = `mat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._validSelected; }\n  set _selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  private _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<MatDatepickerContent<D>> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\n\n  /** Reference to the component instantiated in popup mode. */\n  private _popupComponentRef: ComponentRef<MatDatepickerContent<D>> | null;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  /** Subscription to value changes in the associated input element. */\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: MatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  readonly _disabledChange = new Subject<boolean>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n      this._popupComponentRef = null;\n    }\n  }\n\n  /** Selects the given date */\n  _select(date: D): void {\n    let oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this.selectedChanged.emit(date);\n    }\n  }\n\n  /** Emits the selected year in multiyear view */\n  _selectYear(normalizedYear: D): void {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Emits selected month in year view */\n  _selectMonth(normalizedMonth: D): void {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: MatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    this._dialogRef = this._dialog.open(MatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n    this._setColor();\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal(MatDatepickerContent, this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      this._popupComponentRef = this._popupRef.attach(this._calendarPortal);\n      this._popupComponentRef.instance.datepicker = this;\n      this._setColor();\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir ? this._dir.value : 'ltr',\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE))\n    ).subscribe(() => this.close());\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    return this._overlay.position()\n      .connectedTo(this._datepickerInput.getConnectedOverlayOrigin(),\n        {originX: 'start', originY: 'bottom'},\n        {overlayX: 'start', overlayY: 'top'}\n      )\n      .withFallbackPosition(\n        {originX: 'start', originY: 'top'},\n        {overlayX: 'start', overlayY: 'bottom'},\n      )\n      .withFallbackPosition(\n        {originX: 'end', originY: 'bottom'},\n        {overlayX: 'end', overlayY: 'top'}\n      )\n      .withFallbackPosition(\n        {originX: 'end', originY: 'top'},\n        {overlayX: 'end', overlayY: 'bottom'},\n      );\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Passes the current theme color along to the calendar overlay. */\n  private _setColor(): void {\n    const input = this._datepickerInput;\n    const color = this.color || (input ? input._getThemePalette() : undefined);\n\n    if (this._popupComponentRef) {\n      this._popupComponentRef.instance.color = color;\n    }\n\n    if (this._dialogRef) {\n      this._dialogRef.componentInstance.color = color;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators\n} from '@angular/forms';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: MatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D> implements AfterContentInit, ControlValueAccessor, OnDestroy,\n    Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(value: MatDatepicker<D>) {\n    this.registerDatepicker(value);\n  }\n  _datepicker: MatDatepicker<D>;\n\n  private registerDatepicker(value: MatDatepicker<D>) {\n    if (value) {\n      this._datepicker = value;\n      this._datepicker._registerInput(this);\n    }\n  }\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(value: (date: D | null) => boolean) {\n    this._dateFilter = value;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null { return this._value; }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    let oldDate = this.value;\n    this._value = value;\n    this._elementRef.nativeElement.value =\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _value: D | null;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled(): boolean { return !!this._disabled; }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n\n    if (newValue) {\n      // Normally, native input elements automatically blur if they turn disabled. This behavior\n      // is problematic, because it would mean that it triggers another change detection cycle,\n      // which then causes a changed after checked error if the input element was focused before.\n      this._elementRef.nativeElement.blur();\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() readonly dateChange: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() readonly dateInput: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D | null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngAfterContentInit() {\n    if (this._datepicker) {\n      this._datepickerSubscription =\n          this._datepicker.selectedChanged.subscribe((selected: D) => {\n            this.value = selected;\n            this._cvaOnChange(selected);\n            this._onTouched();\n            this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n            this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n          });\n    }\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  /** @docs-private */\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /**\n   * @deprecated\n   * @deletion-target 7.0.0 Use `getConnectedOverlayOrigin` instead\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this.getConnectedOverlayOrigin();\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (event.altKey && event.keyCode === DOWN_ARROW) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n    this._value = date;\n    this._cvaOnChange(date);\n    this._valueChange.emit(date);\n    this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /** Returns the palette used by the input's form field, if any. */\n  _getThemePalette() {\n    return this._formField ? this._formField.color : undefined;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n  Directive,\n  ContentChild,\n} from '@angular/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerIntl} from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `matDatepickerToggle`. */\n@Directive({\n  selector: '[matDatepickerToggleIcon]'\n})\nexport class MatDatepickerToggleIcon {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  styleUrls: ['datepicker-toggle.css'],\n  host: {\n    'class': 'mat-datepicker-toggle',\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n    '[class.mat-accent]': 'datepicker && datepicker.color === \"accent\"',\n    '[class.mat-warn]': 'datepicker && datepicker.color === \"warn\"',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepicker<D>;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  /** Custom icon set by the consumer. */\n  @ContentChild(MatDatepickerToggleIcon) _customIcon: MatDatepickerToggleIcon;\n\n  constructor(public _intl: MatDatepickerIntl, private _changeDetectorRef: ChangeDetectorRef) {}\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.datepicker) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n    const datepickerToggled = this.datepicker ?\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n        observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(\n      this._intl.changes,\n      datepickerDisabled,\n      inputDisabled,\n      datepickerToggled\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatCalendar} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {\n  MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER,\n  MatDatepicker,\n  MatDatepickerContent,\n} from './datepicker';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle, MatDatepickerToggleIcon} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    OverlayModule,\n    A11yModule,\n  ],\n  exports: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n  ],\n  providers: [\n    MatDatepickerIntl,\n    MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n  ]\n})\nexport class MatDatepickerModule {}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable()\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel: string = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel: string = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel: string = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel: string = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel: string = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel: string = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel: string = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel: string = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel: string = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel: string = 'Choose month and year';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation\n} from '@angular/core';\n\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class MatCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean) {}\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n    'role': 'grid',\n    'attr.aria-readonly': 'true'\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarBody {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** Whether to allow selection of disabled cells. */\n  @Input() allowDisabledSelection = false;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /** Emits when a new value is selected. */\n  @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\n\n  _cellClicked(cell: MatCalendarCell): void {\n    if (!this.allowDisabledSelection && !cell.enabled) {\n      return;\n    }\n    this.selectedValueChange.emit(cell.value);\n  }\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  get _firstRowOffset(): number {\n    return this.rows && this.rows.length && this.rows[0].length ?\n        this.numCols - this.rows[0].length : 0;\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatMonthView<D> implements AfterContentInit {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    this._activeDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new date is selected. */\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(@Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    const dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      const date = this._dateAdapter.createDate(\n            this._dateAdapter.getYear(this.activeDate),\n            this._dateAdapter.getMonth(this.activeDate), i + 1);\n      const enabled = this._shouldEnableDate(date);\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      this._weeks[this._weeks.length - 1]\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled));\n    }\n  }\n\n  /** Date filter for the month */\n  private _shouldEnableDate(date: D): boolean {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'matMultiYearView',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatMultiYearView<D> implements AfterContentInit {\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    this._activeDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !=\n        Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected year. This doesn't imply a change on the selected date */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: MatCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(@Optional() public _dateAdapter: DateAdapter<D>,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n    let activeYear = this._dateAdapter.getYear(this._activeDate);\n    let activeOffset = activeYear % yearsPerPage;\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(activeYear - activeOffset + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  _getActiveCell(): number {\n    return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;\n  }\n\n  /** Creates an MatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\n  }\n\n  /** Whether the given year is enabled. */\n  private _shouldEnableYear(year: number) {\n    // disable if the year is greater than maxDate lower than minDate\n    if (year === undefined || year === null ||\n        (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\n        (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\n      return false;\n    }\n\n    // enable if it reaches here and there's no filter defined\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n\n    // If any date in the year is enabled count the year as enabled.\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) == year;\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatYearView<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    this._activeDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    if (this._dateAdapter.getYear(oldActiveDate) != this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected month. This doesn't imply a change on the selected date */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(@Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    const normalizedDate =\n          this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    this.monthSelected.emit(normalizedDate);\n\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _shouldEnableMonth(month: number) {\n\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\n\n    if (month === undefined || month === null ||\n        this._isYearAndMonthAfterMaxDate(activeYear, month) ||\n        this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n      return false;\n    }\n\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is after this.maxDate, considering\n   * just the month and year of this.maxDate\n   */\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\n    if (this.maxDate) {\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\n\n      return year > maxYear || (year === maxYear && month > maxMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is before this.minDate, considering\n   * just the month and year of this.minDate\n   */\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\n    if (this.minDate) {\n      const minYear = this._dateAdapter.getYear(this.minDate);\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\n\n      return year < minYear || (year === minYear && month < minMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n"],"names":["decorators","type","Optional","MatCalendar","propDecorators","selected","Input","minDate","maxDate","dateFilter","selectedChange","Output","yearSelected","monthSelected","_userSelection","monthView","ViewChild","args","MatMonthView","yearView","MatYearView","multiYearView","MatMultiYearView","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY","InjectionToken","MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER","provide","deps","Overlay","useFactory","MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY","MatDatepickerContentBase","_elementRef","this","_MatDatepickerContentMixinBase","mixinColor","MatDatepickerContent","elementRef","_super","call","tslib_1.__extends","prototype","ngAfterContentInit","_calendar","_focusActiveCell","Component","selector","template","styles","host","class","[class.mat-datepicker-content-touch]","exportAs","encapsulation","ViewEncapsulation","None","preserveWhitespaces","changeDetection","ChangeDetectionStrategy","OnPush","inputs","_overlay","_ngZone","_viewContainerRef","_scrollStrategy","_dateAdapter","_dir","_document","createMissingDateImplError","Object","defineProperty","MatDatepicker","get","set","enumerable","configurable","newValue","_disabled","_disabledChange","next","_inputSubscription","unsubscribe","complete","_popupRef","dispose","_popupComponentRef","_selected","date","sameDate","oldValue","selectedChanged","emit","_datepickerInput","Error","input","_valueChange","subscribe","value","_this","_focusedElementBeforeOpen","activeElement","touchUi","_openAsDialog","_openAsPopup","_opened","openedStream","hasAttached","detach","_dialogRef","close","_calendarPortal","isAttached","completeClose","closedStream","focus","viewContainerRef","panelClass","afterClosed","componentInstance","datepicker","_setColor","_createPopup","attach","instance","onStable","asObservable","pipe","take","hasBackdrop","backdropClass","direction","scrollStrategy","create","overlayConfig","merge","backdropClick","detachments","keydownEvents","filter","event","keyCode","ESCAPE","withFallbackPosition","originX","originY","overlayX","overlayY","color","ctorParameters","MatDialog","undefined","Inject","DateAdapter","Directionality","DOCUMENT","startAt","startView","disabled","opened","MAT_DATEPICKER_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","useExisting","forwardRef","MatDatepickerInput","multi","MAT_DATEPICKER_VALIDATORS","NG_VALIDATORS","MatDatepickerInputEvent","target","targetElement","_dateFormats","_formField","dateChange","EventEmitter","dateInput","_onTouched","_cvaOnChange","_validatorOnChange","_datepickerSubscription","Subscription","EMPTY","_localeSubscription","_parseValidator","_lastValueValid","matDatepickerParse","text","nativeElement","_minValidator","control","controlValue","_getValidDateOrNull","deserialize","min","compareDate","matDatepickerMin","actual","_maxValidator","max","matDatepickerMax","_filterValidator","_dateFilter","matDatepickerFilter","_validator","Validators","compose","localeChanges","registerDatepicker","_datepicker","_registerInput","_value","isValid","oldDate","format","display","_min","_max","coerceBooleanProperty","blur","ngOnDestroy","registerOnValidatorChange","fn","validate","c","getPopupConnectionElementRef","getConnectedOverlayOrigin","writeValue","registerOnChange","registerOnTouched","setDisabledState","isDisabled","_onKeydown","altKey","DOWN_ARROW","open","preventDefault","_onInput","parse","_onChange","_getThemePalette","obj","isDateInstance","Directive","providers","MAT_INPUT_VALUE_ACCESSOR","[attr.aria-haspopup]","[attr.aria-owns]","[attr.min]","[attr.max]","[disabled]","(input)","(change)","(blur)","(keydown)","ElementRef","MAT_DATE_FORMATS","MatFormField","matDatepicker","MatDatepickerToggleIcon","MatDatepickerToggle","_intl","_changeDetectorRef","_stateChanges","ngOnChanges","changes","_watchStateChanges","_open","stopPropagation","datepickerDisabled","observableOf","inputDisabled","datepickerToggled","markForCheck","[class.mat-datepicker-toggle-active]","[class.mat-accent]","[class.mat-warn]","_customIcon","ContentChild","MatDatepickerModule","NgModule","imports","CommonModule","MatButtonModule","MatDialogModule","OverlayModule","A11yModule","exports","MatCalendarBody","declarations","MatDatepickerIntl","entryComponents","__extends","d","b","__","constructor","extendStatics","provider","overlay","scrollStrategies","reposition","setPrototypeOf","__proto__","Array","p","hasOwnProperty","Subject","calendarLabel","openCalendarLabel","prevMonthLabel","nextMonthLabel","prevYearLabel","nextYearLabel","prevMultiYearLabel","nextMultiYearLabel","switchToMonthViewLabel","switchToMultiYearViewLabel","Injectable","MatCalendarCell","displayValue","ariaLabel","enabled","numCols","allowDisabledSelection","activeCell","cellAspectRatio","selectedValueChange","_cellClicked","cell","rows","length","_isActiveCell","rowIndex","colIndex","cellNumber","_firstRowOffset","role","attr.aria-readonly","todayValue","selectedValue","labelMinRequiredCells","firstDayOfWeek","getFirstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","map","long","i","narrow","_weekdays","slice","concat","_activeDate","today","oldActiveDate","_hasSameMonthAndYear","_init","_selectedDate","_getDateInCurrentMonth","_minDate","_maxDate","_dateSelected","selectedYear","getYear","activeDate","selectedMonth","getMonth","selectedDate","createDate","_todayDate","_monthLabel","getMonthNames","toLocaleUpperCase","firstOfMonth","_firstWeekOffset","getDayOfWeek","_createWeekCells","daysInMonth","getNumDaysInMonth","dateNames","getDateNames","_weeks","push","_shouldEnableDate","dateA11yLabel","getDate","d1","d2","ChangeDetectorRef","Math","floor","_selectedYear","_todayYear","activeYear","activeOffset","_years","row","year","_createCellForYear","_yearSelected","month","_getActiveCell","yearName","getYearName","_shouldEnableYear","firstOfYear","addCalendarDays","_selectedMonth","_getMonthInCurrentYear","_monthSelected","normalizedDate","_todayMonth","_yearLabel","monthNames","_months","_createCellForMonth","monthName","monthYearA11yLabel","_shouldEnableMonth","_isYearAndMonthAfterMaxDate","_isYearAndMonthBeforeMinDate","maxYear","maxMonth","minYear","minMonth","changeDetectorRef","_intlChanges","_startAt","_clampedActiveDate","clampDate","_currentView","monthYearLabel","multi-year","change","firstChange","view","_yearSelectedInMultiYearView","normalizedYear","_monthSelectedInYearView","normalizedMonth","_userSelected","_goToDateInView","_currentPeriodClicked","_previousClicked","addCalendarMonths","addCalendarYears","_nextClicked","_previousEnabled","_isSameView","_nextEnabled","_handleCalendarBodyKeydown","_handleCalendarBodyKeydownInMonthView","_handleCalendarBodyKeydownInYearView","_handleCalendarBodyKeydownInMultiYearView","runOutsideAngular","querySelector","date1","date2","isRtl","_isRtl","LEFT_ARROW","RIGHT_ARROW","UP_ARROW","HOME","END","PAGE_UP","PAGE_DOWN","ENTER","yearsPerPage","NgZone"],"mappings":"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"}