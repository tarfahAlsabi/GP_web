{"version":3,"file":"material-badge.umd.min.js","sources":["../../src/lib/badge/badge.ts","../../src/lib/badge/badge-module.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, ElementRef, Inject, Optional, NgZone} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ThemePalette} from '@angular/material/core';\nimport {AriaDescriber} from '@angular/cdk/a11y';\nimport {DOCUMENT} from '@angular/common';\n\nlet nextId = 0;\n\nexport type MatBadgePosition = 'above after' | 'above before' | 'below before' | 'below after';\nexport type MatBadgeSize = 'small' | 'medium' | 'large';\n\n/** Directive to display a text badge. */\n@Directive({\n  selector: '[matBadge]',\n  host: {\n    'class': 'mat-badge',\n    '[class.mat-badge-overlap]': '_overlap',\n    '[class.mat-badge-above]': 'isAbove()',\n    '[class.mat-badge-below]': '!isAbove()',\n    '[class.mat-badge-before]': '!isAfter()',\n    '[class.mat-badge-after]': 'isAfter()',\n    '[class.mat-badge-small]': 'size === \"small\"',\n    '[class.mat-badge-medium]': 'size === \"medium\"',\n    '[class.mat-badge-large]': 'size === \"large\"',\n    '[class.mat-badge-hidden]': 'hidden',\n  },\n})\nexport class MatBadge {\n\n  /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n  @Input('matBadgeColor')\n  get color(): ThemePalette { return this._color; }\n  set color(value: ThemePalette) {\n    this._setColor(value);\n    this._color = value;\n  }\n  private _color: ThemePalette = 'primary';\n\n  /** Whether the badge should overlap its contents or not */\n  @Input('matBadgeOverlap')\n  get overlap(): boolean { return this._overlap; }\n  set overlap(val: boolean) {\n    this._overlap = coerceBooleanProperty(val);\n  }\n  private _overlap: boolean = true;\n\n  /**\n   * Position the badge should reside.\n   * Accepts any combination of 'above'|'below' and 'before'|'after'\n   */\n  @Input('matBadgePosition') position: MatBadgePosition = 'above after';\n\n  /** The content for the badge */\n  @Input('matBadge')\n  get content(): string { return this._content; }\n  set content(val: string) {\n    this._content = val;\n    this._updateTextContent();\n  }\n  private _content: string;\n\n  /** Message used to describe the decorated element via aria-describedby */\n  @Input('matBadgeDescription')\n  get description(): string { return this._description; }\n  set description(val: string) {\n    if (this._description) {\n      this._updateHostAriaDescription(val, this._description);\n    }\n    this._description = val;\n  }\n  private _description: string;\n\n  /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n  @Input('matBadgeSize') size: MatBadgeSize = 'medium';\n\n  /** Whether the badge is hidden. */\n  @Input('matBadgeHidden')\n  get hidden(): boolean { return this._hidden; }\n  set hidden(val: boolean) {\n    this._hidden = coerceBooleanProperty(val);\n  }\n  private _hidden: boolean;\n\n  /** Unique id for the badge */\n  _id: number = nextId++;\n\n  private _badgeElement: HTMLElement;\n\n  constructor(\n      @Optional() @Inject(DOCUMENT) private _document: any,\n      private _ngZone: NgZone,\n      private _elementRef: ElementRef,\n      private _ariaDescriber: AriaDescriber) {}\n\n  /** Whether the badge is above the host or not */\n  isAbove(): boolean {\n    return this.position.indexOf('below') === -1;\n  }\n\n  /** Whether the badge is after the host or not */\n  isAfter(): boolean {\n    return this.position.indexOf('before') === -1;\n  }\n\n  /** Injects a span element into the DOM with the content. */\n  private _updateTextContent(): HTMLSpanElement {\n    if (!this._badgeElement) {\n      this._badgeElement = this._createBadgeElement();\n    } else {\n      this._badgeElement.textContent = this.content;\n    }\n    return this._badgeElement;\n  }\n\n  /** Creates the badge element */\n  private _createBadgeElement(): HTMLElement {\n    const badgeElement = this._document.createElement('span');\n    badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n    badgeElement.classList.add('mat-badge-content');\n    badgeElement.textContent = this.content;\n\n    if (this.description) {\n      badgeElement.setAttribute('aria-label', this.description);\n    }\n\n    this._elementRef.nativeElement.appendChild(badgeElement);\n\n    // animate in after insertion\n    this._ngZone.runOutsideAngular(() => requestAnimationFrame(() => {\n      // ensure content available\n      if (badgeElement) {\n        badgeElement.classList.add('mat-badge-active');\n      }\n    }));\n\n    return badgeElement;\n  }\n\n  /** Sets the aria-label property on the element */\n  private _updateHostAriaDescription(val: string, prevVal: string): void {\n    // ensure content available before setting label\n    const content = this._updateTextContent();\n    this._ariaDescriber.removeDescription(content, prevVal);\n    this._ariaDescriber.describe(content, val);\n  }\n\n  /** Adds css theme class given the color to the component host */\n  private _setColor(colorPalette: ThemePalette) {\n    if (colorPalette !== this._color) {\n      if (this._color) {\n        this._elementRef.nativeElement.classList.remove(`mat-badge-${this._color}`);\n      }\n      if (colorPalette) {\n        this._elementRef.nativeElement.classList.add(`mat-badge-${colorPalette}`);\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatBadge} from './badge';\n\n\n@NgModule({\n  imports: [\n    MatCommonModule,\n    A11yModule,\n  ],\n  exports: [\n    MatBadge,\n  ],\n  declarations: [\n    MatBadge,\n  ],\n})\nexport class MatBadgeModule {}\n"],"names":["nextId","MatBadge","_document","_ngZone","_elementRef","_ariaDescriber","this","_color","_overlap","position","size","_id","Object","defineProperty","prototype","value","_setColor","val","coerceBooleanProperty","_content","_updateTextContent","_description","_updateHostAriaDescription","_hidden","isAbove","indexOf","isAfter","_badgeElement","textContent","content","_createBadgeElement","badgeElement","createElement","setAttribute","classList","add","description","nativeElement","appendChild","runOutsideAngular","requestAnimationFrame","prevVal","removeDescription","describe","colorPalette","remove","type","Directive","args","selector","host","class","[class.mat-badge-overlap]","[class.mat-badge-above]","[class.mat-badge-below]","[class.mat-badge-before]","[class.mat-badge-after]","[class.mat-badge-small]","[class.mat-badge-medium]","[class.mat-badge-large]","[class.mat-badge-hidden]","undefined","decorators","Optional","Inject","DOCUMENT","NgZone","ElementRef","AriaDescriber","color","Input","overlap","hidden","MatBadgeModule","NgModule","imports","MatCommonModule","A11yModule","exports","declarations"],"mappings":"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"}