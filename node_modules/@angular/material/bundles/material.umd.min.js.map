{"version":3,"file":"material.umd.min.js","sources":["../../src/lib/tabs/tab-header.ts","../../src/lib/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/lib/tabs/tabs-module.ts","../../src/lib/toolbar/toolbar.ts","../../src/lib/toolbar/toolbar-module.ts","../../src/lib/version.ts","../../src/lib/autocomplete/autocomplete-trigger.ts","../../src/lib/core/testing/month-constants.ts","../../src/lib/expansion/expansion-animations.ts","../../src/lib/select/select.ts","../../src/lib/tooltip/tooltip.ts","../../src/lib/stepper/step-header.ts","../../src/lib/stepper/stepper-animations.ts","../../src/lib/stepper/stepper-icon.ts","../../src/lib/stepper/stepper.ts","../../src/lib/stepper/stepper-button.ts","../../src/lib/stepper/stepper-module.ts","../../src/lib/table/table.ts","../../src/lib/table/cell.ts","../../src/lib/table/row.ts","../../src/lib/table/table-module.ts","../../src/lib/table/table-data-source.ts","../../src/lib/tabs/ink-bar.ts","../../src/lib/tabs/tab-label.ts","../../src/lib/tabs/tab-content.ts","../../src/lib/tabs/tab.ts","../../src/lib/tabs/tabs-animations.ts","../../src/lib/tabs/tab-body.ts","../../src/lib/tabs/tab-group.ts","../../src/lib/tabs/tab-label-wrapper.ts","../../src/lib/slider/slider.ts","../../src/lib/slider/slider-module.ts","../../src/lib/snack-bar/snack-bar-ref.ts","../../src/lib/snack-bar/snack-bar-config.ts","../../src/lib/snack-bar/snack-bar-animations.ts","../../src/lib/snack-bar/simple-snack-bar.ts","../../src/lib/snack-bar/snack-bar-container.ts","../../src/lib/snack-bar/snack-bar.ts","../../src/lib/snack-bar/snack-bar-module.ts","../../src/lib/sort/sort.ts","../../src/lib/sort/sort-header-intl.ts","../../src/lib/sort/sort-animations.ts","../../src/lib/sort/sort-header.ts","../../src/lib/sort/sort-module.ts","../../src/lib/stepper/step-label.ts","../../src/lib/stepper/stepper-intl.ts","../../src/lib/sidenav/drawer.ts","../../src/lib/sidenav/sidenav.ts","../../src/lib/sidenav/sidenav-module.ts","../../src/lib/slide-toggle/slide-toggle.ts","../../src/lib/slide-toggle/slide-toggle-module.ts","../../src/lib/progress-spinner/progress-spinner.ts","../../src/lib/progress-spinner/progress-spinner-module.ts","../../src/lib/radio/radio.ts","../../src/lib/radio/radio-module.ts","../../src/lib/sidenav/drawer-animations.ts","../../src/lib/select/select-module.ts","../../src/lib/tooltip/tooltip-animations.ts","../../src/lib/tooltip/tooltip-module.ts","../../src/lib/paginator/paginator-intl.ts","../../src/lib/paginator/paginator.ts","../../src/lib/paginator/paginator-module.ts","../../src/lib/progress-bar/progress-bar.ts","../../src/lib/progress-bar/progress-bar-module.ts","../../src/lib/menu/menu-directive.ts","../../src/lib/menu/menu-trigger.ts","../../src/lib/menu/menu-module.ts","../../src/lib/select/select-animations.ts","../../src/lib/list/selection-list.ts","../../src/lib/list/list-module.ts","../../src/lib/menu/menu-animations.ts","../../src/lib/menu/menu-item.ts","../../src/lib/menu/menu-content.ts","../../src/lib/list/list.ts","../../src/lib/icon/icon-registry.ts","../../src/lib/icon/icon.ts","../../src/lib/icon/icon-module.ts","../../src/lib/datepicker/datepicker-input.ts","../../src/lib/datepicker/datepicker-toggle.ts","../../src/lib/datepicker/datepicker-module.ts","../../src/lib/divider/divider.ts","../../src/lib/divider/divider-module.ts","../../src/lib/expansion/accordion.ts","../../src/lib/expansion/expansion-panel-content.ts","../../src/lib/expansion/expansion-panel.ts","../../src/lib/expansion/expansion-panel-header.ts","../../src/lib/expansion/expansion-module.ts","../../src/lib/grid-list/grid-tile.ts","../../src/lib/grid-list/tile-coordinator.ts","../../src/lib/grid-list/tile-styler.ts","../../src/lib/grid-list/grid-list.ts","../../src/lib/grid-list/grid-list-module.ts","../../src/lib/datepicker/month-view.ts","../../src/lib/datepicker/multi-year-view.ts","../../src/lib/datepicker/year-view.ts","../../src/lib/datepicker/calendar.ts","../../src/lib/datepicker/datepicker.ts","../../src/lib/dialog/dialog-container.ts","../../src/lib/dialog/dialog-ref.ts","../../src/lib/dialog/dialog.ts","../../src/lib/dialog/dialog-content-directives.ts","../../src/lib/dialog/dialog-module.ts","../../src/lib/input/autofill.ts","../../src/lib/input/autosize.ts","../../src/lib/input/input-value-accessor.ts","../../src/lib/input/input.ts","../../src/lib/input/input-module.ts","../../src/lib/datepicker/datepicker-intl.ts","../../src/lib/datepicker/calendar-body.ts","../../src/lib/checkbox/checkbox.ts","../../src/lib/checkbox/checkbox-required-validator.ts","../../src/lib/checkbox/checkbox-module.ts","../../src/lib/chips/chip.ts","../../src/lib/chips/chip-list.ts","../../src/lib/chips/chip-input.ts","../../src/lib/chips/chips-module.ts","../../src/lib/dialog/dialog-config.ts","../../src/lib/dialog/dialog-animations.ts","../../src/lib/button/button.ts","../../src/lib/button/button-module.ts","../../src/lib/button-toggle/button-toggle.ts","../../src/lib/button-toggle/button-toggle-module.ts","../../src/lib/card/card.ts","../../src/lib/card/card-module.ts","../../src/lib/checkbox/checkbox-config.ts","../../src/lib/autocomplete/autocomplete-module.ts","../../src/lib/badge/badge.ts","../../src/lib/badge/badge-module.ts","../../src/lib/bottom-sheet/bottom-sheet-animations.ts","../../src/lib/bottom-sheet/bottom-sheet-container.ts","../../src/lib/bottom-sheet/bottom-sheet-config.ts","../../src/lib/bottom-sheet/bottom-sheet-ref.ts","../../src/lib/bottom-sheet/bottom-sheet.ts","../../src/lib/bottom-sheet/bottom-sheet-module.ts","../../src/lib/core/option/option.ts","../../src/lib/core/option/index.ts","../../src/lib/core/label/label-options.ts","../../src/lib/form-field/error.ts","../../src/lib/form-field/form-field-animations.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/hint.ts","../../src/lib/form-field/label.ts","../../src/lib/form-field/placeholder.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/suffix.ts","../../src/lib/form-field/form-field.ts","../../src/lib/form-field/form-field-module.ts","../../src/lib/autocomplete/autocomplete.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/common-behaviors/disable-ripple.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/common-behaviors/error-state.ts","../../src/lib/core/common-behaviors/initialized.ts","../../src/lib/core/datetime/native-date-adapter.ts","../../src/lib/core/ripple/ripple-renderer.ts","../../src/lib/form-field/form-field-errors.ts","../../src/lib/input/input-errors.ts","../../src/lib/datepicker/datepicker-errors.ts","../../src/lib/grid-list/grid-list-measure.ts","../../src/lib/menu/menu-errors.ts","../../src/lib/select/select-errors.ts","../../src/lib/sort/sort-errors.ts","../../src/lib/core/animation/animation.ts","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/datetime/date-adapter.ts","../../src/lib/core/datetime/date-formats.ts","../../src/lib/core/datetime/native-date-formats.ts","../../src/lib/core/datetime/index.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/gestures/gesture-config.ts","../../src/lib/core/line/line.ts","../../src/lib/core/ripple/ripple-ref.ts","../../src/lib/core/ripple/ripple.ts","../../src/lib/core/ripple/index.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/option/optgroup.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {ENTER, LEFT_ARROW, RIGHT_ARROW, SPACE, HOME, END} from '@angular/cdk/keycodes';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, mixinDisableRipple} from '@angular/material/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Subscription} from 'rxjs/Subscription';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {MatInkBar} from './ink-bar';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\n\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n// Boilerplate for applying mixins to MatTabHeader.\n/** @docs-private */\nexport class MatTabHeaderBase {}\nexport const _MatTabHeaderMixinBase = mixinDisableRipple(MatTabHeaderBase);\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  },\n})\nexport class MatTabHeader extends _MatTabHeaderMixinBase\n    implements AfterContentChecked, AfterContentInit, OnDestroy, CanDisableRipple {\n\n  @ContentChildren(MatTabLabelWrapper) _labelWrappers: QueryList<MatTabLabelWrapper>;\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n  @ViewChild('tabListContainer') _tabListContainer: ElementRef;\n  @ViewChild('tabList') _tabList: ElementRef;\n\n  /** The tab index that is focused. */\n  private _focusIndex: number = 0;\n\n  /** The distance in pixels that the tab labels should be translated to the left. */\n  private _scrollDistance = 0;\n\n  /** Whether the header should scroll to the selected index after the view has been checked. */\n  private _selectedIndexChanged = false;\n\n  /** Combines listeners that will re-align the ink bar whenever they're invoked. */\n  private _realignInkBar = Subscription.EMPTY;\n\n  /** Whether the controls for pagination should be displayed */\n  _showPaginationControls = false;\n\n  /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n  _disableScrollAfter = true;\n\n  /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n  _disableScrollBefore = true;\n\n  /**\n   * The number of tab labels that are displayed on the header. When this changes, the header\n   * should re-evaluate the scroll position.\n   */\n  private _tabLabelCount: number;\n\n  /** Whether the scroll distance has changed and should be applied after the view is checked. */\n  private _scrollDistanceChanged: boolean;\n\n  private _selectedIndex: number = 0;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number { return this._selectedIndex; }\n  set selectedIndex(value: number) {\n    value = coerceNumberProperty(value);\n    this._selectedIndexChanged = this._selectedIndex != value;\n    this._selectedIndex = value;\n    this._focusIndex = value;\n  }\n\n  /** Event emitted when the option is selected. */\n  @Output() readonly selectFocusedIndex = new EventEmitter();\n\n  /** Event emitted when a label is focused. */\n  @Output() readonly indexFocused = new EventEmitter();\n\n  constructor(private _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler,\n              @Optional() private _dir: Directionality) {\n    super();\n  }\n\n  ngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._labelWrappers.length) {\n      this._updatePagination();\n      this._tabLabelCount = this._labelWrappers.length;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  _handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case RIGHT_ARROW:\n        this._focusNextTab();\n        break;\n      case LEFT_ARROW:\n        this._focusPreviousTab();\n        break;\n      case HOME:\n        this._focusFirstTab();\n        event.preventDefault();\n        break;\n      case END:\n        this._focusLastTab();\n        event.preventDefault();\n        break;\n      case ENTER:\n      case SPACE:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        event.preventDefault();\n        break;\n    }\n  }\n\n  /**\n   * Aligns the ink bar to the selected tab on load.\n   */\n  ngAfterContentInit() {\n    const dirChange = this._dir ? this._dir.change : observableOf(null);\n    const resize = this._viewportRuler.change(150);\n    const realign = () => {\n      this._updatePagination();\n      this._alignInkBarToSelectedTab();\n    };\n\n    // Defer the first call in order to allow for slower browsers to lay out the elements.\n    // This helps in cases where the user lands directly on a page with paginated tabs.\n    typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();\n    this._realignInkBar = merge(dirChange, resize).subscribe(realign);\n  }\n\n  ngOnDestroy() {\n    this._realignInkBar.unsubscribe();\n  }\n\n  /**\n   * Callback for when the MutationObserver detects that the content has changed.\n   */\n  _onContentChanges() {\n    this._updatePagination();\n    this._alignInkBarToSelectedTab();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Updating the view whether pagination should be enabled or not\n   */\n  _updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n\n  /** When the focus index is set, we must manually send focus to the correct label */\n  set focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this._focusIndex == value) { return; }\n\n    this._focusIndex = value;\n    this.indexFocused.emit(value);\n    this._setTabFocus(value);\n  }\n\n  /** Tracks which element has focus; used for keyboard navigation */\n  get focusIndex(): number { return this._focusIndex; }\n\n  /**\n   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n   * providing a valid index and return true.\n   */\n  _isValidIndex(index: number): boolean {\n    if (!this._labelWrappers) { return true; }\n\n    const tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n\n  /**\n   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n   * scrolling is enabled.\n   */\n  _setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._labelWrappers && this._labelWrappers.length) {\n      this._labelWrappers.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const containerEl = this._tabListContainer.nativeElement;\n      const dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n\n  /**\n   * Moves the focus towards the beginning or the end of the list depending on the offset provided.\n   * Valid offsets are 1 and -1.\n   */\n  _moveFocus(offset: number) {\n    if (this._labelWrappers) {\n      const tabs: MatTabLabelWrapper[] = this._labelWrappers.toArray();\n\n      for (let i = this.focusIndex + offset; i < tabs.length && i >= 0; i += offset) {\n        if (this._isValidIndex(i)) {\n          this.focusIndex = i;\n          return;\n        }\n      }\n    }\n  }\n\n  /** Increment the focus index by 1 until a valid tab is found. */\n  _focusNextTab(): void {\n    this._moveFocus(this._getLayoutDirection() == 'ltr' ? 1 : -1);\n  }\n\n  /** Decrement the focus index by 1 until a valid tab is found. */\n  _focusPreviousTab(): void {\n    this._moveFocus(this._getLayoutDirection() == 'ltr' ? -1 : 1);\n  }\n\n  /** Focuses the first tab. */\n  private _focusFirstTab(): void {\n    for (let i = 0; i < this._labelWrappers.length; i++) {\n      if (this._isValidIndex(i)) {\n        this.focusIndex = i;\n        break;\n      }\n    }\n  }\n\n  /** Focuses the last tab. */\n  private _focusLastTab(): void {\n    for (let i = this._labelWrappers.length - 1; i > -1; i--) {\n      if (this._isValidIndex(i)) {\n        this.focusIndex = i;\n        break;\n      }\n    }\n  }\n\n  /** The layout direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n  _updateTabScrollPosition() {\n    const scrollDistance = this.scrollDistance;\n    const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    this._tabList.nativeElement.style.transform = `translate3d(${translateX}px, 0, 0)`;\n  }\n\n  /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n  get scrollDistance(): number { return this._scrollDistance; }\n  set scrollDistance(v: number) {\n    this._scrollDistance = Math.max(0, Math.min(this._getMaxScrollDistance(), v));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n  }\n\n  /**\n   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n   * the end of the list, respectively). The distance to scroll is computed to be a third of the\n   * length of the tab list view window.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollHeader(scrollDir: ScrollDirection) {\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    this.scrollDistance += (scrollDir == 'before' ? -1 : 1) * viewLength / 3;\n  }\n\n  /**\n   * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollToLabel(labelIndex: number) {\n    const selectedLabel = this._labelWrappers ? this._labelWrappers.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    let labelBeforePos: number, labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = selectedLabel.getOffsetLeft();\n      labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n      labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n    }\n\n    const beforeVisiblePos = this.scrollDistance;\n    const afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n\n  /**\n   * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n   * tab list is wider than the size of the header container, then the pagination controls should\n   * be shown.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkPaginationEnabled() {\n    const isEnabled =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!isEnabled) {\n      this.scrollDistance = 0;\n    }\n\n    if (isEnabled !== this._showPaginationControls) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._showPaginationControls = isEnabled;\n  }\n\n  /**\n   * Evaluate whether the before and after controls should be enabled or disabled.\n   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n   * before button. If the header is at the end of the list (scroll distance is equal to the\n   * maximum distance we can scroll), then disable the after button.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n   * is equal to the difference in width between the tab list container and tab header container.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _getMaxScrollDistance(): number {\n    const lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return (lengthOfTabList - viewLength) || 0;\n  }\n\n  /** Tells the ink-bar to align itself to the current label wrapper */\n  private _alignInkBarToSelectedTab(): void {\n    const selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length ?\n        this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement :\n        null;\n\n    this._inkBar.alignToElement(selectedLabelWrapper);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex, RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {Subject} from 'rxjs/Subject';\nimport {MatInkBar} from '../ink-bar';\n\n\n// Boilerplate for applying mixins to MatTabNav.\n/** @docs-private */\nexport class MatTabNavBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabNavMixinBase = mixinColor(MatTabNavBase, 'primary');\n\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-tab-nav-bar]',\n  exportAs: 'matTabNavBar, matTabNav',\n  inputs: ['color'],\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {'class': 'mat-tab-nav-bar'},\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTabNav extends _MatTabNavMixinBase implements AfterContentInit, CanColor,\n    OnDestroy {\n\n  /** Subject that emits when the component has been destroyed. */\n  private readonly _onDestroy = new Subject<void>();\n\n  _activeLinkChanged: boolean;\n  _activeLinkElement: ElementRef;\n\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n\n  /** Query list of all tab links of the tab navigation. */\n  @ContentChildren(forwardRef(() => MatTabLink), {descendants: true})\n  _tabLinks: QueryList<MatTabLink>;\n\n  /** Background color of the tab nav. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Whether ripples should be disabled for all links or not. */\n  @Input()\n  get disableRipple() { return this._disableRipple; }\n  set disableRipple(value: boolean) {\n    this._disableRipple = coerceBooleanProperty(value);\n    this._setLinkDisableRipple();\n  }\n  private _disableRipple: boolean = false;\n\n  constructor(elementRef: ElementRef,\n              @Optional() private _dir: Directionality,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler) {\n    super(elementRef);\n  }\n\n  /** Notifies the component that the active link has been changed. */\n  updateActiveLink(element: ElementRef) {\n    this._activeLinkChanged = this._activeLinkElement != element;\n    this._activeLinkElement = element;\n\n    if (this._activeLinkChanged) {\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit(): void {\n    this._ngZone.runOutsideAngular(() => {\n      const dirChange = this._dir ? this._dir.change : observableOf(null);\n\n      return merge(dirChange, this._viewportRuler.change(10)).pipe(takeUntil(this._onDestroy))\n          .subscribe(() => this._alignInkBar());\n    });\n\n    this._setLinkDisableRipple();\n  }\n\n  /** Checks if the active link has been changed and, if so, will update the ink bar. */\n  ngAfterContentChecked(): void {\n    if (this._activeLinkChanged) {\n      this._alignInkBar();\n      this._activeLinkChanged = false;\n    }\n  }\n\n  ngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  /** Aligns the ink bar to the active link. */\n  _alignInkBar(): void {\n    if (this._activeLinkElement) {\n      this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\n    }\n  }\n\n  /** Sets the `disableRipple` property on each link of the navigation bar. */\n  private _setLinkDisableRipple() {\n    if (this._tabLinks) {\n      this._tabLinks.forEach(link => link.disableRipple = this.disableRipple);\n    }\n  }\n}\n\n\n// Boilerplate for applying mixins to MatTabLink.\nexport class MatTabLinkBase {}\nexport const _MatTabLinkMixinBase =\n  mixinTabIndex(mixinDisableRipple(mixinDisabled(MatTabLinkBase)));\n\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\n@Directive({\n  selector: '[mat-tab-link], [matTabLink]',\n  exportAs: 'matTabLink',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'class': 'mat-tab-link',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.tabIndex]': 'tabIndex',\n    '[class.mat-tab-disabled]': 'disabled',\n    '[class.mat-tab-label-active]': 'active',\n    '(click)': '_handleClick($event)'\n  }\n})\nexport class MatTabLink extends _MatTabLinkMixinBase\n    implements OnDestroy, CanDisable, CanDisableRipple, HasTabIndex, RippleTarget {\n\n  /** Whether the tab link is active or not. */\n  private _isActive: boolean = false;\n\n  /** Reference to the RippleRenderer for the tab-link. */\n  private _tabLinkRipple: RippleRenderer;\n\n  /** Whether the link is active. */\n  @Input()\n  get active(): boolean { return this._isActive; }\n  set active(value: boolean) {\n    this._isActive = value;\n    if (value) {\n      this._tabNavBar.updateActiveLink(this._elementRef);\n    }\n  }\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple;\n  }\n\n  constructor(private _tabNavBar: MatTabNav,\n              private _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Attribute('tabindex') tabIndex: string) {\n    super();\n\n    this._tabLinkRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._tabLinkRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    if (globalOptions) {\n      this.rippleConfig = {\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n        speedFactor: globalOptions.baseSpeedFactor,\n        animation: globalOptions.animation,\n      };\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabLinkRipple._removeTriggerEvents();\n  }\n\n  /**\n   * Handles the click event, preventing default navigation if the tab link is disabled.\n   */\n  _handleClick(event: MouseEvent) {\n    if (this.disabled) {\n      event.preventDefault();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {ScrollDispatchModule, VIEWPORT_RULER_PROVIDER} from '@angular/cdk/scrolling';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatInkBar} from './ink-bar';\nimport {MatTab} from './tab';\nimport {MatTabBody, MatTabBodyPortal} from './tab-body';\nimport {MatTabGroup} from './tab-group';\nimport {MatTabHeader} from './tab-header';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {MatTabLink, MatTabNav} from './tab-nav-bar/tab-nav-bar';\nimport {MatTabContent} from './tab-content';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    PortalModule,\n    MatRippleModule,\n    ObserversModule,\n    ScrollDispatchModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MatCommonModule,\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatTabNav,\n    MatTabLink,\n    MatTabContent,\n  ],\n  declarations: [\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatInkBar,\n    MatTabLabelWrapper,\n    MatTabNav,\n    MatTabLink,\n    MatTabBody,\n    MatTabBodyPortal,\n    MatTabHeader,\n    MatTabContent,\n  ],\n  providers: [VIEWPORT_RULER_PROVIDER],\n})\nexport class MatTabsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  isDevMode,\n  QueryList,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\n\n// Boilerplate for applying mixins to MatToolbar.\n/** @docs-private */\nexport class MatToolbarBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatToolbarMixinBase = mixinColor(MatToolbarBase);\n\n@Directive({\n  selector: 'mat-toolbar-row',\n  exportAs: 'matToolbarRow',\n  host: {'class': 'mat-toolbar-row'},\n})\nexport class MatToolbarRow {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-toolbar',\n  exportAs: 'matToolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    '[class.mat-toolbar-multiple-rows]': 'this._toolbarRows.length',\n    '[class.mat-toolbar-single-row]': '!this._toolbarRows.length'\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatToolbar extends _MatToolbarMixinBase implements CanColor, AfterViewInit {\n  private _document: Document;\n\n  /** Reference to all toolbar row elements that have been projected. */\n  @ContentChildren(MatToolbarRow) _toolbarRows: QueryList<MatToolbarRow>;\n\n  constructor(\n    elementRef: ElementRef,\n    private _platform: Platform,\n    @Inject(DOCUMENT) document?: any) {\n    super(elementRef);\n\n    // TODO: make the document a required param when doing breaking changes.\n    this._document = document;\n  }\n\n  ngAfterViewInit() {\n    if (!isDevMode() || !this._platform.isBrowser) {\n      return;\n    }\n\n    this._checkToolbarMixedModes();\n    this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n  }\n\n  /**\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\n   */\n  private _checkToolbarMixedModes() {\n    if (!this._toolbarRows.length) {\n      return;\n    }\n\n    // Check if there are any other DOM nodes that can display content but aren't inside of\n    // a <mat-toolbar-row> element.\n    const isCombinedUsage = [].slice.call(this._elementRef.nativeElement.childNodes)\n      .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n      .filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8))\n      .some(node => node.textContent.trim());\n\n    if (isCombinedUsage) {\n      throwToolbarMixedModesError();\n    }\n  }\n}\n\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nexport function throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n    'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n    'inside of a `<mat-toolbar>` for a single row.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatToolbar, MatToolbarRow} from './toolbar';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n  declarations: [MatToolbar, MatToolbarRow],\n})\nexport class MatToolbarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Version} from '@angular/core';\n\n/** Current version of Angular Material. */\nexport const VERSION = new Version('6.0.0-beta.2-fe49345');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DOWN_ARROW, ENTER, ESCAPE, UP_ARROW, TAB} from '@angular/cdk/keycodes';\nimport {\n  ConnectedPositionStrategy,\n  Overlay,\n  OverlayRef,\n  OverlayConfig,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {filter} from 'rxjs/operators/filter';\nimport {take} from 'rxjs/operators/take';\nimport {switchMap} from 'rxjs/operators/switchMap';\nimport {tap} from 'rxjs/operators/tap';\nimport {delay} from 'rxjs/operators/delay';\nimport {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  MatOption,\n  MatOptionSelectionChange,\n  _getOptionScrollPosition,\n  _countGroupLabelsBeforeOption,\n} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {DOCUMENT} from '@angular/common';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {defer} from 'rxjs/observable/defer';\nimport {fromEvent} from 'rxjs/observable/fromEvent';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatAutocomplete} from './autocomplete';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n */\nexport function getMatAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n@Directive({\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    'role': 'combobox',\n    'autocomplete': 'off',\n    'aria-autocomplete': 'list',\n    '[attr.aria-activedescendant]': 'activeOption?.id',\n    '[attr.aria-expanded]': 'panelOpen.toString()',\n    '[attr.aria-owns]': 'autocomplete?.id',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  exportAs: 'matAutocompleteTrigger',\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class MatAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\n  private _overlayRef: OverlayRef | null;\n  private _portal: TemplatePortal;\n  private _componentDestroyed = false;\n\n  /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n  private _previousValue: string | number | null;\n\n  /** Strategy that is used to position the panel. */\n  private _positionStrategy: ConnectedPositionStrategy;\n\n  /** Whether or not the label state is being overridden. */\n  private _manuallyFloatingLabel = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Stream of keyboard events that can close the panel. */\n  private readonly _closeKeyEventStream = new Subject<void>();\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when autocomplete has been touched` */\n  _onTouched = () => {};\n\n  /** The autocomplete panel to be attached to this trigger. */\n  @Input('matAutocomplete') autocomplete: MatAutocomplete;\n\n  constructor(private _element: ElementRef, private _overlay: Overlay,\n              private _viewContainerRef: ViewContainerRef,\n              private _zone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dir: Directionality,\n              @Optional() @Host() private _formField: MatFormField,\n              @Optional() @Inject(DOCUMENT) private _document: any) {}\n\n  ngOnDestroy() {\n    this._componentDestroyed = true;\n    this._destroyPanel();\n    this._closeKeyEventStream.complete();\n  }\n\n  /** Whether or not the autocomplete panel is open. */\n  get panelOpen(): boolean { return this._panelOpen && this.autocomplete.showPanel; }\n  private _panelOpen: boolean = false;\n\n  /** Opens the autocomplete suggestion panel. */\n  openPanel(): void {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n\n  /** Closes the autocomplete suggestion panel. */\n  closePanel(): void {\n    this._resetLabel();\n\n    if (this._panelOpen) {\n      this.autocomplete._isOpen = this._panelOpen = false;\n      this.autocomplete.closed.emit();\n\n      if (this._overlayRef && this._overlayRef.hasAttached()) {\n        this._overlayRef.detach();\n        this._closingActionsSubscription.unsubscribe();\n      }\n\n      // Note that in some cases this can end up being called after the component is destroyed.\n      // Add a check to ensure that we don't try to run change detection on a destroyed view.\n      if (!this._componentDestroyed) {\n        // We need to trigger change detection manually, because\n        // `fromEvent` doesn't seem to do it at the proper time.\n        // This ensures that the label is reset when the\n        // user clicks outside.\n        this._changeDetectorRef.detectChanges();\n      }\n    }\n  }\n\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions(): Observable<MatOptionSelectionChange> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._panelOpen)),\n      this._closeKeyEventStream,\n      this._outsideClickStream,\n      this._overlayRef ?\n          this._overlayRef.detachments().pipe(filter(() => this._panelOpen)) :\n          observableOf()\n    );\n  }\n\n  /** Stream of autocomplete option selections. */\n  readonly optionSelections: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.autocomplete && this.autocomplete.options) {\n     return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n    }\n\n    // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n    // Return a stream that we'll replace with the real one once everything is in place.\n    return this._zone.onStable\n        .asObservable()\n        .pipe(take(1), switchMap(() => this.optionSelections));\n  });\n\n  /** The currently active option, coerced to MatOption type. */\n  get activeOption(): MatOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  /** Stream of clicks outside of the autocomplete panel. */\n  private get _outsideClickStream(): Observable<any> {\n    if (!this._document) {\n      return observableOf(null);\n    }\n\n    return merge(\n      fromEvent(this._document, 'click'),\n      fromEvent(this._document, 'touchend')\n    )\n    .pipe(filter((event: MouseEvent | TouchEvent) => {\n      const clickTarget = event.target as HTMLElement;\n      const formField = this._formField ?\n          this._formField._elementRef.nativeElement : null;\n\n      return this._panelOpen &&\n              clickTarget !== this._element.nativeElement &&\n              (!formField || !formField.contains(clickTarget)) &&\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n    }));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    // Prevent the default action on all escape key presses. This is here primarily to bring IE\n    // in line with other browsers. By default, pressing escape on IE will cause it to revert\n    // the input value to the one that it had on focus, however it won't dispatch any events\n    // which means that the model value will be out of sync with the view.\n    if (keyCode === ESCAPE) {\n      event.preventDefault();\n    }\n\n    // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n    // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n    if (this.panelOpen && (keyCode === ESCAPE || (keyCode === UP_ARROW && event.altKey))) {\n      this._resetActiveItem();\n      this._closeKeyEventStream.next();\n      event.stopPropagation();\n    } else if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey && this._canOpen()) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption();\n      }\n    }\n  }\n\n  _handleInput(event: KeyboardEvent): void {\n    let target = event.target as HTMLInputElement;\n    let value: number | string | null = target.value;\n\n    // Based on `NumberValueAccessor` from forms.\n    if (target.type === 'number') {\n      value = value == '' ? null : parseFloat(value);\n    }\n\n    // If the input has a placeholder, IE will fire the `input` event on page load,\n    // focus and blur, in addition to when the user actually changed the value. To\n    // filter out all of the extra events, we save the value on focus and between\n    // `input` events, and we check whether it changed.\n    // See: https://connect.microsoft.com/IE/feedback/details/885747/\n    if (this._canOpen() && this._previousValue !== value &&\n      document.activeElement === event.target) {\n      this._previousValue = value;\n      this._onChange(value);\n      this.openPanel();\n    }\n  }\n\n  _handleFocus(): void {\n    if (this._canOpen()) {\n      this._previousValue = this._element.nativeElement.value;\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  private _floatLabel(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n\n  /** If the label has been manually elevated, return it to its normal state. */\n  private _resetLabel(): void  {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n   * the panel height + the option height, so the active option will be just visible at the\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\n   * not adjusted.\n   */\n  private _scrollToOption(): void {\n    const index = this.autocomplete._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(index,\n        this.autocomplete.options, this.autocomplete.optionGroups);\n\n    const newScrollPosition = _getOptionScrollPosition(\n      index + labelCount,\n      AUTOCOMPLETE_OPTION_HEIGHT,\n      this.autocomplete._getScrollTop(),\n      AUTOCOMPLETE_PANEL_HEIGHT\n    );\n\n    this.autocomplete._setScrollTop(newScrollPosition);\n  }\n\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  private _subscribeToClosingActions(): Subscription {\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(\n      tap(() => this._positionStrategy.recalculateLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)\n    );\n\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges)\n      .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n          this._resetActiveItem();\n          this.autocomplete._setVisibility();\n          return this.panelClosingActions;\n        }),\n        // when the first closing event occurs...\n        take(1)\n      )\n      // set the value, close the panel, and complete.\n      .subscribe(event => this._setValueAndClose(event));\n  }\n\n  /** Destroys the autocomplete suggestion panel. */\n  private _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  private _setTriggerValue(value: any): void {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n      this.autocomplete.displayWith(value) :\n      value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n  }\n\n  /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  private _clearPreviousSelectedOption(skip: MatOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  private _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      this._overlayRef = this._overlay.create(this._getOverlayConfig());\n    } else {\n      /** Update the panel width, in case the host width has changed */\n      this._overlayRef.updateSize({width: this._getHostWidth()});\n    }\n\n    if (this._overlayRef && !this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    const wasOpen = this.panelOpen;\n\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._panelOpen = true;\n\n    // We need to do an extra `panelOpen` check in here, because the\n    // autocomplete won't be shown if there are no options.\n    if (this.panelOpen && wasOpen !== this.panelOpen) {\n      this.autocomplete.opened.emit();\n    }\n  }\n\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getHostWidth(),\n      direction: this._dir ? this._dir.value : 'ltr'\n    });\n  }\n\n  private _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy = this._overlay.position().connectedTo(\n        this._getConnectedElement(),\n        {originX: 'start', originY: 'bottom'}, {overlayX: 'start', overlayY: 'top'})\n        .withFallbackPosition(\n            {originX: 'start', originY: 'top'}, {overlayX: 'start', overlayY: 'bottom'}\n        );\n    return this._positionStrategy;\n  }\n\n  private _getConnectedElement(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n  }\n\n  /** Returns the width of the input element, so the panel width can match it. */\n  private _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n\n  /**\n   * Resets the active item to -1 so arrow events will activate the\n   * correct options, or to 0 if the consumer opted into it.\n   */\n  private _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n  }\n\n  /** Determines whether the panel can be opened. */\n  private _canOpen(): boolean {\n    const element: HTMLInputElement = this._element.nativeElement;\n    return !element.readOnly && !element.disabled;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n */\nexport const JAN = 0, FEB = 1, MAR = 2, APR = 3, MAY = 4, JUN = 5, JUL = 6, AUG = 7, SEP = 8,\n    OCT = 9, NOV = 10, DEC = 11;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  animateChild,\n  group,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/** Animations used by the Material expansion panel. */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly expansionHeaderHeight: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel header height. */\n  expansionHeaderHeight: trigger('expansionHeight', [\n    state('collapsed', style({\n      height: '{{collapsedHeight}}',\n    }), {\n      params: {collapsedHeight: '48px'},\n    }),\n    state('expanded', style({\n      height: '{{expandedHeight}}'\n    }), {\n      params: {expandedHeight: '64px'}\n    }),\n    transition('expanded <=> collapsed', group([\n      query('@indicatorRotate', animateChild(), {optional: true}),\n      animate(EXPANSION_PANEL_ANIMATION_TIMING),\n    ])),\n  ]),\n\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  SPACE,\n  UP_ARROW,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  CdkConnectedOverlay,\n  Overlay,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  ViewportRuler,\n} from '@angular/cdk/overlay';\nimport {filter} from 'rxjs/operators/filter';\nimport {take} from 'rxjs/operators/take';\nimport {map} from 'rxjs/operators/map';\nimport {switchMap} from 'rxjs/operators/switchMap';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  ControlValueAccessor,\n  FormGroupDirective,\n  NgControl,\n  NgForm\n} from '@angular/forms';\nimport {\n  CanDisable,\n  ErrorStateMatcher,\n  CanUpdateErrorState,\n  mixinErrorState,\n  HasTabIndex,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinTabIndex,\n  MAT_OPTION_PARENT_COMPONENT,\n  mixinDisableRipple,\n  CanDisableRipple,\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n} from '@angular/material/core';\nimport {MatFormField, MatFormFieldControl} from '@angular/material/form-field';\nimport {Observable} from 'rxjs/Observable';\nimport {merge} from 'rxjs/observable/merge';\nimport {Subject} from 'rxjs/Subject';\nimport {defer} from 'rxjs/observable/defer';\nimport {matSelectAnimations} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 16;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 20px.\n */\nexport const SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + 20;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any) { }\n}\n\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nexport class MatSelectBase {\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatSelectMixinBase = mixinDisableRipple(\n    mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger'\n})\nexport class MatSelectTrigger {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_ariaLabel',\n    '[attr.aria-labelledby]': 'ariaLabelledby',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    'class': 'mat-select',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    matSelectAnimations.transformPanel,\n    matSelectAnimations.fadeInContent\n  ],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\n  ],\n})\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Whether filling out the select is required in the form. */\n  private _required: boolean = false;\n\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\n  private _scrollTop = 0;\n\n  /** The placeholder displayed in the trigger of the select. */\n  private _placeholder: string;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = `mat-select-${nextUniqueId++}`;\n\n  /** Emits whenever the component is destroyed. */\n  private readonly _destroy = new Subject<void>();\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** The aria-describedby attribute on the select for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** The cached font-size of the trigger element. */\n  _triggerFontSize = 0;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when select has been touched` */\n  _onTouched = () => {};\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /** Whether the panel's animation is done. */\n  _panelDoneAnimating: boolean = false;\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy = this._scrollStrategyFactory();\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /** Whether the component is disabling centering of the active option over the trigger. */\n  private _disableOptionCentering: boolean = false;\n\n  /** Whether the select is focused. */\n  focused: boolean = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger') trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** Overlay pane containing the options. */\n  @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n  /** All of the defined select options. */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** All of the defined groups of options. */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** User-supplied override of the trigger element. */\n  @ContentChild(MatSelectTrigger) customTrigger: MatSelectTrigger;\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder(): string { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether the component is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether to center the active option over the trigger. */\n  @Input()\n  get disableOptionCentering(): boolean { return this._disableOptionCentering; }\n  set disableOptionCentering(value: boolean) {\n    this._disableOptionCentering = coerceBooleanProperty(value);\n  }\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Combined stream of all of the child options' change events. */\n  readonly optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.options) {\n      return merge(...this.options.map(option => option.onSelectionChange));\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  });\n\n   /** Event emitted when the select panel has been toggled. */\n   @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n   /** Event emitted when the select has been opened. */\n   @Output('opened')\n   get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /**\n   * Event emitted when the select has been opened.\n   * @deprecated Use `openedChange` instead.\n   * @deletion-target 6.0.0\n   */\n  @Output() readonly onOpen: Observable<void> = this._openedStream;\n\n  /**\n   * Event emitted when the select has been closed.\n   * @deprecated Use `openedChange` instead.\n   * @deletion-target 6.0.0\n   */\n  @Output() readonly onClose: Observable<void> = this._closedStream;\n\n   /** Event emitted when the selected value has been changed by the user. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectChange> =\n      new EventEmitter<MatSelectChange>();\n\n  /**\n   * Event emitted when the selected value has been changed by the user.\n   * @deprecated Use `selectionChange` instead.\n   * @deletion-target 6.0.0\n   */\n  @Output() readonly change: EventEmitter<MatSelectChange> = this.selectionChange;\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    elementRef: ElementRef,\n    @Optional() private _dir: Directionality,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    @Optional() private _parentFormField: MatFormField,\n    @Self() @Optional() public ngControl: NgControl,\n    @Attribute('tabindex') tabIndex: string,\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) private _scrollStrategyFactory) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\n          _parentFormGroup, ngControl);\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes.disabled) {\n      this.stateChanges.next();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this.disabled || !this.options || !this.options.length) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement)['font-size']);\n\n    this._panelOpen = true;\n    this._keyManager.withHorizontalOrientation(null);\n    this._calculateOverlayPosition();\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n\n    // Set the font size on the panel element once it exists.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\n          this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n        keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n\n    // Open the select on ALT + arrow key to match the native <select>\n    if (isOpenKey || ((this.multiple || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n    } else if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.close();\n    } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem) {\n      event.preventDefault();\n      manager.activeItem._selectViaInteraction();\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n\n      manager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n          manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  /**\n   * When the panel element is finished transforming in (though not fading in), it\n   * emits an event and focuses an option if the panel is open.\n   */\n  _onPanelDone(): void {\n    if (this.panelOpen) {\n      this._scrollTop = 0;\n      this.openedChange.emit(true);\n    } else {\n      this.openedChange.emit(false);\n      this._panelDoneAnimating = false;\n      this.overlayDir.offsetX = 0;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * When the panel content is done fading in, the _panelDoneAnimating property is\n   * set so the proper class can be added to the panel.\n   */\n  _onFadeInDone(): void {\n    this._panelDoneAnimating = this.panelOpen;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this.focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    this.focused = false;\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._changeDetectorRef.detectChanges();\n      this._calculateOverlayOffsetX();\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    });\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[], isUserInput = false): void {\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      this._clearSelection();\n\n      const correspondingOption = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(this.options.toArray().indexOf(correspondingOption));\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput = false): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      isUserInput ? correspondingOption._selectViaInteraction() : correspondingOption.select();\n      this._selectionModel.select(correspondingOption);\n      this.stateChanges.next();\n    }\n\n    return correspondingOption;\n  }\n\n\n  /**\n   * Clears the select trigger and deselects every option in the list.\n   * @param skip Option that should not be deselected.\n   */\n  private _clearSelection(skip?: MatOption): void {\n    this._selectionModel.clear();\n    this.options.forEach(option => {\n      if (option !== skip) {\n        option.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options)\n      .withTypeAhead()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n\n      this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => this.close());\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollActiveOptionIntoView();\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n    this.optionSelectionChanges\n      .pipe(takeUntil(changedOrDestroyed), filter(event => event.isUserInput))\n      .subscribe(event => {\n        this._onSelect(event.source);\n\n        if (!this.multiple && this._panelOpen) {\n          this.close();\n          this.focus();\n        }\n      });\n\n    // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n    merge(...this.options.map(option => option._stateChanges))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n      });\n\n    this._setOptionIds();\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    // TODO(crisbeto): handle blank/null options inside multi-select.\n    if (this.multiple) {\n      this._selectionModel.toggle(option);\n      this.stateChanges.next();\n      wasSelected ? option.deselect() : option.select();\n      this._keyManager.setActiveItem(this._getOptionIndex(option)!);\n      this._sortValues();\n    } else {\n      this._clearSelection(option.value == null ? undefined : option);\n\n      if (option.value == null) {\n        this._propagateChanges(option.value);\n      } else {\n        this._selectionModel.select(option);\n        this.stateChanges.next();\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.options.forEach(option => {\n        if (option.selected) {\n          this._selectionModel.select(option);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._getOptionIndex(this._selectionModel.selected[0])!);\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options,\n        this.optionGroups);\n\n    this.panel.nativeElement.scrollTop = _getOptionScrollPosition(\n      activeOptionIndex + labelCount,\n      this._getItemHeight(),\n      this.panel.nativeElement.scrollTop,\n      SELECT_PANEL_MAX_HEIGHT\n    );\n  }\n\n  /** Focuses the select element. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Gets the index of the provided option in the option list. */\n  private _getOptionIndex(option: MatOption): number | undefined {\n    return this.options.reduce((result: number, current: MatOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  private _calculateOverlayPosition(): void {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset =\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n    selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options,\n        this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  /** Returns the aria-label of the select component. */\n  get _ariaLabel(): string | null {\n    // If an ariaLabelledby value has been set, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  private _calculateOverlayOffsetX(): void {\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors.\n    this.overlayDir.offsetX = offsetX;\n    this.overlayDir.overlayRef.updatePosition();\n  }\n\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop: number;\n\n    // Disable offset if requested by user by returning 0 as value to offset\n    if (this._disableOptionCentering) {\n      return 0;\n    }\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height\n    // difference, multiplied by -1 to ensure that the overlay moves in the correct\n    // direction up the page.\n    return optionOffsetFromPanelTop * -1 - optionHeightAdjustment;\n  }\n\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  private _checkOverlayWithinViewport(maxScroll: number): void {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable =\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n\n  /** Sets the transform origin point based on the selected option. */\n  private _getOriginBasedOnOption(): string {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  private _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n\n  /** Calculates the height of the select's options. */\n  private _getItemHeight(): number {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldPlaceholderFloat(): boolean {\n    return this._panelOpen || !this.empty;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {AriaDescriber, FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {\n  ConnectionPositionPair,\n  HorizontalConnectionPos,\n  OriginConnectionPosition,\n  Overlay,\n  ScrollDispatcher,\n  OverlayConnectionPosition,\n  OverlayRef,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  VerticalConnectionPos,\n  ConnectedPositionStrategy,\n} from '@angular/cdk/overlay';\nimport {Platform} from '@angular/cdk/platform';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take} from 'rxjs/operators/take';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {filter} from 'rxjs/operators/filter';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {matTooltipAnimations} from './tooltip-animations';\nimport {BreakpointObserver, Breakpoints, BreakpointState} from '@angular/cdk/layout';\n\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n\n/** Time in ms to throttle repositioning after scroll events. */\nexport const SCROLL_THROTTLE_MS = 20;\n\n/** CSS class that will be attached to the overlay panel. */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n\n/** Creates an error to be thrown if the user supplied an invalid tooltip position. */\nexport function getMatTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-tooltip-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition({ scrollThrottle: SCROLL_THROTTLE_MS });\n}\n\n/** @docs-private */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER_FACTORY\n};\n\n/** Default `matTooltip` options that can be overridden. */\nexport interface MatTooltipDefaultOptions {\n  showDelay: number;\n  hideDelay: number;\n  touchendHideDelay: number;\n}\n\n/** Injection token to be used to override the default options for `matTooltip`. */\nexport const MAT_TOOLTIP_DEFAULT_OPTIONS =\n    new InjectionToken<MatTooltipDefaultOptions>('mat-tooltip-default-options');\n\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.google.com/components/tooltips.html\n */\n@Directive({\n  selector: '[matTooltip]',\n  exportAs: 'matTooltip',\n  host: {\n    '(longpress)': 'show()',\n    '(keydown)': '_handleKeydown($event)',\n    '(touchend)': '_handleTouchend()',\n  },\n})\nexport class MatTooltip implements OnDestroy {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\n\n  private _portal: ComponentPortal<TooltipComponent>;\n  private _position: TooltipPosition = 'below';\n  private _disabled: boolean = false;\n  private _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n  @Input('matTooltipPosition')\n  get position(): TooltipPosition { return this._position; }\n  set position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      if (this._overlayRef) {\n        // TODO(andrewjs): When the overlay's position can be\n        // dynamically changed, do not destroy the tooltip.\n        this._detach();\n        this._updatePosition();\n      }\n    }\n  }\n\n  /** Disables the display of the tooltip. */\n  @Input('matTooltipDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * @deprecated\n   * @deletion-target 6.0.0\n   */\n  @Input('tooltip-position')\n  get _positionDeprecated(): TooltipPosition { return this._position; }\n  set _positionDeprecated(value: TooltipPosition) { this._position = value; }\n\n  /** The default delay in ms before showing the tooltip after show is called */\n  @Input('matTooltipShowDelay') showDelay =\n      this._defaultOptions ? this._defaultOptions.showDelay : 0;\n\n  /** The default delay in ms before hiding the tooltip after hide is called */\n  @Input('matTooltipHideDelay') hideDelay =\n      this._defaultOptions ? this._defaultOptions.hideDelay : 0;\n\n  private _message = '';\n\n  /** The message to be displayed in the tooltip */\n  @Input('matTooltip')\n  get message() { return this._message; }\n  set message(value: string) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    this._message = value != null ? `${value}`.trim() : '';\n\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._updateTooltipMessage();\n      this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n    }\n  }\n\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  @Input('matTooltipClass')\n  get tooltipClass() { return this._tooltipClass; }\n  set tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  private _manualListeners = new Map<string, Function>();\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  constructor(\n    private _overlay: Overlay,\n    private _elementRef: ElementRef,\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    private _ngZone: NgZone,\n    private _platform: Platform,\n    private _ariaDescriber: AriaDescriber,\n    private _focusMonitor: FocusMonitor,\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) private _scrollStrategy,\n    @Optional() private _dir: Directionality,\n    @Optional() @Inject(MAT_TOOLTIP_DEFAULT_OPTIONS)\n      private _defaultOptions?: MatTooltipDefaultOptions) {\n\n    // TODO(crisbeto): make the `_defaultOptions` a required param next time we do breaking changes.\n    // @deletion-target 6.0.0\n\n    const element: HTMLElement = _elementRef.nativeElement;\n\n    // The mouse events shouldn't be bound on iOS devices, because\n    // they can prevent the first tap from firing its click event.\n    if (!_platform.IOS) {\n      this._manualListeners.set('mouseenter', () => this.show());\n      this._manualListeners.set('mouseleave', () => this.hide());\n\n      this._manualListeners\n        .forEach((listener, event) => _elementRef.nativeElement.addEventListener(event, listener));\n    } else if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n      // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n      // will add some inline styles by default, including `user-select: none`. This is\n      // problematic on iOS, because it will prevent users from typing in inputs. If\n      // we're on iOS and the tooltip is attached on an input or textarea, we clear\n      // the `user-select` to avoid these issues.\n      element.style.webkitUserSelect = element.style.userSelect = '';\n    }\n\n    _focusMonitor.monitor(element).pipe(takeUntil(this._destroyed)).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        _ngZone.run(() => this.hide(0));\n      } else if (origin !== 'program') {\n        _ngZone.run(() => this.show());\n      }\n    });\n  }\n\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._tooltipInstance = null;\n    }\n\n    // Clean up the event listeners set in the constructor\n    if (!this._platform.IOS) {\n      this._manualListeners.forEach((listener, event) =>\n        this._elementRef.nativeElement.removeEventListener(event, listener));\n\n      this._manualListeners.clear();\n    }\n\n    this._destroyed.next();\n    this._destroyed.complete();\n\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n  show(delay: number = this.showDelay): void {\n    if (this.disabled || !this.message) { return; }\n\n    const overlayRef = this._createOverlay();\n\n    this._detach();\n    this._portal = this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n    this._tooltipInstance = overlayRef.attach(this._portal).instance;\n    this._tooltipInstance.afterHidden()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    this._tooltipInstance!.show(this._position, delay);\n  }\n\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n  hide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n\n  /** Shows/hides the tooltip */\n  toggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n\n  /** Returns true if the tooltip is currently visible to the user */\n  _isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n\n  /** Handles the keydown events on the host element. */\n  _handleKeydown(e: KeyboardEvent) {\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE) {\n      e.stopPropagation();\n      this.hide(0);\n    }\n  }\n\n  /** Handles the touchend events on the host element. */\n  _handleTouchend() {\n    this.hide(this._defaultOptions ? this._defaultOptions.touchendHideDelay : 1500);\n  }\n\n  /** Create the overlay config and position strategy */\n  private _createOverlay(): OverlayRef {\n    if (this._overlayRef) {\n      return this._overlayRef;\n    }\n\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this._overlay\n      .position()\n      .connectedTo(this._elementRef, origin.main, overlay.main)\n      .withFallbackPosition(origin.fallback, overlay.fallback)\n      .withScrollableContainers(\n        this._scrollDispatcher.getAncestorScrollContainers(this._elementRef)\n      );\n\n    strategy.onPositionChange.pipe(\n        filter(() => !!this._tooltipInstance),\n        takeUntil(this._destroyed)\n    ).subscribe(change => {\n      if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance!.isVisible()) {\n        // After position changes occur and the overlay is clipped by\n        // a parent scrollable then close the tooltip.\n        this._ngZone.run(() => this.hide(0));\n      } else {\n        // Otherwise recalculate the origin based on the new position.\n        this._tooltipInstance!._setTransformOrigin(change.connectionPair);\n      }\n    });\n\n    this._overlayRef = this._overlay.create({\n      direction: this._dir ? this._dir.value : 'ltr',\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._overlayRef.detachments()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n\n    return this._overlayRef;\n  }\n\n  /** Detaches the currently-attached tooltip. */\n  private _detach() {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n    }\n\n    this._tooltipInstance = null;\n  }\n\n  /** Updates the position of the current tooltip. */\n  private _updatePosition() {\n    const position = this._overlayRef!.getConfig().positionStrategy as ConnectedPositionStrategy;\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    position\n      .withPositions([])\n      .withFallbackPosition(origin.main, overlay.main)\n      .withFallbackPosition(origin.fallback, overlay.fallback);\n  }\n\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n   */\n  _getOrigin(): {main: OriginConnectionPosition, fallback: OriginConnectionPosition} {\n    const isDirectionLtr = !this._dir || this._dir.value == 'ltr';\n    let position: OriginConnectionPosition;\n\n    if (this.position == 'above' || this.position == 'below') {\n      position = {originX: 'center', originY: this.position == 'above' ? 'top' : 'bottom'};\n    } else if (this.position == 'left' ||\n               this.position == 'before' && isDirectionLtr ||\n               this.position == 'after' && !isDirectionLtr) {\n      position = {originX: 'start', originY: 'center'};\n    } else if (this.position == 'right' ||\n               this.position == 'after' && isDirectionLtr ||\n               this.position == 'before' && !isDirectionLtr) {\n      position = {originX: 'end', originY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(this.position);\n    }\n\n    const {x, y} = this._invertPosition(position.originX, position.originY);\n\n    return {\n      main: position,\n      fallback: {originX: x, originY: y}\n    };\n  }\n\n  /** Returns the overlay position and a fallback position based on the user's preference */\n  _getOverlayPosition(): {main: OverlayConnectionPosition, fallback: OverlayConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    let position: OverlayConnectionPosition;\n\n    if (this.position == 'above') {\n      position = {overlayX: 'center', overlayY: 'bottom'};\n    } else if (this.position == 'below') {\n      position = {overlayX: 'center', overlayY: 'top'};\n    } else if (this.position == 'left' ||\n               this.position == 'before' && isLtr ||\n               this.position == 'after' && !isLtr) {\n      position = {overlayX: 'end', overlayY: 'center'};\n    } else if (this.position == 'right' ||\n               this.position == 'after' && isLtr ||\n               this.position == 'before' && !isLtr) {\n      position = {overlayX: 'start', overlayY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(this.position);\n    }\n\n    const {x, y} = this._invertPosition(position.overlayX, position.overlayY);\n\n    return {\n      main: position,\n      fallback: {overlayX: x, overlayY: y}\n    };\n  }\n\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n  private _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(\n        take(1),\n        takeUntil(this._destroyed)\n      ).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef!.updatePosition();\n        }\n      });\n    }\n  }\n\n  /** Updates the tooltip class */\n  private _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n\n  /** Inverts an overlay position. */\n  private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return {x, y};\n  }\n}\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTooltipAnimations.tooltipState],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()',\n    'aria-hidden': 'true',\n  }\n})\nexport class TooltipComponent {\n  /** Message to display in the tooltip */\n  message: string;\n\n  /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n  tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** The timeout ID of any current timer set to show the tooltip */\n  _showTimeoutId: number;\n\n  /** The timeout ID of any current timer set to hide the tooltip */\n  _hideTimeoutId: number;\n\n  /** Property watched by the animation framework to show or hide the tooltip */\n  _visibility: TooltipVisibility = 'initial';\n\n  /** Whether interactions on the page should close the tooltip */\n  private _closeOnInteraction: boolean = false;\n\n  /** The transform origin used in the animation for showing and hiding the tooltip */\n  _transformOrigin: 'top' | 'bottom' | 'left' | 'right' = 'bottom';\n\n  /** Current position of the tooltip. */\n  private _position: TooltipPosition;\n\n  /** Subject for notifying that the tooltip has been hidden from the view */\n  private readonly _onHide: Subject<any> = new Subject();\n\n  /** Stream that emits whether the user has a handset-sized display.  */\n  _isHandset: Observable<BreakpointState> = this._breakpointObserver.observe(Breakpoints.Handset);\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _breakpointObserver: BreakpointObserver) {}\n\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param position Position of the tooltip.\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n  show(position: TooltipPosition, delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n    this._position = position;\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n  hide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n  afterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n\n  /** Whether the tooltip is being displayed. */\n  isVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n\n  /** Sets the tooltip transform origin according to the position of the tooltip overlay. */\n  _setTransformOrigin(overlayPosition: ConnectionPositionPair) {\n    const axis = (this._position === 'above' || this._position === 'below') ? 'Y' : 'X';\n    const position = axis == 'X' ? overlayPosition.overlayX : overlayPosition.overlayY;\n\n    if (position === 'top' || position === 'bottom') {\n      this._transformOrigin = position;\n    } else if (position === 'start') {\n      this._transformOrigin = 'left';\n    } else if (position === 'end') {\n      this._transformOrigin = 'right';\n    } else {\n      throw getMatTooltipInvalidPositionError(this._position);\n    }\n  }\n\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n\n  _animationDone(event: AnimationEvent): void {\n    const toState = event.toState as TooltipVisibility;\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      this._closeOnInteraction = true;\n    }\n  }\n\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.google.com/components/tooltips.html#tooltips-interaction\n   */\n  _handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n  _markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  TemplateRef,\n} from '@angular/core';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatStepLabel} from './step-label';\nimport {MatStepperIntl} from './stepper-intl';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step-header',\n  templateUrl: 'step-header.html',\n  styleUrls: ['step-header.css'],\n  host: {\n    'class': 'mat-step-header',\n    'role': 'tab',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStepHeader implements OnDestroy {\n  private _intlSubscription: Subscription;\n\n  /** State of the given step. */\n  @Input() state: string;\n\n  /** Label of the given step. */\n  @Input() label: MatStepLabel | string;\n\n  /** Overrides for the header icons, passed in via the stepper. */\n  @Input() iconOverrides: {[key: string]: TemplateRef<any>};\n\n  /** Index of the given step. */\n  @Input()\n  get index(): number { return this._index; }\n  set index(value: number) { this._index = coerceNumberProperty(value); }\n  private _index: number;\n\n  /** Whether the given step is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) { this._selected = coerceBooleanProperty(value); }\n  private _selected: boolean;\n\n  /** Whether the given step label is active. */\n  @Input()\n  get active(): boolean { return this._active; }\n  set active(value: boolean) { this._active = coerceBooleanProperty(value); }\n  private _active: boolean;\n\n  /** Whether the given step is optional. */\n  @Input()\n  get optional(): boolean { return this._optional; }\n  set optional(value: boolean) { this._optional = coerceBooleanProperty(value); }\n  private _optional: boolean;\n\n  constructor(\n    public _intl: MatStepperIntl,\n    private _focusMonitor: FocusMonitor,\n    private _element: ElementRef,\n    changeDetectorRef: ChangeDetectorRef) {\n    _focusMonitor.monitor(_element.nativeElement, true);\n    this._intlSubscription = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnDestroy() {\n    this._intlSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\n  }\n\n  /** Returns string label of given step if it is a text label. */\n  _stringLabel(): string | null {\n    return this.label instanceof MatStepLabel ? null : this.label;\n  }\n\n  /** Returns MatStepLabel if the label of given step is a template label. */\n  _templateLabel(): MatStepLabel | null {\n    return this.label instanceof MatStepLabel ? this.label : null;\n  }\n\n  /** Returns the host HTML element. */\n  _getHostElement() {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material steppers. */\nexport const matStepperAnimations: {\n  readonly horizontalStepTransition: AnimationTriggerMetadata;\n  readonly verticalStepTransition: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions the step along the X axis in a horizontal stepper. */\n  horizontalStepTransition: trigger('stepTransition', [\n    state('previous', style({transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden'})),\n    state('current', style({transform: 'none', visibility: 'visible'})),\n    state('next', style({transform: 'translate3d(100%, 0, 0)', visibility: 'hidden'})),\n    transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\n  ]),\n\n  /** Animation that transitions the step along the Y axis in a vertical stepper. */\n  verticalStepTransition: trigger('stepTransition', [\n    state('previous', style({height: '0px', visibility: 'hidden'})),\n    state('next', style({height: '0px', visibility: 'hidden'})),\n    state('current', style({height: '*', visibility: 'visible'})),\n    transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, TemplateRef} from '@angular/core';\n\n/**\n * Template to be used to override the icons inside the step header.\n */\n@Directive({\n  selector: 'ng-template[matStepperIcon]',\n})\nexport class MatStepperIcon {\n  /** Name of the icon to be overridden. */\n  @Input('matStepperIcon') name: 'edit' | 'done';\n\n  constructor(public templateRef: TemplateRef<any>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkStep, CdkStepper} from '@angular/cdk/stepper';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  AfterContentInit,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  QueryList,\n  SkipSelf,\n  ViewChildren,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n  Optional,\n  TemplateRef,\n} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {matStepperAnimations} from './stepper-animations';\nimport {MatStepperIcon} from './stepper-icon';\n\n/** Workaround for https://github.com/angular/angular/issues/17849 */\nexport const _MatStep = CdkStep;\nexport const _MatStepper = CdkStepper;\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step',\n  templateUrl: 'step.html',\n  providers: [{provide: ErrorStateMatcher, useExisting: MatStep}],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matStep',\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStep extends CdkStep implements ErrorStateMatcher {\n  /** Content for step label given by `<ng-template matStepLabel>`. */\n  @ContentChild(MatStepLabel) stepLabel: MatStepLabel;\n\n  constructor(@Inject(forwardRef(() => MatStepper)) stepper: MatStepper,\n              @SkipSelf() private _errorStateMatcher: ErrorStateMatcher) {\n    super(stepper);\n  }\n\n  /** Custom error state matcher that additionally checks for validity of interacted form. */\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const originalErrorState = this._errorStateMatcher.isErrorState(control, form);\n\n    // Custom error state checks for the validity of form that is not submitted or touched\n    // since user can trigger a form change by calling for another step without directly\n    // interacting with the current form.\n    const customErrorState = !!(control && control.invalid && this.interacted);\n\n    return originalErrorState || customErrorState;\n  }\n}\n\n\n@Directive({\n  selector: '[matStepper]'\n})\nexport class MatStepper extends CdkStepper implements AfterContentInit {\n  /** The list of step headers of the steps in the stepper. */\n  @ViewChildren(MatStepHeader, {read: ElementRef}) _stepHeader: QueryList<ElementRef>;\n\n  /** Steps that the stepper holds. */\n  @ContentChildren(MatStep) _steps: QueryList<MatStep>;\n\n  /** Custom icon overrides passed in by the consumer. */\n  @ContentChildren(MatStepperIcon) _icons: QueryList<MatStepperIcon>;\n\n  /** Consumer-specified template-refs to be used to override the header icons. */\n  _iconOverrides: {[key: string]: TemplateRef<any>} = {};\n\n  ngAfterContentInit() {\n    const icons = this._icons.toArray();\n    const editOverride = icons.find(icon => icon.name === 'edit');\n    const doneOverride = icons.find(icon => icon.name === 'done');\n\n    if (editOverride) {\n      this._iconOverrides.edit = editOverride.templateRef;\n    }\n\n    if (doneOverride) {\n      this._iconOverrides.done = doneOverride.templateRef;\n    }\n\n    // Mark the component for change detection whenever the content children query changes\n    this._steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this._stateChanged());\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-horizontal-stepper',\n  exportAs: 'matHorizontalStepper',\n  templateUrl: 'stepper-horizontal.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-horizontal',\n    'aria-orientation': 'horizontal',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.horizontalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatHorizontalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatHorizontalStepper extends MatStepper { }\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-vertical-stepper',\n  exportAs: 'matVerticalStepper',\n  templateUrl: 'stepper-vertical.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-vertical',\n    'aria-orientation': 'vertical',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.verticalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatVerticalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatVerticalStepper extends MatStepper {\n  constructor(@Optional() dir: Directionality, changeDetectorRef: ChangeDetectorRef) {\n    super(dir, changeDetectorRef);\n    this._orientation = 'vertical';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepper, CdkStepperNext, CdkStepperPrevious} from '@angular/cdk/stepper';\nimport {MatStepper} from './stepper';\n\n/** Button that moves to the next step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperNext]',\n  host: {\n    '(click)': '_stepper.next()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperNext extends CdkStepperNext {}\n\n/** Button that moves to the previous step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperPrevious]',\n  host: {\n    '(click)': '_stepper.previous()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperPrevious extends CdkStepperPrevious {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatCommonModule, MatRippleModule, ErrorStateMatcher} from '@angular/material/core';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {MatStepperNext, MatStepperPrevious} from './stepper-button';\nimport {MatStepperIntl} from './stepper-intl';\nimport {MatStepperIcon} from './stepper-icon';\nimport {MatHorizontalStepper, MatStep, MatStepper, MatVerticalStepper} from './stepper';\n\n\n@NgModule({\n  imports: [\n    MatCommonModule,\n    CommonModule,\n    PortalModule,\n    MatButtonModule,\n    CdkStepperModule,\n    MatIconModule,\n    A11yModule,\n    MatRippleModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  declarations: [\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  providers: [MatStepperIntl, ErrorStateMatcher],\n})\nexport class MatStepperModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-table',\n  exportAs: 'matTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTable<T> extends CdkTable<T> { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Input} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MatCellDef}]\n})\nexport class MatCellDef extends CdkCellDef { }\n\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef}]\n})\nexport class MatHeaderCellDef extends CdkHeaderCellDef { }\n\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[matColumnDef]',\n  providers: [{provide: CdkColumnDef, useExisting: MatColumnDef}],\n})\nexport class MatColumnDef extends CdkColumnDef {\n  /** Unique name for this column. */\n  @Input('matColumnDef') name: string;\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-header-cell',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class MatHeaderCell extends CdkHeaderCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-cell',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatCell extends CdkCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Directive, ViewEncapsulation} from '@angular/core';\nimport {\n  CDK_ROW_TEMPLATE,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkRow,\n  CdkRowDef,\n} from '@angular/cdk/table';\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n  selector: '[matHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\n  inputs: ['columns: matHeaderRowDef'],\n})\nexport class MatHeaderRowDef extends CdkHeaderRowDef { }\n\n/**\n * Data row definition for the mat-table.\n * Captures the header row's template and other row properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n@Directive({\n  selector: '[matRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\n  inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n})\nexport class MatRowDef<T> extends CdkRowDef<T> {\n}\n\n/** Header template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-header-row',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-header-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matHeaderRow',\n  preserveWhitespaces: false,\n})\nexport class MatHeaderRow extends CdkHeaderRow { }\n\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-row',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRow',\n  preserveWhitespaces: false,\n})\nexport class MatRow extends CdkRow { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatTable} from './table';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {MatCell, MatCellDef, MatColumnDef, MatHeaderCell, MatHeaderCellDef} from './cell';\nimport {MatHeaderRow, MatHeaderRowDef, MatRow, MatRowDef} from './row';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\n\n@NgModule({\n  imports: [CdkTableModule, CommonModule, MatCommonModule],\n  exports: [MatTable, MatCellDef, MatHeaderCellDef, MatColumnDef,\n    MatHeaderCell, MatCell, MatHeaderRow, MatRow,\n    MatHeaderRowDef, MatRowDef],\n  declarations: [MatTable, MatCellDef, MatHeaderCellDef, MatColumnDef,\n    MatHeaderCell, MatCell, MatHeaderRow, MatRow,\n    MatHeaderRowDef, MatRowDef],\n})\nexport class MatTableModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DataSource} from '@angular/cdk/table';\nimport {BehaviorSubject} from 'rxjs/BehaviorSubject';\nimport {MatPaginator} from '@angular/material/paginator';\nimport {MatSort} from '@angular/material/sort';\nimport {Subscription} from 'rxjs/Subscription';\nimport {combineLatest} from 'rxjs/operators/combineLatest';\nimport {map} from 'rxjs/operators/map';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {empty} from 'rxjs/observable/empty';\nimport {_isNumberValue} from '@angular/cdk/coercion';\n\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n */\nexport class MatTableDataSource<T> extends DataSource<T> {\n  /** Stream that emits when a new data array is set on the data source. */\n  private readonly _data: BehaviorSubject<T[]>;\n\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  private readonly _renderData = new BehaviorSubject<T[]>([]);\n\n  /** Stream that emits when a new filter string is set on the data source. */\n  private readonly _filter = new BehaviorSubject<string>('');\n\n  /**\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\n   * as filtering, sorting, pagination, or base data changes.\n   */\n  _renderChangesSubscription: Subscription;\n\n  /**\n   * The filtered set of data that has been matched by the filter string, or all the data if there\n   * is no filter. Useful for knowing the set of data the table represents.\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\n   * shown to the user rather than all the data.\n   */\n  filteredData: T[];\n\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n  get data() { return this._data.value; }\n  set data(data: T[]) { this._data.next(data); }\n\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   */\n  get filter(): string { return this._filter.value; }\n  set filter(filter: string) { this._filter.next(filter); }\n\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n  get sort(): MatSort | null { return this._sort; }\n  set sort(sort: MatSort|null) {\n    this._sort = sort;\n    this._updateChangeSubscription();\n  }\n  private _sort: MatSort|null;\n\n  /**\n   * Instance of the MatPaginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n  get paginator(): MatPaginator | null { return this._paginator; }\n  set paginator(paginator: MatPaginator|null) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n  private _paginator: MatPaginator|null;\n\n  /**\n   * Data accessor function that is used for accessing data properties for sorting through\n   * the default sortData function.\n   * This default function assumes that the sort header IDs (which defaults to the column name)\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n   * May be set to a custom function for different behavior.\n   * @param data Data object that is being accessed.\n   * @param sortHeaderId The name of the column that represents the data.\n   */\n  sortingDataAccessor: ((data: T, sortHeaderId: string) => string|number) =\n      (data: T, sortHeaderId: string): string|number => {\n    const value: any = data[sortHeaderId];\n    return _isNumberValue(value) ? Number(value) : value;\n  }\n\n  /**\n   * Gets a sorted copy of the data array based on the state of the MatSort. Called\n   * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n   * By default, the function retrieves the active sort and its direction and compares data\n   * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n   * of data ordering.\n   * @param data The array of data that should be sorted.\n   * @param sort The connected MatSort that holds the current sort state.\n   */\n  sortData: ((data: T[], sort: MatSort) => T[]) = (data: T[], sort: MatSort): T[] => {\n    const active = sort.active;\n    const direction = sort.direction;\n    if (!active || direction == '') { return data; }\n\n    return data.sort((a, b) => {\n      let valueA = this.sortingDataAccessor(a, active);\n      let valueB = this.sortingDataAccessor(b, active);\n\n      // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n      // one value exists while the other doesn't. In this case, existing value should come first.\n      // This avoids inconsistent results when comparing values to undefined/null.\n      // If neither value exists, return 0 (equal).\n      let comparatorResult = 0;\n      if (valueA && valueB) {\n        // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n        if (valueA > valueB) {\n          comparatorResult = 1;\n        } else if (valueA < valueB) {\n          comparatorResult = -1;\n        }\n      } else if (valueA) {\n        comparatorResult = 1;\n      } else if (valueB) {\n        comparatorResult = -1;\n      }\n\n      return comparatorResult * (direction == 'asc' ? 1 : -1);\n    });\n  }\n\n  /**\n   * Checks if a data object matches the data source's filter string. By default, each data object\n   * is converted to a string of its properties and returns true if the filter has\n   * at least one occurrence in that string. By default, the filter string has its whitespace\n   * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n   * filter matching.\n   * @param data Data object used to check against the filter.\n   * @param filter Filter string that has been set on the data source.\n   * @returns Whether the filter matches against the data\n   */\n  filterPredicate: ((data: T, filter: string) => boolean) = (data: T, filter: string): boolean => {\n    // Transform the data into a lowercase string of all property values.\n    const accumulator = (currentTerm, key) => currentTerm + data[key];\n    const dataStr = Object.keys(data).reduce(accumulator, '').toLowerCase();\n\n    // Transform the filter by converting it to lowercase and removing whitespace.\n    const transformedFilter = filter.trim().toLowerCase();\n\n    return dataStr.indexOf(transformedFilter) != -1;\n  }\n\n  constructor(initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n    this._updateChangeSubscription();\n  }\n\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n    // Otherwise, use an empty observable stream to take their place.\n    const sortChange = this._sort ? this._sort.sortChange : empty();\n    const pageChange = this._paginator ? this._paginator.page : empty();\n\n    if (this._renderChangesSubscription) {\n      this._renderChangesSubscription.unsubscribe();\n    }\n\n    // Watch for base data or filter changes to provide a filtered set of data.\n    this._renderChangesSubscription = this._data.pipe(\n      combineLatest(this._filter),\n      map(([data]) => this._filterData(data)),\n      // Watch for filtered data or sort changes to provide an ordered set of data.\n      combineLatest(sortChange.pipe(startWith(null!))),\n      map(([data]) => this._orderData(data)),\n      // Watch for ordered data or page changes to provide a paged set of data.\n      combineLatest(pageChange.pipe(startWith(null!))),\n      map(([data]) => this._pageData(data))\n    )\n    // Watched for paged data changes and send the result to the table to render.\n    .subscribe(data => this._renderData.next(data));\n  }\n\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\n   * as provided.\n   */\n  _filterData(data: T[]) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\n    // May be overridden for customization.\n    this.filteredData =\n        !this.filter ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\n\n    if (this.paginator) { this._updatePaginator(this.filteredData.length); }\n\n    return this.filteredData;\n  }\n\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   */\n  _orderData(data: T[]): T[] {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort) { return data; }\n\n    return this.sortData(data.slice(), this.sort);\n  }\n\n  /**\n   * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   */\n  _pageData(data: T[]): T[] {\n    if (!this.paginator) { return data; }\n\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice().splice(startIndex, this.paginator.pageSize);\n  }\n\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n  _updatePaginator(filteredDataLength: number) {\n    Promise.resolve().then(() => {\n      if (!this.paginator) { return; }\n\n      this.paginator.length = filteredDataLength;\n\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (this.paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(this.paginator.length / this.paginator.pageSize) - 1 || 0;\n        this.paginator.pageIndex = Math.min(this.paginator.pageIndex, lastPageIndex);\n      }\n    });\n  }\n\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * @docs-private\n   */\n  connect() { return this._renderData; }\n\n  /**\n   * Used by the MatTable. Called when it is destroyed. No-op.\n   * @docs-private\n   */\n  disconnect() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, NgZone} from '@angular/core';\n\n\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n  },\n})\nexport class MatInkBar {\n  constructor(\n    private _elementRef: ElementRef,\n    private _ngZone: NgZone) {}\n\n  /**\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\n   * Shows the ink bar if previously set as hidden.\n   * @param element\n   */\n  alignToElement(element: HTMLElement) {\n    this.show();\n\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => this._setStyles(element));\n      });\n    } else {\n      this._setStyles(element);\n    }\n  }\n\n  /** Shows the ink bar. */\n  show(): void {\n    this._elementRef.nativeElement.style.visibility = 'visible';\n  }\n\n  /** Hides the ink bar. */\n  hide(): void {\n    this._elementRef.nativeElement.style.visibility = 'hidden';\n  }\n\n  /**\n   * Sets the proper styles to the ink bar element.\n   * @param element\n   */\n  private _setStyles(element: HTMLElement) {\n    const inkBar: HTMLElement = this._elementRef.nativeElement;\n\n    inkBar.style.left = element ? (element.offsetLeft || 0) + 'px' : '0';\n    inkBar.style.width = element ? (element.offsetWidth || 0) + 'px' : '0';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef, ViewContainerRef} from '@angular/core';\nimport {CdkPortal} from '@angular/cdk/portal';\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n  selector: '[mat-tab-label], [matTabLabel]',\n})\nexport class MatTabLabel extends CdkPortal {\n  constructor(templateRef: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\n    super(templateRef, viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/** Decorates the `ng-template` tags and reads out the template from it. */\n@Directive({selector: '[matTabContent]'})\nexport class MatTabContent {\n  constructor(public template: TemplateRef<any>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs/Subject';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabContent} from './tab-content';\n\n\n// Boilerplate for applying mixins to MatTab.\n/** @docs-private */\nexport class MatTabBase {}\nexport const _MatTabMixinBase = mixinDisabled(MatTabBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  exportAs: 'matTab',\n})\nexport class MatTab extends _MatTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n  /** Content for the tab label given by `<ng-template mat-tab-label>`. */\n  @ContentChild(MatTabLabel) templateLabel: MatTabLabel;\n\n  /**\n   * Template provided in the tab content that will be used if present, used to enable lazy-loading\n   */\n  @ContentChild(MatTabContent, {read: TemplateRef}) _explicitContent: TemplateRef<any>;\n\n  /** Template inside the MatTab view that contains an `<ng-content>`. */\n  @ViewChild(TemplateRef) _implicitContent: TemplateRef<any>;\n\n  /** The plain text label for the tab, used when there is no template label. */\n  @Input('label') textLabel: string = '';\n\n  /** The portal that will be the hosted content of the tab */\n  private _contentPortal: TemplatePortal | null = null;\n\n  /** @docs-private */\n  get content(): TemplatePortal | null {\n    return this._contentPortal;\n  }\n\n  /** Emits whenever the label changes. */\n  readonly _labelChange = new Subject<void>();\n\n  /** Emits whenever the disable changes */\n  readonly _disableChange = new Subject<void>();\n\n  /**\n   * The relatively indexed position where 0 represents the center, negative is left, and positive\n   * represents the right.\n   */\n  position: number | null = null;\n\n  /**\n   * The initial relatively index origin of the tab if it was created and selected after there\n   * was already a selected tab. Provides context of what position the tab should originate from.\n   */\n  origin: number | null = null;\n\n  /**\n   * Whether the tab is currently active.\n   */\n  isActive = false;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('textLabel')) {\n      this._labelChange.next();\n    }\n\n    if (changes.hasOwnProperty('disabled')) {\n      this._disableChange.next();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._disableChange.complete();\n    this._labelChange.complete();\n  }\n\n  ngOnInit(): void {\n    this._contentPortal = new TemplatePortal(\n        this._explicitContent || this._implicitContent, this._viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material tabs. */\nexport const matTabsAnimations: {\n  readonly translateTab: AnimationTriggerMetadata;\n} = {\n  /** Animation translates a tab along the X axis. */\n  translateTab: trigger('translateTab', [\n    // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n    state('center, void, left-origin-center, right-origin-center', style({transform: 'none'})),\n    state('left', style({transform: 'translate3d(-100%, 0, 0)'})),\n    state('right', style({transform: 'translate3d(100%, 0, 0)'})),\n    transition('* => left, * => right, left => center, right => center',\n        animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')),\n    transition('void => left-origin-center', [\n      style({transform: 'translate3d(-100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ]),\n    transition('void => right-origin-center', [\n      style({transform: 'translate3d(100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ])\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  Input,\n  Inject,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  ElementRef,\n  Directive,\n  Optional,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  forwardRef,\n  ViewChild,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {TemplatePortal, CdkPortalOutlet, PortalHostDirective} from '@angular/cdk/portal';\nimport {Directionality, Direction} from '@angular/cdk/bidi';\nimport {Subscription} from 'rxjs/Subscription';\nimport {matTabsAnimations} from './tabs-animations';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MatTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MatTabBodyOriginState = 'left' | 'right';\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabBodyHost]'\n})\nexport class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n  /** A subscription to events for when the tab body begins centering. */\n  private _centeringSub: Subscription;\n  /** A subscription to events for when the tab body finishes leaving from center position. */\n  private _leavingSub: Subscription;\n\n  constructor(\n    _componentFactoryResolver: ComponentFactoryResolver,\n    _viewContainerRef: ViewContainerRef,\n    @Inject(forwardRef(() => MatTabBody)) private _host: MatTabBody) {\n      super(_componentFactoryResolver, _viewContainerRef);\n  }\n\n  /** Set initial visibility or set up subscription for changing visibility. */\n  ngOnInit(): void {\n    if (this._host._isCenterPosition(this._host._position)) {\n      this.attach(this._host._content);\n    }\n    this._centeringSub = this._host._beforeCentering.subscribe((isCentering: boolean) => {\n      if (isCentering) {\n        if (!this.hasAttached()) {\n          this.attach(this._host._content);\n        }\n      }\n    });\n\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n      this.detach();\n    });\n  }\n\n  /** Clean up centering subscription. */\n  ngOnDestroy(): void {\n    if (this._centeringSub && !this._centeringSub.closed) {\n      this._centeringSub.unsubscribe();\n    }\n\n    if (this._leavingSub && !this._leavingSub.closed) {\n      this._leavingSub.unsubscribe();\n    }\n  }\n}\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTabsAnimations.translateTab],\n  host: {\n    'class': 'mat-tab-body',\n  },\n})\nexport class MatTabBody implements OnInit {\n  /** Event emitted when the tab begins to animate towards the center as the active tab. */\n  @Output() readonly _onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the tab completes its animation towards the center. */\n  @Output() readonly _onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n   /** The portal host inside of this container into which the tab body content will be loaded. */\n  @ViewChild(PortalHostDirective) _portalHost: PortalHostDirective;\n\n  /** The tab body content to display. */\n  @Input('content') _content: TemplatePortal;\n\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\n  @Input()\n  set position(position: number) {\n    if (position < 0) {\n      this._position = this._getLayoutDirection() == 'ltr' ? 'left' : 'right';\n    } else if (position > 0) {\n      this._position = this._getLayoutDirection() == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n  _position: MatTabBodyPositionState;\n\n  /** The origin position from which this tab should appear when it is centered into view. */\n  @Input()\n  set origin(origin: number) {\n    if (origin == null) { return; }\n\n    const dir = this._getLayoutDirection();\n    if ((dir == 'ltr' && origin <= 0) || (dir == 'rtl' && origin > 0)) {\n      this._origin = 'left';\n    } else {\n      this._origin = 'right';\n    }\n  }\n  _origin: MatTabBodyOriginState;\n\n  constructor(private _elementRef: ElementRef,\n              @Optional() private _dir: Directionality) { }\n\n  /**\n   * After initialized, check if the content is centered and has an origin. If so, set the\n   * special position states that transition the tab from the left or right before centering.\n   */\n  ngOnInit() {\n    if (this._position == 'center' && this._origin) {\n      this._position = this._origin == 'left' ? 'left-origin-center' : 'right-origin-center';\n    }\n  }\n\n  _onTranslateTabStarted(e: AnimationEvent): void {\n    const isCentering = this._isCenterPosition(e.toState);\n    this._beforeCentering.emit(isCentering);\n    if (isCentering) {\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n\n  _onTranslateTabComplete(e: AnimationEvent): void {\n    // If the transition to the center is complete, emit an event.\n    if (this._isCenterPosition(e.toState) && this._isCenterPosition(this._position)) {\n      this._onCentered.emit();\n    }\n\n    if (this._isCenterPosition(e.fromState) && !this._isCenterPosition(this._position)) {\n      this._afterLeavingCenter.emit();\n    }\n  }\n\n  /** The text direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the provided position state is considered center, regardless of origin. */\n  _isCenterPosition(position: MatTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatTab} from './tab';\nimport {MatTabHeader} from './tab-header';\nimport {merge} from 'rxjs/observable/merge';\nimport {\n  CanColor,\n  CanDisableRipple,\n  mixinColor,\n  mixinDisableRipple,\n  ThemePalette\n} from '@angular/material/core';\n\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class MatTabChangeEvent {\n  /** Index of the currently-selected tab. */\n  index: number;\n  /** Reference to the currently-selected tab. */\n  tab: MatTab;\n}\n\n/** Possible positions for the tab header. */\nexport type MatTabHeaderPosition = 'above' | 'below';\n\n// Boilerplate for applying mixins to MatTabGroup.\n/** @docs-private */\nexport class MatTabGroupBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabGroupMixinBase = mixinColor(mixinDisableRipple(MatTabGroupBase), 'primary');\n\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://www.google.com/design/spec/components/tabs.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-group',\n  exportAs: 'matTabGroup',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color', 'disableRipple'],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  },\n})\nexport class MatTabGroup extends _MatTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, OnDestroy, CanColor, CanDisableRipple {\n\n  @ContentChildren(MatTab) _tabs: QueryList<MatTab>;\n\n  @ViewChild('tabBodyWrapper') _tabBodyWrapper: ElementRef;\n\n  /** The tab index that should be selected after the content has been checked. */\n  private _indexToSelect: number | null = 0;\n\n  /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n  private _tabBodyWrapperHeight: number = 0;\n\n  /** Subscription to tabs being added/removed. */\n  private _tabsSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the tab labels. */\n  private _tabLabelSubscription = Subscription.EMPTY;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  @Input()\n  get dynamicHeight(): boolean { return this._dynamicHeight; }\n  set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n  private _dynamicHeight: boolean = false;\n\n  /**\n   * @deprecated\n   * @deletion-target 6.0.0\n   */\n  @Input('mat-dynamic-height')\n  get _dynamicHeightDeprecated(): boolean { return this._dynamicHeight; }\n  set _dynamicHeightDeprecated(value: boolean) { this._dynamicHeight = value; }\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number | null { return this._selectedIndex; }\n  set selectedIndex(value: number | null) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n  private _selectedIndex: number | null = null;\n\n  /** Position of the tab header. */\n  @Input() headerPosition: MatTabHeaderPosition = 'above';\n\n  /** Background color of the tab group. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n  @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when focus has changed within a tab group. */\n  @Output() readonly focusChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>();\n\n  /** Event emitted when the body animation has completed */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the tab selection has changed. */\n  @Output() readonly selectedTabChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>(true);\n\n  /**\n   * Event emitted when the tab selection has changed.\n   * @deprecated Use `selectedTabChange` instead.\n   * @deletion-target 6.0.0\n   */\n  @Output() readonly selectChange: EventEmitter<MatTabChangeEvent> = this.selectedTabChange;\n\n  private _groupId: number;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super(elementRef);\n    this._groupId = nextId++;\n  }\n\n  /**\n   * After the content is checked, this component knows what tabs have been defined\n   * and what the selected index should be. This is where we can know exactly what position\n   * each tab should be in according to the new selected index, and additionally we know how\n   * a new selected tab should transition in (from the left or right).\n   */\n  ngAfterContentChecked() {\n    // Clamp the next selected index to the boundsof 0 and the tabs length.\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    let indexToSelect = this._indexToSelect =\n        Math.min(this._tabs.length - 1, Math.max(this._indexToSelect || 0, 0));\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect && this._selectedIndex != null) {\n      const tabChangeEvent = this._createChangeEvent(indexToSelect);\n      this.selectedTabChange.emit(tabChangeEvent);\n      // Emitting this value after change detection has run\n      // since the checked content may contain this variable'\n      Promise.resolve().then(() => this.selectedIndexChange.emit(indexToSelect));\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MatTab, index: number) => {\n      tab.position = index - indexToSelect;\n      tab.isActive = index === indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      this._subscribeToTabLabels();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnDestroy() {\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n\n  _focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n\n  private _createChangeEvent(index: number): MatTabChangeEvent {\n    const event = new MatTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /**\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\n   * manually.\n   */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(\n        ...this._tabs.map(tab => tab._disableChange),\n        ...this._tabs.map(tab => tab._labelChange)).subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  /** Returns a unique id for each tab label element */\n  _getTabLabelId(i: number): string {\n    return `mat-tab-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns a unique id for each tab content element */\n  _getTabContentId(i: number): string {\n    return `mat-tab-content-${this._groupId}-${i}`;\n  }\n\n  /**\n   * Sets the height of the body wrapper to the height of the activating tab if dynamic\n   * height property is true.\n   */\n  _setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    const wrapper: HTMLElement = this._tabBodyWrapper.nativeElement;\n\n    wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      wrapper.style.height = tabHeight + 'px';\n    }\n  }\n\n  /** Removes the height of the tab body wrapper. */\n  _removeTabBodyWrapperHeight(): void {\n    this._tabBodyWrapperHeight = this._tabBodyWrapper.nativeElement.clientHeight;\n    this._tabBodyWrapper.nativeElement.style.height = '';\n    this.animationDone.emit();\n  }\n\n  /** Handle click events, setting new selected index if appropriate. */\n  _handleClick(tab: MatTab, tabHeader: MatTabHeader, idx: number) {\n    if (!tab.disabled) {\n      this.selectedIndex = tabHeader.focusIndex = idx;\n    }\n  }\n\n  /** Retrieves the tabindex for the tab. */\n  _getTabIndex(tab: MatTab, idx: number): number | null {\n    if (tab.disabled) {\n      return null;\n    }\n    return this.selectedIndex === idx ? 0 : -1;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/** @docs-private */\nexport class MatTabLabelWrapperBase {}\nexport const _MatTabLabelWrapperMixinBase = mixinDisabled(MatTabLabelWrapperBase);\n\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabLabelWrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled'\n  }\n})\nexport class MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase implements CanDisable {\n  constructor(public elementRef: ElementRef) {\n    super();\n  }\n\n  /** Sets focus on the wrapper element */\n  focus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n\n  getOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n\n  getOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  HammerInput,\n  HasTabIndex,\n  mixinColor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {Subscription} from 'rxjs/Subscription';\n\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 7;\n\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n */\nexport const MAT_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlider),\n  multi: true\n};\n\n/** A simple change event emitted by the MatSlider component. */\nexport class MatSliderChange {\n  /** The MatSlider that changed. */\n  source: MatSlider;\n\n  /** The new value of the source slider. */\n  value: number | null;\n}\n\n\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nexport class MatSliderBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSliderMixinBase =\n  mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slider',\n  exportAs: 'matSlider',\n  providers: [MAT_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(click)': '_onClick($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'class': 'mat-slider',\n    'role': 'slider',\n    '[tabIndex]': 'tabIndex',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlider extends _MatSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit, HasTabIndex {\n  /** Whether the slider is inverted. */\n  @Input()\n  get invert(): boolean { return this._invert; }\n  set invert(value: boolean) {\n    this._invert = coerceBooleanProperty(value);\n  }\n  private _invert = false;\n\n  /** The maximum value that the slider can have. */\n  @Input()\n  get max(): number { return this._max; }\n  set max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _max: number = 100;\n\n  /** The minimum value that the slider can have. */\n  @Input()\n  get min(): number { return this._min; }\n  set min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _min: number = 0;\n\n  /** The values at which the thumb will snap. */\n  @Input()\n  get step(): number { return this._step; }\n  set step(v: number) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundLabelTo = this._step.toString().split('.').pop()!.length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _step: number = 1;\n\n  /** Whether or not to show the thumb label. */\n  @Input()\n  get thumbLabel(): boolean { return this._thumbLabel; }\n  set thumbLabel(value: boolean) { this._thumbLabel = coerceBooleanProperty(value); }\n  private _thumbLabel: boolean = false;\n\n  /**\n   * @deprecated\n   * @deletion-target 6.0.0\n   */\n  @Input('thumb-label')\n  get _thumbLabelDeprecated(): boolean { return this._thumbLabel; }\n  set _thumbLabelDeprecated(value) { this._thumbLabel = value; }\n\n  /**\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n   */\n  @Input()\n  get tickInterval() { return this._tickInterval; }\n  set tickInterval(value: 'auto' | number) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, this._tickInterval as number);\n    } else {\n      this._tickInterval = 0;\n    }\n  }\n  private _tickInterval: 'auto' | number = 0;\n\n  /**\n   * @deprecated\n   * @deletion-target 6.0.0\n   */\n  @Input('tick-interval')\n  get _tickIntervalDeprecated() { return this.tickInterval; }\n  set _tickIntervalDeprecated(v) { this.tickInterval = v; }\n\n  /** Value of the slider. */\n  @Input()\n  get value(): number | null {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n  set value(v: number | null) {\n    if (v !== this._value) {\n      this._value = coerceNumberProperty(v);\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _value: number | null = null;\n\n  /** Whether the slider is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  private _vertical = false;\n\n  /** Event emitted when the slider value has changed. */\n  @Output() readonly change: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** Event emitted when the slider thumb moves. */\n  @Output() readonly input: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** The value to be used for display purposes. */\n  get displayValue(): string | number {\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundLabelTo && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundLabelTo);\n    }\n\n    return this.value || 0;\n  }\n\n  /** set focus to the host element */\n  focus() {\n    this._focusHostElement();\n  }\n\n  /** blur the host element */\n  blur() {\n    this._blurHostElement();\n  }\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /** The percentage of the slider that coincides with the value. */\n  get percent(): number { return this._clamp(this._percent); }\n  private _percent: number = 0;\n\n  /**\n   * Whether or not the thumb is sliding.\n   * Used to determine if there should be a transition for the thumb and fill track.\n   */\n  _isSliding: boolean = false;\n\n  /**\n   * Whether or not the slider is active (clicked or sliding).\n   * Used to shrink and grow the thumb as according to the Material Design spec.\n   */\n  _isActive: boolean = false;\n\n  /**\n   * Whether the axis of the slider is inverted.\n   * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n   */\n  get _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n\n\n  /** Whether the slider is at its minimum value. */\n  get _isMinValue() {\n    return this.percent === 0;\n  }\n\n  /**\n   * The amount of space to leave between the slider thumb and the track fill & track background\n   * elements.\n   */\n  get _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n\n  /** CSS styles for the track background element. */\n  get _trackBackgroundStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    let sign = this._invertMouseCoords ? '-' : '';\n    return {\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${1 - this.percent})`\n    };\n  }\n\n  /** CSS styles for the track fill element. */\n  get _trackFillStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    let sign = this._invertMouseCoords ? '' : '-';\n    return {\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${this.percent})`\n    };\n  }\n\n  /** CSS styles for the ticks container element. */\n  get _ticksContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let sign = !this.vertical && this._direction == 'rtl' ? '' : '-';\n    let offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n\n  /** CSS styles for the ticks element. */\n  get _ticksStyles(): { [key: string]: string } {\n    let tickSize = this._tickIntervalPercent * 100;\n    let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let sign = !this.vertical && this._direction == 'rtl' ? '-' : '';\n    let rotate = !this.vertical && this._direction == 'rtl' ? ' rotate(180deg)' : '';\n    let styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n\n  get _thumbContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let invertOffset =\n        (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n\n  /** The size of a tick interval as a percentage of the size of the track. */\n  private _tickIntervalPercent: number = 0;\n\n  /** The dimensions of the slider. */\n  private _sliderDimensions: ClientRect | null = null;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Decimal places to round to, based on the step amount. */\n  private _roundLabelTo: number;\n\n  /** Subscription to the Directionality change EventEmitter. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** The value of the slider when the slide start event fires. */\n  private _valueOnSlideStart: number | null;\n\n  /** Reference to the inner slider wrapper element. */\n  @ViewChild('sliderWrapper') private _sliderWrapper: ElementRef;\n\n  /**\n   * Whether mouse events should be converted to a slider position by calculating their distance\n   * from the right or bottom edge of the slider as opposed to the top or left.\n   */\n  private get _invertMouseCoords() {\n    return (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n\n  /** The language direction for this slider element. */\n  private get _direction() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Attribute('tabindex') tabIndex: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngOnInit() {\n    this._focusMonitor\n        .monitor(this._elementRef.nativeElement, true)\n        .subscribe((origin: FocusOrigin) => {\n          this._isActive = !!origin && origin !== 'keyboard';\n          this._changeDetectorRef.detectChanges();\n        });\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onClick(event: MouseEvent) {\n    if (this.disabled) {\n      return;\n    }\n\n    let oldValue = this.value;\n    this._isSliding = false;\n    this._focusHostElement();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    // Emit a change and input event if the value changed.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n  }\n\n  _onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n    // state, call the slide start handler manually.\n    if (!this._isSliding) {\n      this._onSlideStart(null);\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n\n    let oldValue = this.value;\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n    }\n  }\n\n  _onSlideStart(event: HammerInput | null) {\n    if (this.disabled || this._isSliding) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    this._isSliding = true;\n    this._focusHostElement();\n    this._valueOnSlideStart = this.value;\n\n    if (event) {\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n      event.preventDefault();\n    }\n  }\n\n  _onSlideEnd() {\n    this._isSliding = false;\n\n    if (this._valueOnSlideStart != this.value && !this.disabled) {\n      this._emitChangeEvent();\n    }\n    this._valueOnSlideStart = null;\n  }\n\n  _onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onBlur() {\n    this.onTouched();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this.disabled) { return; }\n\n    let oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._direction == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._direction == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n\n  _onKeyup() {\n    this._isSliding = false;\n  }\n\n  /** Increments the slider by the given number of steps (negative number decrements). */\n  private _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n\n  /** Calculate the new value from the new physical location. The value will always be snapped. */\n  private _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let percent = this._clamp((posComponent - offset) / size);\n    if (this._invertMouseCoords) {\n      percent = 1 - percent;\n    }\n    let exactValue = this._calculateValue(percent);\n\n    // This calculation finds the closest step by finding the closest whole number divisible by the\n    // step relative to the min.\n    let closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n    // The value needs to snap to the min and max.\n    this.value = this._clamp(closestValue, this.min, this.max);\n  }\n\n  /** Emits a change event if the current value is different from the last emitted value. */\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n\n  /** Emits an input event when the current value is different from the last emitted value. */\n  private _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n\n  /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n  private _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n\n  /** Creates a slider change object from the specified value. */\n  private _createChangeEvent(value = this.value): MatSliderChange {\n    let event = new MatSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n\n  /** Calculates the percentage of the slider that a value is. */\n  private _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n\n  /** Calculates the value a percentage of the slider corresponds to. */\n  private _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n\n  /** Return a number between two numbers. */\n  private _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  /**\n   * Get the bounding client rect of the slider track element.\n   * The track is used rather than the native element to ignore the extra space that the thumb can\n   * take up.\n   */\n  private _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n\n  /**\n   * Focuses the native element.\n   * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n   */\n  private _focusHostElement() {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Blurs the native element. */\n  private _blurHostElement() {\n    this._elementRef.nativeElement.blur();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  /**\n   * Registers a callback to eb triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the component is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets whether the component should be disabled.\n   * Implemented as part of ControlValueAccessor.\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {BidiModule} from '@angular/cdk/bidi';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlider} from './slider';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule, BidiModule, A11yModule],\n  exports: [MatSlider, MatCommonModule],\n  declarations: [MatSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n})\nexport class MatSliderModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n/** Event that is emitted when a snack bar is dismissed. */\nexport interface MatSnackBarDismiss {\n  /** Whether the snack bar was dismissed using the action button. */\n  dismissedByAction: boolean;\n}\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MatSnackBarRef<T> {\n  /** The instance of the component making up the content of the snack bar. */\n  instance: T;\n\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * @docs-private\n   */\n  containerInstance: MatSnackBarContainer;\n\n  /** Subject for notifying the user that the snack bar has been dismissed. */\n  private readonly _afterDismissed = new Subject<MatSnackBarDismiss>();\n\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar action was called. */\n  private readonly _onAction = new Subject<void>();\n\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n   * dismissed before the duration passes.\n   */\n  private _durationTimeoutId: number;\n\n  /** Whether the snack bar was dismissed using the action button. */\n  private _dismissedByAction = false;\n\n  constructor(containerInstance: MatSnackBarContainer,\n              private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the snack bar. */\n  dismiss(): void {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /** Marks the snackbar action clicked. */\n  dismissWithAction(): void {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n\n\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   * @deletion-target 7.0.0\n   */\n  closeWithAction(): void {\n    this.dismissWithAction();\n  }\n\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration: number): void {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n\n  /** Marks the snackbar as opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterDismissed.next({dismissedByAction: this._dismissedByAction});\n    this._afterDismissed.complete();\n    this._dismissedByAction = false;\n  }\n\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed(): Observable<MatSnackBarDismiss> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\n\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\n\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MatSnackBarConfig<D = any> {\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  politeness?: AriaLivePoliteness = 'assertive';\n\n  /** Message to be announced by the MatAriaLiveAnnouncer */\n  announcementMessage?: string = '';\n\n  /** The view container to place the overlay for the snack bar into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n  duration?: number = 0;\n\n  /** Extra CSS classes to be added to the snack bar container. */\n  panelClass?: string | string[];\n\n  /**\n   * Extra CSS classes to be added to the snack bar container.\n   * @deprecated Use `panelClass` instead.\n   * @deletion-target 6.0.0\n   */\n  extraClasses?: string | string[];\n\n  /** Text layout direction for the snack bar. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** The horizontal position to place the snack bar. */\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\n\n  /** The vertical position to place the snack bar. */\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** @docs-private */\nexport const SHOW_ANIMATION =\n  `${AnimationDurations.ENTERING} ${AnimationCurves.DECELERATION_CURVE}`;\n\n/** @docs-private */\nexport const HIDE_ANIMATION =\n  `${AnimationDurations.EXITING} ${AnimationCurves.ACCELERATION_CURVE}`;\n\n/** Animations used by the Material snack bar. */\nexport const matSnackBarAnimations: {\n  readonly contentFade: AnimationTriggerMetadata;\n  readonly snackBarState: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides the dialog in and out of view and fades the opacity. */\n  contentFade: trigger('contentFade', [\n    transition(':enter', [\n      style({opacity: '0'}),\n      animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.STANDARD_CURVE}`)\n    ])\n  ]),\n\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [\n    state('visible-top, visible-bottom', style({transform: 'translateY(0%)'})),\n    transition('visible-top => hidden-top, visible-bottom => hidden-bottom',\n      animate(HIDE_ANIMATION)),\n    transition('void => visible-top, void => visible-bottom', animate(SHOW_ANIMATION)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\nimport {MatSnackBarRef} from './snack-bar-ref';\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\nimport {matSnackBarAnimations} from './snack-bar-animations';\n\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matSnackBarAnimations.contentFade],\n  host: {\n    '[@contentFade]': '',\n    'class': 'mat-simple-snackbar',\n  }\n})\nexport class SimpleSnackBar {\n  /** Data that was injected into the snack bar. */\n  data: { message: string, action: string };\n\n  constructor(\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\n    @Inject(MAT_SNACK_BAR_DATA) data: any) {\n    this.data = data;\n  }\n\n  /** Performs the action on the snack bar. */\n  action(): void {\n    this.snackBarRef.dismissWithAction();\n  }\n\n  /** If the action button should be shown. */\n  get hasAction(): boolean {\n    return !!this.data.action;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  NgZone,\n  OnDestroy,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n} from '@angular/cdk/portal';\nimport {take} from 'rxjs/operators/take';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {MatSnackBarConfig} from './snack-bar-config';\nimport {matSnackBarAnimations} from './snack-bar-animations';\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  animations: [matSnackBarAnimations.snackBarState],\n  host: {\n    'role': 'alert',\n    'class': 'mat-snack-bar-container',\n    '[@state]': '_animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n})\nexport class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\n  /** Whether the component has been destroyed. */\n  private _destroyed = false;\n\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** Subject for notifying that the snack bar has exited from view. */\n  readonly _onExit: Subject<any> = new Subject();\n\n  /** Subject for notifying that the snack bar has finished entering the view. */\n  readonly _onEnter: Subject<any> = new Subject();\n\n  /** The state of the snack bar animations. */\n  _animationState = 'void';\n\n  /** The snack bar configuration. */\n  snackBarConfig: MatSnackBarConfig;\n\n  constructor(\n    private _ngZone: NgZone,\n    private _elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef) {\n    super();\n  }\n\n  /** Attach a component portal as content to this snack bar container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n\n    const element: HTMLElement = this._elementRef.nativeElement;\n\n    if (this.snackBarConfig.panelClass || this.snackBarConfig.extraClasses) {\n      this._setCssClasses(this.snackBarConfig.panelClass);\n      this._setCssClasses(this.snackBarConfig.extraClasses);\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this snack bar container. */\n  attachTemplatePortal(): EmbeddedViewRef<any> {\n    throw Error('Not yet implemented');\n  }\n\n  /** Handle end of animations, updating the state of the snackbar. */\n  onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState === 'void' && fromState !== 'void') || toState.startsWith('hidden')) {\n      this._completeExit();\n    }\n\n    if (toState.startsWith('visible')) {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n\n  /** Begin animation of snack bar entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = `visible-${this.snackBarConfig.verticalPosition}`;\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the snack bar exiting from view. */\n  exit(): Observable<void> {\n    this._animationState = `hidden-${this.snackBarConfig.verticalPosition}`;\n    return this._onExit;\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  private _completeExit() {\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n\n  /** Applies the user-specified list of CSS classes to the element. */\n  private _setCssClasses(classList: undefined|string|string[]) {\n    if (!classList) {\n      return;\n    }\n\n    const element = this._elementRef.nativeElement;\n\n    if (Array.isArray(classList)) {\n      // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n      classList.forEach(cssClass => element.classList.add(cssClass));\n    } else {\n      element.classList.add(classList);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector} from '@angular/cdk/portal';\nimport {ComponentRef, Injectable, Injector, Optional, SkipSelf} from '@angular/core';\nimport {take} from 'rxjs/operators/take';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarRef} from './snack-bar-ref';\n\n\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n@Injectable()\nexport class MatSnackBar {\n  /**\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n   * If there is a parent snack-bar service, all operations should delegate to that parent\n   * via `_openedSnackBarRef`.\n   */\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\n\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _live: LiveAnnouncer,\n      private _injector: Injector,\n      private _breakpointObserver: BreakpointObserver,\n      @Optional() @SkipSelf() private _parentSnackBar: MatSnackBar) {}\n\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig): MatSnackBarRef<T> {\n    const _config = _applyConfigDefaults(config);\n    const snackBarRef = this._attach(component, _config);\n\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (_config.duration && _config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(_config!.duration!));\n    }\n\n    if (_config.announcementMessage) {\n      this._live.announce(_config.announcementMessage, _config.politeness);\n    }\n\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n  open(message: string, action: string = '', config?: MatSnackBarConfig):\n      MatSnackBarRef<SimpleSnackBar> {\n    const _config = _applyConfigDefaults(config);\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n    _config.announcementMessage = message;\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n  dismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MatSnackBarConfig): MatSnackBarContainer {\n    const containerPortal = new ComponentPortal(MatSnackBarContainer, config.viewContainerRef);\n    const containerRef: ComponentRef<MatSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Places a new component as the content of the snack bar container.\n   */\n  private _attach<T>(component: ComponentType<T>, config: MatSnackBarConfig): MatSnackBarRef<T> {\n    const overlayRef = this._createOverlay(config);\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    const snackBarRef = new MatSnackBarRef<T>(container, overlayRef);\n    const injector = this._createInjector(config, snackBarRef);\n    const portal = new ComponentPortal(component, undefined, injector);\n    const contentRef = container.attachComponentPortal(portal);\n\n    // We can't pass this via the injector, because the injector is created earlier.\n    snackBarRef.instance = contentRef.instance;\n\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver.observe(Breakpoints.Handset).pipe(\n      takeUntil(overlayRef.detachments().pipe(take(1)))\n    ).subscribe(state => {\n      if (state.matches) {\n        overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\n      } else {\n        overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\n      }\n    });\n\n    return snackBarRef;\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const isRtl = config.direction === 'rtl';\n    const isLeft = (\n      config.horizontalPosition === 'left' ||\n      (config.horizontalPosition === 'start' && !isRtl) ||\n      (config.horizontalPosition === 'end' && isRtl));\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n  private _createInjector<T>(\n      config: MatSnackBarConfig,\n      snackBarRef: MatSnackBarRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap();\n\n    injectionTokens.set(MatSnackBarRef, snackBarRef);\n    injectionTokens.set(MAT_SNACK_BAR_DATA, config.data);\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n\n/**\n * Applies default options to the snackbar config.\n * @param config The configuration to which the defaults will be applied.\n * @returns The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(config?: MatSnackBarConfig): MatSnackBarConfig {\n  return {...new MatSnackBarConfig(), ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {LIVE_ANNOUNCER_PROVIDER} from '@angular/cdk/a11y';\nimport {LayoutModule} from '@angular/cdk/layout';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatSnackBar} from './snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {SimpleSnackBar} from './simple-snack-bar';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MatCommonModule,\n    LayoutModule,\n  ],\n  exports: [MatSnackBarContainer, MatCommonModule],\n  declarations: [MatSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n  providers: [MatSnackBar, LIVE_ANNOUNCER_PROVIDER]\n})\nexport class MatSnackBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  isDevMode,\n  Output,\n  OnChanges,\n  OnDestroy,\n} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {SortDirection} from './sort-direction';\nimport {\n  getSortInvalidDirectionError,\n  getSortDuplicateSortableIdError,\n  getSortHeaderMissingIdError\n} from './sort-errors';\nimport {Subject} from 'rxjs/Subject';\n\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\nexport interface MatSortable {\n  /** The id of the column being sorted. */\n  id: string;\n\n  /** Starting sort direction. */\n  start: 'asc' | 'desc';\n\n  /** Whether to disable clearing the sorting state. */\n  disableClear: boolean;\n}\n\n/** The current sort state. */\nexport interface Sort {\n  /** The id of the column being sorted. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n}\n\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nexport class MatSortBase {}\nexport const _MatSortMixinBase = mixinDisabled(MatSortBase);\n\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\n@Directive({\n  selector: '[matSort]',\n  exportAs: 'matSort',\n  inputs: ['disabled: matSortDisabled']\n})\nexport class MatSort extends _MatSortMixinBase implements CanDisable, OnChanges, OnDestroy {\n  /** Collection of all registered sortables that this directive manages. */\n  sortables = new Map<string, MatSortable>();\n\n  /** Used to notify any child components listening to state changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /** The id of the most recently sorted MatSortable. */\n  @Input('matSortActive') active: string;\n\n  /**\n   * The direction to set when an MatSortable is initially sorted.\n   * May be overriden by the MatSortable's sort start.\n   */\n  @Input('matSortStart') start: 'asc' | 'desc' = 'asc';\n\n  /** The sort direction of the currently active MatSortable. */\n  @Input('matSortDirection')\n  get direction(): SortDirection { return this._direction; }\n  set direction(direction: SortDirection) {\n    if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n      throw getSortInvalidDirectionError(direction);\n    }\n    this._direction = direction;\n  }\n  private _direction: SortDirection = '';\n\n  /**\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n   * May be overriden by the MatSortable's disable clear input.\n   */\n  @Input('matSortDisableClear')\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v: boolean) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  /** Event emitted when the user changes either the active sort or sort direction. */\n  @Output('matSortChange') readonly sortChange: EventEmitter<Sort> = new EventEmitter<Sort>();\n\n  /**\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n   * collection of MatSortables.\n   */\n  register(sortable: MatSortable): void {\n    if (!sortable.id) {\n      throw getSortHeaderMissingIdError();\n    }\n\n    if (this.sortables.has(sortable.id)) {\n      throw getSortDuplicateSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n\n  /**\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n   * collection of contained MatSortables.\n   */\n  deregister(sortable: MatSortable): void {\n    this.sortables.delete(sortable.id);\n  }\n\n  /** Sets the active sort id and determines the new sort direction. */\n  sort(sortable: MatSortable): void {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.emit({active: this.active, direction: this.direction});\n  }\n\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n  getNextSortDirection(sortable: MatSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional} from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\nimport {SortDirection} from './sort-direction';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\n@Injectable()\nexport class MatSortHeaderIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** ARIA label for the sorting button. */\n  sortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n\n  /** A label to describe the current sort (visible only to screenreaders). */\n  sortDescriptionLabel = (id: string, direction: SortDirection) => {\n    return `Sorted by ${id} ${direction == 'asc' ? 'ascending' : 'descending'}`;\n  }\n}\n/** @docs-private */\nexport function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n\n/** @docs-private */\nexport const MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  keyframes,\n  AnimationTriggerMetadata, query, animateChild,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n                                  AnimationCurves.STANDARD_CURVE;\n\n/** Animations used by MatSort. */\nexport const matSortAnimations: {\n  readonly indicator: AnimationTriggerMetadata;\n  readonly leftPointer: AnimationTriggerMetadata;\n  readonly rightPointer: AnimationTriggerMetadata;\n  readonly arrowOpacity: AnimationTriggerMetadata;\n  readonly arrowPosition: AnimationTriggerMetadata;\n  readonly allowChildren: AnimationTriggerMetadata;\n} = {\n  /** Animation that moves the sort indicator. */\n  indicator: trigger('indicator', [\n    state('active-asc, asc', style({transform: 'translateY(0px)'})),\n    // 10px is the height of the sort indicator, minus the width of the pointers\n    state('active-desc, desc', style({transform: 'translateY(10px)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n  leftPointer: trigger('leftPointer', [\n    state('active-asc, asc', style({transform: 'rotate(-45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n  rightPointer: trigger('rightPointer', [\n    state('active-asc, asc', style({transform: 'rotate(45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(-45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that controls the arrow opacity. */\n  arrowOpacity: trigger('arrowOpacity', [\n    state('desc-to-active, asc-to-active, active', style({opacity: 1})),\n    state('desc-to-hint, asc-to-hint, hint', style({opacity: .54})),\n    state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc',\n        style({opacity: 0})),\n    // Transition between all states except for immediate transitions\n    transition('* => asc, * => desc, * => active, * => hint', animate('0ms')),\n    transition('* <=> *', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /**\n   * Animation for the translation of the arrow as a whole. States are separated into two\n   * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n   * peek, and active. The other states define a specific animation (source-to-destination)\n   * and are determined as a function of their prev user-perceived state and what the next state\n   * should be.\n   */\n  arrowPosition: trigger('arrowPosition', [\n    // Hidden Above => Hint Center\n    transition('* => desc-to-hint, * => desc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(-25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Below\n    transition('* => hint-to-desc, * => active-to-desc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(25%)'})\n        ]))),\n    // Hidden Below => Hint Center\n    transition('* => asc-to-hint, * => asc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Above\n    transition('* => hint-to-asc, * => active-to-asc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(-25%)'})\n        ]))),\n    state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active',\n        style({transform: 'translateY(0)'})),\n    state('hint-to-desc, active-to-desc, desc',\n        style({transform: 'translateY(-25%)'})),\n    state('hint-to-asc, active-to-asc, asc',\n        style({transform: 'translateY(25%)'})),\n  ]),\n\n  /** Necessary trigger that calls animate on children animations. */\n  allowChildren: trigger('allowChildren', [\n    transition('* <=> *', [\n      query('@*', animateChild(), {optional: true})\n    ])\n  ]),\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  Optional,\n  ViewEncapsulation\n} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkColumnDef} from '@angular/cdk/table';\nimport {Subscription} from 'rxjs/Subscription';\nimport {merge} from 'rxjs/observable/merge';\nimport {MatSort, MatSortable} from './sort';\nimport {SortDirection} from './sort-direction';\nimport {MatSortHeaderIntl} from './sort-header-intl';\nimport {getSortHeaderNotContainedWithinSortError} from './sort-errors';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {matSortAnimations} from './sort-animations';\n\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nexport class MatSortHeaderBase {}\nexport const _MatSortHeaderMixinBase = mixinDisabled(MatSortHeaderBase);\n\n/**\n * Valid positions for the arrow to be in for its opacity and translation. If the state is a\n * sort direction, the position of the arrow will be above/below and opacity 0. If the state is\n * hint, the arrow will be in the center with a slight opacity. Active state means the arrow will\n * be fully opaque in the center.\n *\n * @docs-private\n */\nexport type ArrowViewState = SortDirection | 'hint' | 'active';\n\n/**\n * States describing the arrow's animated position (animating fromState to toState).\n * If the fromState is not defined, there will be no animated transition to the toState.\n * @docs-private\n */\nexport interface ArrowViewStateTransition {\n  fromState?: ArrowViewState;\n  toState: ArrowViewState;\n}\n\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-sort-header]',\n  exportAs: 'matSortHeader',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    '(click)': '_handleClick()',\n    '(mouseenter)': '_setIndicatorHintVisible(true)',\n    '(longpress)': '_setIndicatorHintVisible(true)',\n    '(mouseleave)': '_setIndicatorHintVisible(false)',\n    '[class.mat-sort-header-disabled]': '_isDisabled()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  animations: [\n    matSortAnimations.indicator,\n    matSortAnimations.leftPointer,\n    matSortAnimations.rightPointer,\n    matSortAnimations.arrowOpacity,\n    matSortAnimations.arrowPosition,\n    matSortAnimations.allowChildren,\n  ]\n})\nexport class MatSortHeader extends _MatSortHeaderMixinBase implements MatSortable, CanDisable {\n  private _rerenderSubscription: Subscription;\n\n  /**\n   * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n   * provide an affordance that the header is sortable by showing on focus and hover.\n   */\n  _showIndicatorHint: boolean = false;\n\n  /**\n   * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\n   * position through the animation. If animations are currently disabled, the fromState is removed\n   * so that there is no animation displayed.\n   */\n  _viewState: ArrowViewStateTransition;\n\n  /** The direction the arrow should be facing according to the current state. */\n  _arrowDirection: SortDirection = '';\n\n  /**\n   * Whether the view state animation should show the transition between the `from` and `to` states.\n   */\n  _disableViewStateAnimation = false;\n\n  /**\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n   * the column's name.\n   */\n  @Input('mat-sort-header') id: string;\n\n  /** Sets the position of the arrow that displays when sorted. */\n  @Input() arrowPosition: 'before' | 'after' = 'after';\n\n  /** Overrides the sort start value of the containing MatSort for this MatSortable. */\n  @Input() start: 'asc' | 'desc';\n\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n  @Input()\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  constructor(public _intl: MatSortHeaderIntl,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _sort: MatSort,\n              @Optional() public _cdkColumnDef: CdkColumnDef) {\n\n    super();\n\n    if (!_sort) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n\n    this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n        .subscribe(() => {\n          if (this._isSorted()) {\n            this._updateArrowDirection();\n          }\n\n          // If this header was recently active and now no longer sorted, animate away the arrow.\n          if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\n            this._disableViewStateAnimation = false;\n            this._setAnimationTransitionState({fromState: 'active', toState: this._arrowDirection});\n          }\n\n          changeDetectorRef.markForCheck();\n        });\n  }\n\n  ngOnInit() {\n    if (!this.id && this._cdkColumnDef) {\n      this.id = this._cdkColumnDef.name;\n    }\n\n    // Initialize the direction of the arrow and set the view state to be immediately that state.\n    this._updateArrowDirection();\n    this._setAnimationTransitionState(\n        {toState: this._isSorted() ? 'active' : this._arrowDirection});\n\n    this._sort.register(this);\n  }\n\n  ngOnDestroy() {\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /**\n   * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n   * user showing what the active sort will become. If set to false, the arrow will fade away.\n   */\n  _setIndicatorHintVisible(visible: boolean) {\n    // No-op if the sort header is disabled - should not make the hint visible.\n    if (this._isDisabled() && visible) { return; }\n\n    this._showIndicatorHint = visible;\n\n    if (!this._isSorted()) {\n      this._updateArrowDirection();\n      if (this._showIndicatorHint) {\n        this._setAnimationTransitionState({fromState: this._arrowDirection, toState: 'hint'});\n      } else {\n        this._setAnimationTransitionState({fromState: 'hint', toState: this._arrowDirection});\n      }\n    }\n  }\n\n  /**\n   * Sets the animation transition view state for the arrow's position and opacity. If the\n   * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n   * no animation appears.\n   */\n  _setAnimationTransitionState(viewState: ArrowViewStateTransition) {\n    this._viewState = viewState;\n\n    // If the animation for arrow position state (opacity/translation) should be disabled,\n    // remove the fromState so that it jumps right to the toState.\n    if (this._disableViewStateAnimation) {\n      this._viewState = {toState: viewState.toState};\n    }\n  }\n\n  /** Triggers the sort on this sort header and removes the indicator hint. */\n  _handleClick() {\n    if (this._isDisabled()) { return; }\n\n    this._sort.sort(this);\n\n    // Do not show the animation if the header was already shown in the right position.\n    if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n      this._disableViewStateAnimation = true;\n    }\n\n    // If the arrow is now sorted, animate the arrow into place. Otherwise, animate it away into\n    // the direction it is facing.\n    const viewState: ArrowViewStateTransition = this._isSorted() ?\n        {fromState: this._arrowDirection, toState: 'active'} :\n        {fromState: 'active', toState: this._arrowDirection};\n    this._setAnimationTransitionState(viewState);\n\n    this._showIndicatorHint = false;\n  }\n\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n  _isSorted() {\n    return this._sort.active == this.id &&\n        (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n  }\n\n  /** Returns the animation state for the arrow direction (indicator and pointers). */\n  _getArrowDirectionState() {\n    return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\n  }\n\n  /** Returns the arrow position state (opacity, translation). */\n  _getArrowViewState() {\n    const fromState = this._viewState.fromState;\n    return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\n  }\n\n  /**\n   * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n   * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n   * active sorted direction. The reason this is updated through a function is because the direction\n   * should only be changed at specific times - when deactivated but the hint is displayed and when\n   * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n   * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n   * preserving its direction, even though the next sort direction is actually different and should\n   * only be changed once the arrow displays again (hint or activation).\n   */\n  _updateArrowDirection() {\n    this._arrowDirection = this._isSorted() ?\n        this._sort.direction :\n        (this.start || this._sort.start);\n  }\n\n  _isDisabled() {\n    return this._sort.disabled || this.disabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatSortHeader} from './sort-header';\nimport {MatSort} from './sort';\nimport {MAT_SORT_HEADER_INTL_PROVIDER} from './sort-header-intl';\nimport {CommonModule} from '@angular/common';\n\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [MatSort, MatSortHeader],\n  declarations: [MatSort, MatSortHeader],\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n})\nexport class MatSortModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\nimport {CdkStepLabel} from '@angular/cdk/stepper';\n\n@Directive({\n  selector: '[matStepLabel]',\n})\nexport class MatStepLabel extends CdkStepLabel {\n  constructor(template: TemplateRef<any>) {\n    super(template);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\n\n\n/** Stepper data that is required for internationalization. */\n@Injectable()\nexport class MatStepperIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** Label that is rendered below optional steps. */\n  optionalLabel: string = 'Optional';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusTrap, FocusTrapFactory, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n  InjectionToken,\n  ViewChild,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {merge} from 'rxjs/observable/merge';\nimport {filter} from 'rxjs/operators/filter';\nimport {take} from 'rxjs/operators/take';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {debounceTime} from 'rxjs/operators/debounceTime';\nimport {map} from 'rxjs/operators/map';\nimport {Subject} from 'rxjs/Subject';\nimport {Observable} from 'rxjs/Observable';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {CdkScrollable} from '@angular/cdk/scrolling';\n\n\n/** Throws an exception when two MatDrawer are matching the same position. */\nexport function throwMatDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n\n\n/**\n * Drawer toggle promise result.\n * @deprecated\n * @deletion-target 6.0.0\n */\nexport class MatDrawerToggleResult {\n  constructor(\n    /** Whether the drawer is opened or closed. */\n    public type: 'open' | 'close',\n    /** Whether the drawer animation is finished. */\n    public animationFinished: boolean) {}\n}\n\n/** Configures whether drawers should use auto sizing by default. */\nexport const MAT_DRAWER_DEFAULT_AUTOSIZE =\n    new InjectionToken<boolean>('MAT_DRAWER_DEFAULT_AUTOSIZE');\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content',\n    '[style.margin-left.px]': '_margins.left',\n    '[style.margin-right.px]': '_margins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatDrawerContent implements AfterContentInit {\n  /**\n   * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n   * drawer is open. We use margin rather than transform even for push mode because transform breaks\n   * fixed position elements inside of the transformed element.\n   */\n  _margins: {left: number|null, right: number|null} = {left: null, right: null};\n\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatDrawerContainer)) private _container: MatDrawerContainer) {\n  }\n\n  ngAfterContentInit() {\n    this._container._contentMargins.subscribe(margins => {\n      this._margins = margins;\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n\n\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer',\n  exportAs: 'matDrawer',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    '(keydown)': 'handleKeydown($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\n  private _focusTrap: FocusTrap;\n  private _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n\n  /** Whether the drawer is initialized. Used for disabling the initial animation. */\n  private _enableAnimations = false;\n\n  /** The side that the drawer is attached to. */\n  @Input()\n  get position(): 'start' | 'end' { return this._position; }\n  set position(value: 'start' | 'end') {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onAlignChanged.emit();\n      this.onPositionChanged.emit();\n    }\n  }\n  private _position: 'start' | 'end' = 'start';\n\n  /**\n   * @deprecated\n   * @deletion-target 6.0.0\n   */\n  @Input()\n  get align(): 'start' | 'end' { return this.position; }\n  set align(value: 'start' | 'end') { this.position = value; }\n\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n  @Input()\n  get mode(): 'over' | 'push' | 'side' { return this._mode; }\n  set mode(value: 'over' | 'push' | 'side') {\n    this._mode = value;\n    this._modeChanged.next();\n  }\n  private _mode: 'over' | 'push' | 'side' = 'over';\n\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n  @Input()\n  get disableClose(): boolean { return this._disableClose; }\n  set disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\n  private _disableClose: boolean = false;\n\n  /** How the sidenav was opened (keypress, mouse click etc.) */\n  private _openedVia: FocusOrigin | null;\n\n  /** Emits whenever the drawer has started animating. */\n  _animationStarted = new EventEmitter<AnimationEvent>();\n\n  /** Current state of the sidenav animation. */\n  _animationState: 'open-instant' | 'open' | 'void' = 'void';\n\n  /** Event emitted when the drawer open state is changed. */\n  @Output() readonly openedChange: EventEmitter<boolean> =\n      // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n      new EventEmitter<boolean>(/* isAsync */true);\n\n  /** Event emitted when the drawer has been opened. */\n  @Output('opened')\n  get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started opening. */\n  @Output()\n  get openedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started closing. */\n  @Output()\n  get closedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState === 'void'),\n      map(() => {})\n    );\n  }\n\n  /**\n   * Event emitted when the drawer is fully opened.\n   * @deprecated Use `opened` instead.\n   * @deletion-target 6.0.0\n   */\n  @Output('open') readonly onOpen: Observable<void> = this._openedStream;\n\n  /**\n   * Event emitted when the drawer is fully closed.\n   * @deprecated Use `closed` instead.\n   * @deletion-target 6.0.0\n   */\n  @Output('close') readonly onClose: Observable<void> = this._closedStream;\n\n  /** Event emitted when the drawer's position changes. */\n  @Output('positionChanged') onPositionChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * @deprecated\n   * @deletion-target 6.0.0\n   */\n  @Output('align-changed') onAlignChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An observable that emits when the drawer mode changes. This is used by the drawer container to\n   * to know when to when the mode changes so it can adapt the margins on the content.\n   */\n  readonly _modeChanged = new Subject();\n\n  get _isFocusTrapEnabled(): boolean {\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n\n  constructor(private _elementRef: ElementRef,\n              private _focusTrapFactory: FocusTrapFactory,\n              private _focusMonitor: FocusMonitor,\n              private _platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _doc: any) {\n\n    this.openedChange.subscribe((opened: boolean) => {\n      if (opened) {\n        if (this._doc) {\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n        }\n\n        if (this._isFocusTrapEnabled && this._focusTrap) {\n          this._trapFocus();\n        }\n      } else {\n        this._restoreFocus();\n      }\n    });\n  }\n\n  /** Traps focus inside the drawer. */\n  private _trapFocus() {\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n      // still works. We need to check that `focus` is a function due to Universal.\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n\n  /**\n   * If focus is currently inside the drawer, restores it to where it was before the drawer\n   * opened.\n   */\n  private _restoreFocus() {\n    const activeEl = this._doc && this._doc.activeElement;\n\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    this._openedVia = null;\n  }\n\n  ngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this._isFocusTrapEnabled;\n  }\n\n  ngAfterContentChecked() {\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\n    // animations, because we don't want the drawer to animate the first time the user sees\n    // the page.\n    if (this._platform.isBrowser) {\n      this._enableAnimations = true;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /**\n   * Whether the drawer is opened. We overload this because we trigger an event when it\n   * starts or end.\n   */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { this.toggle(coerceBooleanProperty(value)); }\n  private _opened: boolean = false;\n\n  /**\n   * Open the drawer.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  open(openedVia?: FocusOrigin): Promise<void> {\n    return this.toggle(true, openedVia);\n  }\n\n  /** Close the drawer. */\n  close(): Promise<void> {\n    return this.toggle(false);\n  }\n\n  /**\n   * Toggle this drawer.\n   * @param isOpen Whether the drawer should be open.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  toggle(isOpen: boolean = !this.opened, openedVia: FocusOrigin = 'program'):\n    Promise<void> {\n\n    this._opened = isOpen;\n\n    if (isOpen) {\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      this._openedVia = openedVia;\n    } else {\n      this._animationState = 'void';\n      this._restoreFocus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this._isFocusTrapEnabled;\n    }\n\n    // TODO(crisbeto): This promise is here for backwards-compatibility.\n    // It should be removed next time we do breaking changes in the drawer.\n    // @deletion-target 6.0.0\n    return new Promise<any>(resolve => {\n      this.openedChange.pipe(take(1)).subscribe(open => {\n        resolve(new MatDrawerToggleResult(open ? 'open' : 'close', true));\n      });\n    });\n  }\n\n  /**\n   * Handles the keyboard events.\n   * @docs-private\n   */\n  handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ESCAPE && !this.disableClose) {\n      this.close();\n      event.stopPropagation();\n    }\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStarted.emit(event);\n  }\n\n  _onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n        (toState === 'void' && fromState.indexOf('open') === 0)) {\n      this.openedChange.emit(this._opened);\n    }\n  }\n\n  get _width(): number {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\n}\n\n\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-container',\n  exportAs: 'matDrawerContainer',\n  templateUrl: 'drawer-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatDrawerContainer implements AfterContentInit, OnDestroy {\n  @ContentChildren(MatDrawer) _drawers: QueryList<MatDrawer>;\n  @ContentChild(MatDrawerContent) _content: MatDrawerContent;\n\n  /** The drawer child with the `start` position. */\n  get start(): MatDrawer | null { return this._start; }\n\n  /** The drawer child with the `end` position. */\n  get end(): MatDrawer | null { return this._end; }\n\n  /**\n   * Whether to automatically resize the container whenever\n   * the size of any of its drawers changes.\n   *\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n   * the drawers on every change detection cycle. Can be configured globally via the\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n   */\n  @Input()\n  get autosize(): boolean { return this._autosize; }\n  set autosize(value: boolean) { this._autosize = coerceBooleanProperty(value); }\n  private _autosize: boolean;\n\n  /** Whether the drawer container should have a backdrop while one of the sidenavs is open. */\n  @Input()\n  get hasBackdrop() {\n    if (this._hasBackdrop == null) {\n      return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\n    }\n\n    return this._hasBackdrop;\n  }\n  set hasBackdrop(value: any) {\n    this._hasBackdrop = value == null ? null : coerceBooleanProperty(value);\n  }\n  private _hasBackdrop: boolean | null;\n\n  /** Event emitted when the drawer backdrop is clicked. */\n  @Output() readonly backdropClick: EventEmitter<void> = new EventEmitter<void>();\n\n  /** The drawer at the start/end position, independent of direction. */\n  private _start: MatDrawer | null;\n  private _end: MatDrawer | null;\n\n  /**\n   * The drawer at the left/right. When direction changes, these will change as well.\n   * They're used as aliases for the above to set the left/right style properly.\n   * In LTR, _left == _start and _right == _end.\n   * In RTL, _left == _end and _right == _start.\n   */\n  private _left: MatDrawer | null;\n  private _right: MatDrawer | null;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Emits on every ngDoCheck. Used for debouncing reflows. */\n  private readonly _doCheckSubject = new Subject<void>();\n\n  readonly _contentMargins = new Subject<{left: number|null, right: number|null}>();\n\n  /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n  @ViewChild(CdkScrollable) scrollable: CdkScrollable;\n\n  constructor(@Optional() private _dir: Directionality,\n              private _element: ElementRef,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_DRAWER_DEFAULT_AUTOSIZE) defaultAutosize = false) {\n\n    // If a `Dir` directive exists up the tree, listen direction changes\n    // and update the left/right properties to point to the proper start/end.\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._validateDrawers();\n        this._updateContentMargins();\n      });\n    }\n\n    this._autosize = defaultAutosize;\n  }\n\n  ngAfterContentInit() {\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n      this._validateDrawers();\n\n      this._drawers.forEach((drawer: MatDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n        this._watchDrawerMode(drawer);\n      });\n\n      if (!this._drawers.length ||\n          this._isDrawerOpen(this._start) ||\n          this._isDrawerOpen(this._end)) {\n        this._updateContentMargins();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n\n    this._doCheckSubject.pipe(\n      debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n      takeUntil(this._destroyed)\n    ).subscribe(() => this._updateContentMargins());\n  }\n\n  ngOnDestroy() {\n    this._doCheckSubject.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Calls `open` of both start and end drawers */\n  open(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n\n  /** Calls `close` of both start and end drawers */\n  close(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n\n  ngDoCheck() {\n    // If users opted into autosizing, do a check every change detection cycle.\n    if (this._autosize && this._isPushed()) {\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n    }\n  }\n\n  /**\n   * Subscribes to drawer events in order to set a class on the main container element when the\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   */\n  private _watchDrawerToggle(drawer: MatDrawer): void {\n    drawer._animationStarted.pipe(\n      takeUntil(this._drawers.changes),\n      filter((event: AnimationEvent) => event.fromState !== event.toState)\n    )\n    .subscribe((event: AnimationEvent) => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      if (event.toState !== 'open-instant') {\n        this._element.nativeElement.classList.add('mat-drawer-transition');\n      }\n\n      this._updateContentMargins();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() =>\n          this._setContainerClass(drawer.opened));\n    }\n  }\n\n  /**\n   * Subscribes to drawer onPositionChanged event in order to\n   * re-validate drawers when the position changes.\n   */\n  private _watchDrawerPosition(drawer: MatDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n\n  /** Subscribes to changes in drawer mode so we can run change detection. */\n  private _watchDrawerMode(drawer: MatDrawer): void {\n    if (drawer) {\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n        .subscribe(() => {\n          this._updateContentMargins();\n          this._changeDetectorRef.markForCheck();\n        });\n    }\n  }\n\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n  private _setContainerClass(isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add('mat-drawer-opened');\n    } else {\n      this._element.nativeElement.classList.remove('mat-drawer-opened');\n    }\n  }\n\n  /** Validate the state of the drawer children components. */\n  private _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null) {\n          throwMatDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null) {\n          throwMatDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (!this._dir || this._dir.value == 'ltr') {\n      this._left = this._start;\n      this._right = this._end;\n    } else {\n      this._left = this._end;\n      this._right = this._start;\n    }\n  }\n\n  /** Whether the container is being pushed to the side by one of the drawers. */\n  private _isPushed() {\n    return (this._isDrawerOpen(this._start) && this._start!.mode != 'over') ||\n           (this._isDrawerOpen(this._end) && this._end!.mode != 'over');\n  }\n\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawer();\n  }\n\n  _closeModalDrawer() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && drawer.mode !== 'side')\n      .forEach(drawer => drawer!.close());\n  }\n\n  _isShowingBackdrop(): boolean {\n    return (this._isDrawerOpen(this._start) && this._start!.mode != 'side')\n        || (this._isDrawerOpen(this._end) && this._end!.mode != 'side');\n  }\n\n  private _isDrawerOpen(drawer: MatDrawer | null): boolean {\n    return drawer != null && drawer.opened;\n  }\n\n  /**\n   * Recalculates and updates the inline styles for the content. Note that this should be used\n   * sparingly, because it causes a reflow.\n   */\n  private _updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n\n    let left = 0;\n    let right = 0;\n\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._width;\n      } else if (this._left.mode == 'push') {\n        let width = this._left._width;\n        left += width;\n        right -= width;\n      }\n    }\n\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._width;\n      } else if (this._right.mode == 'push') {\n        let width = this._right._width;\n        right += width;\n        left -= width;\n      }\n    }\n\n    // Pull back into the NgZone since in some cases we could be outside.\n    this._ngZone.run(() => this._contentMargins.next({left, right}));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  forwardRef,\n  Inject,\n  Input,\n  ViewEncapsulation,\n  QueryList,\n} from '@angular/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content mat-sidenav-content',\n    '[style.margin-left.px]': '_margins.left',\n    '[style.margin-right.px]': '_margins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatSidenavContent extends MatDrawerContent {\n  constructor(\n      changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatSidenavContainer)) container: MatSidenavContainer) {\n    super(changeDetectorRef, container);\n  }\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav',\n  exportAs: 'matSidenav',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    'tabIndex': '-1',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    '(keydown)': 'handleKeydown($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatSidenav extends MatDrawer {\n  /** Whether the sidenav is fixed in the viewport. */\n  @Input()\n  get fixedInViewport(): boolean { return this._fixedInViewport; }\n  set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n  private _fixedInViewport = false;\n\n  /**\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n   * mode.\n   */\n  @Input()\n  get fixedTopGap(): number { return this._fixedTopGap; }\n  set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n  private _fixedTopGap = 0;\n\n  /**\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n   * fixed mode.\n   */\n  @Input()\n  get fixedBottomGap(): number { return this._fixedBottomGap; }\n  set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n  private _fixedBottomGap = 0;\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-container',\n  exportAs: 'matSidenavContainer',\n  templateUrl: 'sidenav-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatSidenavContainer extends MatDrawerContainer {\n  @ContentChildren(MatSidenav) _drawers: QueryList<MatSidenav>;\n  @ContentChild(MatSidenavContent) _content: MatSidenavContent;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {ScrollDispatchModule} from '@angular/cdk/scrolling';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from './sidenav';\nimport {\n  MatDrawer,\n  MatDrawerContainer,\n  MatDrawerContent,\n  MAT_DRAWER_DEFAULT_AUTOSIZE,\n} from './drawer';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    A11yModule,\n    OverlayModule,\n    ScrollDispatchModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  declarations: [\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  providers: [\n    {provide: MAT_DRAWER_DEFAULT_AUTOSIZE, useValue: false}\n  ]\n})\nexport class MatSidenavModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n  ViewEncapsulation\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HammerInput,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n\n/** Change event object emitted by a MatSlideToggle. */\nexport class MatSlideToggleChange {\n  constructor(\n    /** The source MatSlideToggle of the event. */\n    public source: MatSlideToggle,\n    /** The new `checked` value of the MatSlideToggle. */\n    public checked: boolean) { }\n}\n\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nexport class MatSlideToggleBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSlideToggleMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slide-toggle',\n  exportAs: 'matSlideToggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n    ControlValueAccessor, CanDisable, CanColor, HasTabIndex, CanDisableRipple {\n\n  private onChange = (_: any) => {};\n  private onTouched = () => {};\n\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\n  private _slideRenderer: SlideToggleRenderer;\n  private _required: boolean = false;\n  private _checked: boolean = false;\n\n  /** Reference to the focus state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the slide-toggle element is checked or not */\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether the slide-toggle is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /** Whether the slide-toggle element is checked or not */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n  @Output() readonly change: EventEmitter<MatSlideToggleChange> =\n      new EventEmitter<MatSlideToggleChange>();\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Reference to the underlying input element. */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** Reference to the ripple directive on the thumb container. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              private _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Attribute('tabindex') tabIndex: string) {\n\n    super(elementRef);\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit() {\n    this._slideRenderer = new SlideToggleRenderer(this._elementRef, this._platform);\n\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n\n  /** Method being called whenever the underlying input emits a change event. */\n  _onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    // Releasing the pointer over the `<label>` element while dragging triggers another\n    // click event on the `<label>` element. This means that the checked state of the underlying\n    // input changed unintentionally and needs to be changed back.\n    if (this._slideRenderer.dragging) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n\n  /** Method being called whenever the slide-toggle has been clicked. */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any): void {\n    this.checked = !!value;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the slide-toggle. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  /** Toggles the checked state of the slide-toggle. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      // For keyboard focus show a persistent ripple as focus indicator.\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      this.onTouched();\n\n      // Fade out and clear the focus ripple if one is currently present.\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n  private _emitChangeEvent() {\n    this.onChange(this.checked);\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\n  }\n\n  _onDragStart() {\n    if (!this.disabled) {\n      this._slideRenderer.startThumbDrag(this.checked);\n    }\n  }\n\n  _onDrag(event: HammerInput) {\n    if (this._slideRenderer.dragging) {\n      this._slideRenderer.updateThumbPosition(event.deltaX);\n    }\n  }\n\n  _onDragEnd() {\n    if (this._slideRenderer.dragging) {\n      const newCheckedValue = this._slideRenderer.dragPercentage > 50;\n\n      if (newCheckedValue !== this.checked) {\n        this.checked = newCheckedValue;\n        this._emitChangeEvent();\n      }\n\n      // The drag should be stopped outside of the current event handler, because otherwise the\n      // click event will be fired before and will revert the drag change.\n      setTimeout(() => this._slideRenderer.stopThumbDrag());\n    }\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the slide-toggle changes.\n    // Since the slide-toggle uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n\n/**\n * Renderer for the Slide Toggle component, which separates DOM modification in its own class\n */\nclass SlideToggleRenderer {\n\n  /** Reference to the thumb HTMLElement. */\n  private _thumbEl: HTMLElement;\n\n  /** Reference to the thumb bar HTMLElement. */\n  private _thumbBarEl: HTMLElement;\n\n  /** Width of the thumb bar of the slide-toggle. */\n  private _thumbBarWidth: number;\n\n  /** Previous checked state before drag started. */\n  private _previousChecked: boolean;\n\n  /** Percentage of the thumb while dragging. Percentage as fraction of 100. */\n  dragPercentage: number;\n\n  /** Whether the thumb is currently being dragged. */\n  dragging: boolean = false;\n\n  constructor(elementRef: ElementRef, platform: Platform) {\n    // We only need to interact with these elements when we're on the browser, so only grab\n    // the reference in that case.\n    if (platform.isBrowser) {\n      this._thumbEl = elementRef.nativeElement.querySelector('.mat-slide-toggle-thumb-container');\n      this._thumbBarEl = elementRef.nativeElement.querySelector('.mat-slide-toggle-bar');\n    }\n  }\n\n  /** Initializes the drag of the slide-toggle. */\n  startThumbDrag(checked: boolean): void {\n    if (this.dragging) { return; }\n\n    this._thumbBarWidth = this._thumbBarEl.clientWidth - this._thumbEl.clientWidth;\n    this._thumbEl.classList.add('mat-dragging');\n\n    this._previousChecked = checked;\n    this.dragging = true;\n  }\n\n  /** Resets the current drag and returns the new checked value. */\n  stopThumbDrag(): boolean {\n    if (!this.dragging) { return false; }\n\n    this.dragging = false;\n    this._thumbEl.classList.remove('mat-dragging');\n\n    // Reset the transform because the component will take care of the thumb position after drag.\n    this._thumbEl.style.transform = '';\n\n    return this.dragPercentage > 50;\n  }\n\n  /** Updates the thumb containers position from the specified distance. */\n  updateThumbPosition(distance: number): void {\n    this.dragPercentage = this._getDragPercentage(distance);\n    // Calculate the moved distance based on the thumb bar width.\n    const dragX = (this.dragPercentage / 100) * this._thumbBarWidth;\n    this._thumbEl.style.transform = `translate3d(${dragX}px, 0, 0)`;\n  }\n\n  /** Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100. */\n  private _getDragPercentage(distance: number) {\n    let percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {\n  GestureConfig,\n  MatCommonModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatSlideToggle} from './slide-toggle';\n\n\n@NgModule({\n  imports: [MatRippleModule, MatCommonModule, PlatformModule, ObserversModule, A11yModule],\n  exports: [MatSlideToggle, MatCommonModule],\n  declarations: [MatSlideToggle],\n  providers: [\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\n  ],\n})\nexport class MatSlideToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  Input,\n  ElementRef,\n  SimpleChanges,\n  OnChanges,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\n\n/** Possible mode for a progress spinner. */\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nexport class MatProgressSpinnerBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatProgressSpinnerMixinBase = mixinColor(MatProgressSpinnerBase, 'primary');\n\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/material2/issues/8984\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n\n/**\n * `<mat-progress-spinner>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-spinner',\n  exportAs: 'matProgressSpinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-progress-spinner',\n    '[style.width.px]': '_elementSize',\n    '[style.height.px]': '_elementSize',\n    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements CanColor,\n  OnChanges {\n\n  private _value = 0;\n  private _strokeWidth: number;\n  private _fallbackAnimation = false;\n\n  /** The width and height of the host element. Will grow with stroke width. */\n  _elementSize = BASE_SIZE;\n\n  /** Tracks diameters of existing instances to de-dupe generated styles (default d = 100) */\n  private static diameters = new Set<number>([BASE_SIZE]);\n\n  /**\n   * Used for storing all of the generated keyframe animations.\n   * @dynamic\n   */\n  private static styleTag: HTMLStyleElement|null = null;\n\n  /** The diameter of the progress spinner (will set width and height of svg). */\n  @Input()\n  get diameter(): number { return this._diameter; }\n  set diameter(size: number) {\n    this._diameter = coerceNumberProperty(size);\n\n    if (!this._fallbackAnimation && !MatProgressSpinner.diameters.has(this._diameter)) {\n      this._attachStyleNode();\n    }\n    this._updateElementSize();\n  }\n  private _diameter = BASE_SIZE;\n\n  /** Stroke width of the progress spinner. */\n  @Input()\n  get strokeWidth(): number {\n    return this._strokeWidth || this.diameter / 10;\n  }\n  set strokeWidth(value: number) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n\n\n  /** Mode of the progress circle */\n  @Input() mode: ProgressSpinnerMode = 'determinate';\n\n  /** Value of the progress circle. */\n  @Input()\n  get value(): number {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  set value(newValue: number) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n  }\n\n  constructor(public _elementRef: ElementRef,\n              platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n\n    super(_elementRef);\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\n    // reliably so we fall back to a non-spec animation.\n    const animationClass =\n      `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n\n    _elementRef.nativeElement.classList.add(animationClass);\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.strokeWidth || changes.diameter) {\n      this._updateElementSize();\n    }\n  }\n\n  /** The radius of the spinner, adjusted for stroke width. */\n  get _circleRadius() {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n\n  /** The view box of the spinner's svg element. */\n  get _viewBox() {\n    const viewBox = this._circleRadius * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n\n  /** The stroke circumference of the svg circle. */\n  get _strokeCircumference(): number {\n    return 2 * Math.PI * this._circleRadius;\n  }\n\n  /** The dash offset of the svg circle. */\n  get _strokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._strokeCircumference * (100 - this._value) / 100;\n    }\n\n    // In fallback mode set the circle to 80% and rotate it with CSS.\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\n      return this._strokeCircumference * 0.2;\n    }\n\n    return null;\n  }\n\n  /** Stroke width of the circle in percent. */\n  get _circleStrokeWidth() {\n    return this.strokeWidth / this._elementSize * 100;\n  }\n\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\n  private _attachStyleNode(): void {\n    let styleTag = MatProgressSpinner.styleTag;\n\n    if (!styleTag) {\n      styleTag = this._document.createElement('style');\n      this._document.head.appendChild(styleTag);\n      MatProgressSpinner.styleTag = styleTag;\n    }\n\n    if (styleTag && styleTag.sheet) {\n      (styleTag.sheet as CSSStyleSheet).insertRule(this._getAnimationText(), 0);\n    }\n\n    MatProgressSpinner.diameters.add(this.diameter);\n  }\n\n  /** Generates animation styles adjusted for the spinner's diameter. */\n  private _getAnimationText(): string {\n    return INDETERMINATE_ANIMATION_TEMPLATE\n        // Animation should begin at 5% and end at 80%\n        .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n        .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n        .replace(/DIAMETER/g, `${this.diameter}`);\n  }\n\n  /** Updates the spinner element size based on its diameter. */\n  private _updateElementSize() {\n    this._elementSize = this._diameter + Math.max(this.strokeWidth - BASE_STROKE_WIDTH, 0);\n  }\n}\n\n\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner mat-progress-spinner',\n    '[style.width.px]': '_elementSize',\n    '[style.height.px]': '_elementSize',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatSpinner extends MatProgressSpinner {\n  constructor(elementRef: ElementRef, platform: Platform,\n              @Optional() @Inject(DOCUMENT) document: any) {\n    super(elementRef, platform, document);\n    this.mode = 'indeterminate';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [\n    MatProgressSpinner,\n    MatSpinner,\n    MatCommonModule\n  ],\n  declarations: [\n    MatProgressSpinner,\n    MatSpinner\n  ],\n})\nclass MatProgressSpinnerModule {}\n\nexport {MatProgressSpinnerModule};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true\n};\n\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nexport class MatRadioChange {\n  constructor(\n    /** The MatRadioButton that emits the change event. */\n    public source: MatRadioButton,\n    /** The value of the MatRadioButton. */\n    public value: any) {}\n}\n\n\n// Boilerplate for applying mixins to MatRadioGroup.\n/** @docs-private */\nexport class MatRadioGroupBase { }\nexport const _MatRadioGroupMixinBase = mixinDisabled(MatRadioGroupBase);\n\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n@Directive({\n  selector: 'mat-radio-group',\n  exportAs: 'matRadioGroup',\n  providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n  inputs: ['disabled'],\n})\nexport class MatRadioGroup extends _MatRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n  /**\n   * Selected value for group. Should equal the value of the selected radio button if there *is*\n   * a corresponding radio button with a matching value. If there is *not* such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to radio buttons in this group. */\n  private _name: string = `mat-radio-group-${nextUniqueId++}`;\n\n  /** The currently selected radio button. Should match value. */\n  private _selected: MatRadioButton | null = null;\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  private _labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the radio group is disabled. */\n  private _disabled: boolean = false;\n\n  /** Whether the radio group is required. */\n  private _required: boolean = false;\n\n  /** The method to be called in order to update ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /**\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  /**\n   * Event emitted when the group value changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * a radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** Child radio buttons. */\n  @ContentChildren(forwardRef(() => MatRadioButton), { descendants: true })\n  _radios: QueryList<MatRadioButton>;\n\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /**\n   * Alignment of the radio-buttons relative to their labels. Can be 'before' or 'after'.\n   * @deprecated\n   * @deletion-target 6.0.0\n   */\n  @Input()\n  get align(): 'start' | 'end' {\n    // align refers to the checkbox relative to the label, while labelPosition refers to the\n    // label relative to the checkbox. As such, they are inverted.\n    return this.labelPosition == 'after' ? 'start' : 'end';\n  }\n  set align(v) {\n    this.labelPosition = (v == 'start') ? 'after' : 'before';\n  }\n\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition;\n  }\n  set labelPosition(v) {\n    this._labelPosition = (v == 'before') ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n\n  /** Value of the radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value != newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /** Whether the radio button is selected. */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: MatRadioButton | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Whether the radio group is disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  /** Whether the radio group is required */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   */\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n  }\n\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n      });\n    }\n  }\n\n  /** Updates the `selected` radio button from the internal _value state. */\n  private _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected != null && this._selected.value == this._value;\n\n    if (this._radios != null && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value == radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      this.change.emit(new MatRadioChange(this._selected!, this._value));\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\n}\n\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nexport class MatRadioButtonBase {\n  // Since the disabled property is manually defined for the MatRadioButton and isn't set up in\n  // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n  // defined to properly work.\n  disabled: boolean;\n\n  constructor(public _elementRef: ElementRef) {}\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nexport const _MatRadioButtonMixinBase =\n    mixinColor(mixinDisableRipple(mixinTabIndex(MatRadioButtonBase)), 'accent');\n\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['color', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  exportAs: 'matRadioButton',\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[attr.id]': 'id',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatRadioButton extends _MatRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, CanDisableRipple, HasTabIndex {\n\n  private _uniqueId: string = `mat-radio-${++nextUniqueId}`;\n\n  /** The unique ID for the radio button. */\n  @Input() id: string = this._uniqueId;\n\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** The 'aria-describedby' attribute is read after the element's label and field type. */\n  @Input('aria-describedby') ariaDescribedby: string;\n\n  /** Whether this radio button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = coerceBooleanProperty(value);\n\n    if (this._checked != newCheckedState) {\n      this._checked = newCheckedState;\n\n      if (newCheckedState && this.radioGroup && this.radioGroup.value != this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value == this.value) {\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** The value of this radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value != value) {\n      this._value = value;\n      if (this.radioGroup != null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value == value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /**\n   * Whether or not the radio-button should appear before or after the label.\n   * @deprecated\n   * @deletion-target 6.0.0\n   */\n  @Input()\n  get align(): 'start' | 'end' {\n    // align refers to the checkbox relative to the label, while labelPosition refers to the\n    // label relative to the checkbox. As such, they are inverted.\n    return this.labelPosition == 'after' ? 'start' : 'end';\n  }\n  set align(v) {\n    this.labelPosition = (v == 'start') ? 'after' : 'before';\n  }\n\n  private _labelPosition: 'before' | 'after';\n\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n  set labelPosition(value) {\n    this._labelPosition = value;\n  }\n\n  /** Whether the radio button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup != null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n\n  /** Whether the radio button is required. */\n  @Input()\n  get required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Event emitted when the checked state of this radio button changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * the radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** The parent radio group. May or may not be present. */\n  radioGroup: MatRadioGroup;\n\n  /** ID of the native input element inside `<mat-radio-button>` */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether this radio is checked. */\n  private _checked: boolean = false;\n\n  /** Whether this radio is disabled. */\n  private _disabled: boolean;\n\n  /** Whether this radio is required. */\n  private _required: boolean;\n\n  /** Value assigned to this radio. */\n  private _value: any = null;\n\n  /** The child ripple instance. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  /** Reference to the current focus ripple. */\n  private _focusRipple: RippleRef | null;\n\n  /** Unregister function for _radioDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  /** The native `<input type=radio>` element */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  constructor(@Optional() radioGroup: MatRadioGroup,\n              elementRef: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _radioDispatcher: UniqueSelectionDispatcher) {\n    super(elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id != this.id && name == this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /** Focuses the radio button. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  /**\n   * Marks the radio button as needing checking for change detection.\n   * This method is exposed because the parent radio group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n    this._removeUniqueSelectionListener();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    this.change.emit(new MatRadioChange(this, this._value));\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Triggered when the radio button received a click or the input recognized any change.\n   * Clicking on a label element, will trigger a change event on the associated input.\n   */\n  _onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value != this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      this.radioGroup._touch();\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      if (this.radioGroup) {\n        this.radioGroup._touch();\n      }\n\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {UNIQUE_SELECTION_DISPATCHER_PROVIDER} from '@angular/cdk/collections';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatRadioButton, MatRadioGroup} from './radio';\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, A11yModule],\n  exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n  providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER],\n  declarations: [MatRadioGroup, MatRadioButton],\n})\nexport class MatRadioModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material drawers. */\nexport const matDrawerAnimations: {\n  readonly transformDrawer: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: trigger('transform', [\n    state('open, open-instant', style({\n      transform: 'translate3d(0, 0, 0)',\n      visibility: 'visible',\n    })),\n    state('void', style({\n      visibility: 'hidden',\n    })),\n    transition('void => open-instant', animate('0ms')),\n    transition('void <=> open, open-instant => void',\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatSelect, MatSelectTrigger, MAT_SELECT_SCROLL_STRATEGY_PROVIDER} from './select';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {ErrorStateMatcher} from '@angular/material/core';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER, ErrorStateMatcher]\n})\nexport class MatSelectModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by MatTooltip. */\nexport const matTooltipAnimations: {\n  readonly tooltipState: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [\n    state('initial, void, hidden', style({transform: 'scale(0)'})),\n    state('visible', style({transform: 'scale(1)'})),\n    transition('* => visible', animate('150ms cubic-bezier(0.0, 0.0, 0.2, 1)')),\n    transition('* => hidden', animate('150ms cubic-bezier(0.4, 0.0, 1, 1)')),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule, ARIA_DESCRIBER_PROVIDER} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {LayoutModule} from '@angular/cdk/layout';\nimport {\n  MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER,\n  MAT_TOOLTIP_DEFAULT_OPTIONS,\n  MatTooltip,\n  TooltipComponent,\n} from './tooltip';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n    PlatformModule,\n    A11yModule,\n    LayoutModule,\n  ],\n  exports: [MatTooltip, TooltipComponent, MatCommonModule],\n  declarations: [MatTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n  providers: [\n    MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER,\n    ARIA_DESCRIBER_PROVIDER,\n    {\n      provide: MAT_TOOLTIP_DEFAULT_OPTIONS,\n      useValue: {\n        showDelay: 0,\n        hideDelay: 0,\n        touchendHideDelay: 1500\n      }\n    }\n  ],\n})\nexport class MatTooltipModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional } from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\n@Injectable()\nexport class MatPaginatorIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the page size selector. */\n  itemsPerPageLabel: string = 'Items per page:';\n\n  /** A label for the button that increments the current page. */\n  nextPageLabel: string = 'Next page';\n\n  /** A label for the button that decrements the current page. */\n  previousPageLabel: string = 'Previous page';\n\n  /** A label for the button that moves to the first page. */\n  firstPageLabel: string = 'First page';\n\n  /** A label for the button that moves to the last page. */\n  lastPageLabel: string = 'Last page';\n\n  /** A label for the range of items within the current page and the length of the whole list. */\n  getRangeLabel = (page: number, pageSize: number, length: number) => {\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} - ${endIndex} of ${length}`;\n  }\n}\n\n/** @docs-private */\nexport function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n\n/** @docs-private */\nexport const MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatPaginatorIntl} from './paginator-intl';\n\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n  /** The current page index. */\n  pageIndex: number;\n\n  /** The current page size */\n  pageSize: number;\n\n  /** The current total number of items being paged */\n  length: number;\n}\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-paginator',\n  exportAs: 'matPaginator',\n  templateUrl: 'paginator.html',\n  styleUrls: ['paginator.css'],\n  host: {\n    'class': 'mat-paginator',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatPaginator implements OnInit, OnDestroy {\n  private _initialized: boolean;\n  private _intlChanges: Subscription;\n\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n  @Input()\n  get pageIndex(): number { return this._pageIndex; }\n  set pageIndex(value: number) {\n    this._pageIndex = coerceNumberProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  _pageIndex: number = 0;\n\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\n  @Input()\n  get length(): number { return this._length; }\n  set length(value: number) {\n    this._length = coerceNumberProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  _length: number = 0;\n\n  /** Number of items to display on a page. By default set to 50. */\n  @Input()\n  get pageSize(): number { return this._pageSize; }\n  set pageSize(value: number) {\n    this._pageSize = coerceNumberProperty(value);\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSize: number;\n\n  /** The set of provided page size options to display to the user. */\n  @Input()\n  get pageSizeOptions(): number[] { return this._pageSizeOptions; }\n  set pageSizeOptions(value: number[]) {\n    this._pageSizeOptions = (value || []).map(p => coerceNumberProperty(p));\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSizeOptions: number[] = [];\n\n  /** Whether to hide the page size selection UI from the user. */\n  @Input()\n  get hidePageSize(): boolean { return this._hidePageSize; }\n  set hidePageSize(value: boolean) {\n    this._hidePageSize = coerceBooleanProperty(value);\n  }\n  private _hidePageSize = false;\n\n\n  /** Whether to show the first/last buttons UI to the user. */\n  @Input()\n  get showFirstLastButtons(): boolean { return this._showFirstLastButtons; }\n  set showFirstLastButtons(value: boolean) {\n    this._showFirstLastButtons = coerceBooleanProperty(value);\n  }\n  private _showFirstLastButtons = false;\n\n  /** Event emitted when the paginator changes the page size or page index. */\n  @Output() readonly page: EventEmitter<PageEvent> = new EventEmitter<PageEvent>();\n\n  /** Displayed set of page size options. Will be sorted and include current page size. */\n  _displayedPageSizeOptions: number[];\n\n  constructor(public _intl: MatPaginatorIntl,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  /** Advances to the next page if it exists. */\n  nextPage(): void {\n    if (!this.hasNextPage()) { return; }\n    this.pageIndex++;\n    this._emitPageEvent();\n  }\n\n  /** Move back to the previous page if it exists. */\n  previousPage(): void {\n    if (!this.hasPreviousPage()) { return; }\n    this.pageIndex--;\n    this._emitPageEvent();\n  }\n\n  /** Move to the first page if not already there. */\n  firstPage(): void {\n    // hasPreviousPage being false implies at the start\n    if (!this.hasPreviousPage()) { return; }\n    this.pageIndex = 0;\n    this._emitPageEvent();\n  }\n\n  /** Move to the last page if not already there. */\n  lastPage(): void {\n    // hasNextPage being false implies at the end\n    if (!this.hasNextPage()) { return; }\n    this.pageIndex = this.getNumberOfPages();\n    this._emitPageEvent();\n  }\n\n  /** Whether there is a previous page. */\n  hasPreviousPage(): boolean {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n\n  /** Whether there is a next page. */\n  hasNextPage(): boolean {\n    const numberOfPages = this.getNumberOfPages();\n    return this.pageIndex < numberOfPages && this.pageSize != 0;\n  }\n\n  /** Calculate the number of pages */\n  getNumberOfPages(): number {\n    return Math.ceil(this.length / this.pageSize) - 1;\n  }\n\n\n  /**\n   * Changes the page size so that the first item displayed on the page will still be\n   * displayed using the new page size.\n   *\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n   * switching so that the page size is 5 will set the third page as the current page so\n   * that the 10th item will still be displayed.\n   */\n  _changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const startIndex = this.pageIndex * this.pageSize;\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n\n    this.pageSize = pageSize;\n    this._emitPageEvent();\n  }\n\n  /**\n   * Updates the list of page size options to display to the user. Includes making sure that\n   * the page size is an option and that the list is sorted.\n   */\n  private _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) { return; }\n\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ?\n          this.pageSizeOptions[0] :\n          DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) == -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n  private _emitPageEvent() {\n    this.page.emit({\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatPaginator} from './paginator';\nimport {MAT_PAGINATOR_INTL_PROVIDER} from './paginator-intl';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatTooltipModule,\n  ],\n  exports: [MatPaginator],\n  declarations: [MatPaginator],\n  providers: [MAT_PAGINATOR_INTL_PROVIDER],\n})\nexport class MatPaginatorModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  ElementRef,\n  Input,\n  ViewEncapsulation\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\n\n// TODO(josephperrott): Benchpress tests.\n// TODO(josephperrott): Add ARIA attributes for progress bar \"for\".\n\n// Boilerplate for applying mixins to MatProgressBar.\n/** @docs-private */\nexport class MatProgressBarBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\nexport const _MatProgressBarMixinBase = mixinColor(MatProgressBarBase, 'primary');\n\n/** Counter used to generate unique IDs for progress bars. */\nlet progressbarId = 0;\n\n/**\n * `<mat-progress-bar>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-bar',\n  exportAs: 'matProgressBar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n    'class': 'mat-progress-bar',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatProgressBar extends _MatProgressBarMixinBase implements CanColor {\n\n  constructor(public _elementRef: ElementRef) {\n    super(_elementRef);\n  }\n\n  /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input()\n  get value(): number { return this._value; }\n  set value(v: number) { this._value = clamp(v || 0); }\n  private _value: number = 0;\n\n  /** Buffer value of the progress bar. Defaults to zero. */\n  @Input()\n  get bufferValue(): number { return this._bufferValue; }\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n  private _bufferValue: number = 0;\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input() mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n\n  /** The id of the progress bar. */\n  progressbarId = `mat-progress-bar-${progressbarId++}`;\n\n  /** Gets the current transform value for the progress bar's primary indicator. */\n  _primaryTransform() {\n    const scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   */\n  _bufferTransform() {\n    if (this.mode === 'buffer') {\n      const scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n  }\n}\n\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressBar} from './progress-bar';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatProgressBar, MatCommonModule],\n  declarations: [MatProgressBar],\n})\nexport class MatProgressBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ESCAPE, LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {switchMap} from 'rxjs/operators/switchMap';\nimport {take} from 'rxjs/operators/take';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n  OnInit,\n} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {merge} from 'rxjs/observable/merge';\nimport {Subscription} from 'rxjs/Subscription';\nimport {matMenuAnimations} from './menu-animations';\nimport {throwMatMenuInvalidPositionX, throwMatMenuInvalidPositionY} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MatMenuContent} from './menu-content';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {FocusOrigin} from '@angular/cdk/a11y';\n\n\n/** Default `mat-menu` options that can be overridden. */\nexport interface MatMenuDefaultOptions {\n  /** The x-axis position of the menu. */\n  xPosition: MenuPositionX;\n\n  /** The y-axis position of the menu. */\n  yPosition: MenuPositionY;\n\n  /** Whether the menu should overlap the menu trigger. */\n  overlapTrigger: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-menu`. */\nexport const MAT_MENU_DEFAULT_OPTIONS =\n    new InjectionToken<MatMenuDefaultOptions>('mat-menu-default-options');\n\n/**\n * Start elevation for the menu panel.\n * @docs-private\n */\nconst MAT_MENU_BASE_ELEVATION = 2;\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  animations: [\n    matMenuAnimations.transformMenu,\n    matMenuAnimations.fadeInItems\n  ],\n  exportAs: 'matMenu'\n})\nexport class MatMenu implements OnInit, AfterContentInit, MatMenuPanel, OnDestroy {\n  private _keyManager: FocusKeyManager<MatMenuItem>;\n  private _xPosition: MenuPositionX = this._defaultOptions.xPosition;\n  private _yPosition: MenuPositionY = this._defaultOptions.yPosition;\n  private _previousElevation: string;\n\n  /** Subscription to tab events on the menu panel */\n  private _tabSubscription = Subscription.EMPTY;\n\n  /** Config object to be passed into the menu's ngClass */\n  _classList: {[key: string]: boolean} = {};\n\n  /** Current state of the panel animation. */\n  _panelAnimationState: 'void' | 'enter' = 'void';\n\n  /** Parent menu of the current menu panel. */\n  parentMenu: MatMenuPanel | undefined;\n\n  /** Layout direction of the menu. */\n  direction: Direction;\n\n  /** Position of the menu in the X axis. */\n  @Input()\n  get xPosition(): MenuPositionX { return this._xPosition; }\n  set xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after') {\n      throwMatMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** Position of the menu in the Y axis. */\n  @Input()\n  get yPosition(): MenuPositionY { return this._yPosition; }\n  set yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below') {\n      throwMatMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) templateRef: TemplateRef<any>;\n\n  /** List of the items inside of a menu. */\n  @ContentChildren(MatMenuItem, {descendants: true}) items: QueryList<MatMenuItem>;\n\n  /**\n   * Menu content that will be rendered lazily.\n   * @docs-private\n   */\n  @ContentChild(MatMenuContent) lazyContent: MatMenuContent;\n\n  /** Whether the menu should overlap its trigger. */\n  @Input()\n  get overlapTrigger(): boolean { return this._overlapTrigger; }\n  set overlapTrigger(value: boolean) {\n    this._overlapTrigger = coerceBooleanProperty(value);\n  }\n  private _overlapTrigger: boolean = this._defaultOptions.overlapTrigger;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @param classes list of class names\n   */\n  @Input('class')\n  set panelClass(classes: string) {\n    if (classes && classes.length) {\n      this._classList = classes.split(' ').reduce((obj: any, className: string) => {\n        obj[className] = true;\n        return obj;\n      }, {});\n\n      this._elementRef.nativeElement.className = '';\n      this.setPositionClasses();\n    }\n  }\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @deprecated Use `panelClass` instead.\n   * @deletion-target 6.0.0\n   */\n  @Input()\n  get classList(): string { return this.panelClass; }\n  set classList(classes: string) { this.panelClass = classes; }\n\n  /** Event emitted when the menu is closed. */\n  @Output() readonly closed: EventEmitter<void | 'click' | 'keydown'> =\n      new EventEmitter<void | 'click' | 'keydown'>();\n\n  /**\n   * Event emitted when the menu is closed.\n   * @deprecated Switch to `closed` instead\n   * @deletion-target 6.0.0\n   */\n  @Output() close = this.closed;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _ngZone: NgZone,\n    @Inject(MAT_MENU_DEFAULT_OPTIONS) private _defaultOptions: MatMenuDefaultOptions) { }\n\n  ngOnInit() {\n    this.setPositionClasses();\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatMenuItem>(this.items).withWrap().withTypeAhead();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.close.emit('keydown'));\n  }\n\n  ngOnDestroy() {\n    this._tabSubscription.unsubscribe();\n    this.closed.complete();\n  }\n\n  /** Stream that emits whenever the hovered menu item changes. */\n  _hovered(): Observable<MatMenuItem> {\n    if (this.items) {\n      return this.items.changes.pipe(\n        startWith(this.items),\n        switchMap(items => merge(...items.map(item => item._hovered)))\n      );\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this._hovered()));\n  }\n\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n  _handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case ESCAPE:\n        this.closed.emit('keydown');\n        event.stopPropagation();\n      break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.closed.emit('keydown');\n        }\n      break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Focus the first item in the menu.\n   * @param origin Action from which the focus originated. Used to set the correct styling.\n   */\n  focusFirstItem(origin: FocusOrigin = 'program'): void {\n    // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n    if (this.lazyContent) {\n      this._ngZone.onStable.asObservable()\n        .pipe(take(1))\n        .subscribe(() => this._keyManager.setFocusOrigin(origin).setFirstItemActive());\n    } else {\n      this._keyManager.setFocusOrigin(origin).setFirstItemActive();\n    }\n  }\n\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened, allowing\n   * the user to start from the first option when pressing the down arrow.\n   */\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1);\n  }\n\n  /**\n   * It's necessary to set position-based classes to ensure the menu panel animation\n   * folds out from the correct direction.\n   */\n  setPositionClasses(posX: MenuPositionX = this.xPosition, posY: MenuPositionY = this.yPosition) {\n    this._classList['mat-menu-before'] = posX === 'before';\n    this._classList['mat-menu-after'] = posX === 'after';\n    this._classList['mat-menu-above'] = posY === 'above';\n    this._classList['mat-menu-below'] = posY === 'below';\n  }\n\n  /**\n   * Sets the menu panel elevation.\n   * @param depth Number of parent menus that come before the menu.\n   */\n  setElevation(depth: number): void {\n    // The elevation starts at the base and increases by one for each level.\n    const newElevation = `mat-elevation-z${MAT_MENU_BASE_ELEVATION + depth}`;\n    const customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n\n  /** Starts the enter animation. */\n  _startAnimation() {\n    // @deletion-target 6.0.0 Combine with _resetAnimation.\n    this._panelAnimationState = 'enter';\n  }\n\n  /** Resets the panel animation to its initial state. */\n  _resetAnimation() {\n    // @deletion-target 6.0.0 Combine with _startAnimation.\n    this._panelAnimationState = 'void';\n  }\n\n  /** Callback that is invoked when the panel animation completes. */\n  _onAnimationDone(_event: AnimationEvent) {\n    // @deletion-target 6.0.0 Not being used anymore. To be removed.\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {\n  ConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayRef,\n  OverlayConfig,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {filter} from 'rxjs/operators/filter';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Self,\n  ViewContainerRef,\n} from '@angular/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatMenu} from './menu-directive';\nimport {throwMatMenuMissingError} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\n\n/** Injection token that determines the scroll handling while the menu is open. */\nexport const MAT_MENU_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-menu-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_MENU_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_MENU_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_MENU_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n\n/** Default top padding of the menu panel. */\nexport const MENU_PANEL_TOP_PADDING = 8;\n\n/**\n * This directive is intended to be used in conjunction with an mat-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\n@Directive({\n  selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n  host: {\n    'aria-haspopup': 'true',\n    '(mousedown)': '_handleMousedown($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(click)': '_handleClick($event)',\n  },\n  exportAs: 'matMenuTrigger'\n})\nexport class MatMenuTrigger implements AfterContentInit, OnDestroy {\n  private _portal: TemplatePortal;\n  private _overlayRef: OverlayRef | null = null;\n  private _menuOpen: boolean = false;\n  private _closeSubscription = Subscription.EMPTY;\n  private _hoverSubscription = Subscription.EMPTY;\n\n  // Tracking input type is necessary so it's possible to only auto-focus\n  // the first item of the list when the menu is opened via the keyboard\n  private _openedByMouse: boolean = false;\n\n  /**\n   * @deprecated\n   * @deletion-target 6.0.0\n   */\n  @Input('mat-menu-trigger-for')\n  get _deprecatedMatMenuTriggerFor(): MatMenuPanel {\n    return this.menu;\n  }\n\n  set _deprecatedMatMenuTriggerFor(v: MatMenuPanel) {\n    this.menu = v;\n  }\n\n  /** References the menu instance that the trigger is associated with. */\n  @Input('matMenuTriggerFor') menu: MatMenuPanel;\n\n  /** Data to be passed along to any lazily-rendered content. */\n  @Input('matMenuTriggerData') menuData: any;\n\n  /** Event emitted when the associated menu is opened. */\n  @Output() readonly menuOpened: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is opened.\n   * @deprecated Switch to `menuOpened` instead\n   * @deletion-target 6.0.0\n   */\n  @Output() readonly onMenuOpen: EventEmitter<void> = this.menuOpened;\n\n  /** Event emitted when the associated menu is closed. */\n  @Output() readonly menuClosed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is closed.\n   * @deprecated Switch to `menuClosed` instead\n   * @deletion-target 6.0.0\n   */\n  @Output() readonly onMenuClose: EventEmitter<void> = this.menuClosed;\n\n  constructor(private _overlay: Overlay,\n              private _element: ElementRef,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_MENU_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _parentMenu: MatMenu,\n              @Optional() @Self() private _menuItemInstance: MatMenuItem,\n              @Optional() private _dir: Directionality,\n              // TODO(crisbeto): make the _focusMonitor required when doing breaking changes.\n              private _focusMonitor?: FocusMonitor) {\n\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._checkMenu();\n\n    this.menu.close.subscribe(reason => {\n      this._destroyMenu();\n\n      // If a click closed the menu, we should close the entire chain of nested menus.\n      if (reason === 'click' && this._parentMenu) {\n        this._parentMenu.closed.emit(reason);\n      }\n    });\n\n    if (this.triggersSubmenu()) {\n      // Subscribe to changes in the hovered item in order to toggle the panel.\n      this._hoverSubscription = this._parentMenu._hovered()\n          .pipe(filter(active => active === this._menuItemInstance))\n          .subscribe(() => {\n            this._openedByMouse = true;\n            this.openMenu();\n          });\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._cleanUpSubscriptions();\n  }\n\n  /** Whether the menu is open. */\n  get menuOpen(): boolean {\n    return this._menuOpen;\n  }\n\n  /** The text direction of the containing app. */\n  get dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the menu triggers a sub-menu or a top-level one. */\n  triggersSubmenu(): boolean {\n    return !!(this._menuItemInstance && this._parentMenu);\n  }\n\n  /** Toggles the menu between the open and closed states. */\n  toggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n\n  /** Opens the menu. */\n  openMenu(): void {\n    if (this._menuOpen) {\n      return;\n    }\n\n    this._createOverlay().attach(this._portal);\n\n    if (this.menu.lazyContent) {\n      this.menu.lazyContent.attach(this.menuData);\n    }\n\n    this._closeSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n    this._initMenu();\n\n    if (this.menu instanceof MatMenu) {\n      this.menu._startAnimation();\n    }\n  }\n\n  /** Closes the menu. */\n  closeMenu(): void {\n    this.menu.close.emit();\n  }\n\n  /**\n   * Focuses the menu trigger.\n   * @param origin Source of the menu trigger's focus.\n   */\n  focus(origin: FocusOrigin = 'program') {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._element.nativeElement, origin);\n    } else {\n      this._element.nativeElement.focus();\n    }\n  }\n\n  /** Closes the menu and does the necessary cleanup. */\n  private _destroyMenu() {\n    if (this._overlayRef && this.menuOpen) {\n      this._resetMenu();\n      this._closeSubscription.unsubscribe();\n      this._overlayRef.detach();\n\n      if (this.menu instanceof MatMenu) {\n        this.menu._resetAnimation();\n      }\n    }\n  }\n\n  /**\n   * This method sets the menu state to open and focuses the first item if\n   * the menu was opened via the keyboard.\n   */\n  private _initMenu(): void {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n    this.menu.direction = this.dir;\n    this._setMenuElevation();\n    this._setIsMenuOpen(true);\n    this.menu.focusFirstItem(this._openedByMouse ? 'mouse' : 'program');\n  }\n\n  /** Updates the menu elevation based on the amount of parent menus that it has. */\n  private _setMenuElevation(): void {\n    if (this.menu.setElevation) {\n      let depth = 0;\n      let parentMenu = this.menu.parentMenu;\n\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n\n      this.menu.setElevation(depth);\n    }\n  }\n\n  /**\n   * This method resets the menu when it's closed, most importantly restoring\n   * focus to the menu trigger if the menu was opened via the keyboard.\n   */\n  private _resetMenu(): void {\n    this._setIsMenuOpen(false);\n\n    // We should reset focus if the user is navigating using a keyboard or\n    // if we have a top-level trigger which might cause focus to be lost\n    // when clicking on the backdrop.\n    if (!this._openedByMouse) {\n      // Note that the focus style will show up both for `program` and\n      // `keyboard` so we don't have to specify which one it is.\n      this.focus();\n    } else if (!this.triggersSubmenu()) {\n      this.focus('mouse');\n    }\n\n    this._openedByMouse = false;\n  }\n\n  // set state rather than toggle to support triggers sharing a menu\n  private _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._highlighted = isOpen;\n    }\n  }\n\n  /**\n   * This method checks that a valid instance of MatMenu has been passed into\n   * matMenuTriggerFor. If not, an exception is thrown.\n   */\n  private _checkMenu() {\n    if (!this.menu) {\n      throwMatMenuMissingError();\n    }\n  }\n\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n  private _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n      const config = this._getOverlayConfig();\n      this._subscribeToPositions(config.positionStrategy as ConnectedPositionStrategy);\n      this._overlayRef = this._overlay.create(config);\n    }\n\n    return this._overlayRef;\n  }\n\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getPosition(),\n      hasBackdrop: !this.triggersSubmenu(),\n      backdropClass: 'cdk-overlay-transparent-backdrop',\n      direction: this.dir,\n      scrollStrategy: this._scrollStrategy()\n    });\n  }\n\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position. This ensures the animation origin is always\n   * correct, even if a fallback position is used for the overlay.\n   */\n  private _subscribeToPositions(position: ConnectedPositionStrategy): void {\n    position.onPositionChange.subscribe(change => {\n      const posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n      const posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n      this.menu.setPositionClasses(posX, posY);\n    });\n  }\n\n  /**\n   * This method builds the position strategy for the overlay, so the menu is properly connected\n   * to the trigger.\n   * @returns ConnectedPositionStrategy\n   */\n  private _getPosition(): ConnectedPositionStrategy {\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\n        this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n        this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    return this._overlay.position()\n        .connectedTo(this._element, {originX, originY}, {overlayX, overlayY})\n        .withDirection(this.dir)\n        .withOffsetY(offsetY)\n        .withFallbackPosition(\n            {originX: originFallbackX, originY},\n            {overlayX: overlayFallbackX, overlayY})\n        .withFallbackPosition(\n            {originX, originY: originFallbackY},\n            {overlayX, overlayY: overlayFallbackY},\n            undefined, -offsetY)\n        .withFallbackPosition(\n            {originX: originFallbackX, originY: originFallbackY},\n            {overlayX: overlayFallbackX, overlayY: overlayFallbackY},\n            undefined, -offsetY);\n  }\n\n  /** Cleans up the active subscriptions. */\n  private _cleanUpSubscriptions(): void {\n    this._closeSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n  }\n\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\n  private _menuClosingActions() {\n    const backdrop = this._overlayRef!.backdropClick();\n    const detachments = this._overlayRef!.detachments();\n    const parentClose = this._parentMenu ? this._parentMenu.close : observableOf();\n    const hover = this._parentMenu ? this._parentMenu._hovered().pipe(\n      filter(active => active !== this._menuItemInstance),\n      filter(() => this._menuOpen)\n    ) : observableOf();\n\n    return merge(backdrop, parentClose, hover, detachments);\n  }\n\n  /** Handles mouse presses on the trigger. */\n  _handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      this._openedByMouse = true;\n\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  /** Handles key presses on the trigger. */\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (this.triggersSubmenu() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n      this.openMenu();\n    }\n  }\n\n  /** Handles click events on the trigger. */\n  _handleClick(event: MouseEvent): void {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {MAT_MENU_DEFAULT_OPTIONS, MatMenu} from './menu-directive';\nimport {MatMenuItem} from './menu-item';\nimport {MAT_MENU_SCROLL_STRATEGY_PROVIDER, MatMenuTrigger} from './menu-trigger';\nimport {MatMenuContent} from './menu-content';\n\n\n@NgModule({\n  imports: [\n    A11yModule,\n    CommonModule,\n    MatCommonModule,\n    MatRippleModule,\n    OverlayModule,\n    PortalModule,\n  ],\n  exports: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent, MatCommonModule],\n  declarations: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent],\n  providers: [\n    MAT_MENU_SCROLL_STRATEGY_PROVIDER,\n    {\n      provide: MAT_MENU_DEFAULT_OPTIONS,\n      useValue: {\n        overlapTrigger: true,\n        xPosition: 'after',\n        yPosition: 'below',\n      },\n    }\n  ],\n})\nexport class MatMenuModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  animateChild,\n  group,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n */\nexport const matSelectAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [\n    state('showing', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n      transform: 'scaleY(1)'\n    })),\n    state('showing-multiple', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n      transform: 'scaleY(1)'\n    })),\n    transition('void => *', group([\n      query('@fadeInContent', animateChild()),\n      style({\n        opacity: 0,\n        minWidth: '100%',\n        transform: 'scaleY(0)'\n      }),\n      animate('150ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n    ])),\n    transition('* => void', [\n      animate('250ms 100ms linear', style({opacity: 0}))\n    ])\n  ]),\n\n  /**\n   * This animation fades in the background color and text content of the\n   * select's options. It is time delayed to occur 100ms after the overlay\n   * panel has transformed in.\n   */\n  fadeInContent: trigger('fadeInContent', [\n    state('showing', style({opacity: 1})),\n    transition('void => showing', [\n      style({opacity: 0}),\n      animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const transformPanel = matSelectAnimations.transformPanel;\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const fadeInContent = matSelectAnimations.fadeInContent;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {SPACE, ENTER, HOME, END} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatLine,\n  MatLineSetter,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Subscription} from 'rxjs/Subscription';\n\n\n/** @docs-private */\nexport class MatSelectionListBase {}\nexport const _MatSelectionListMixinBase =\n  mixinTabIndex(mixinDisableRipple(mixinDisabled(MatSelectionListBase)));\n\n/** @docs-private */\nexport class MatListOptionBase {}\nexport const _MatListOptionMixinBase = mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/**\n * Change event object emitted by MatListOption whenever the selected state changes.\n * @deprecated Use the `MatSelectionListChange` event on the selection list instead.\n * @deletion-target 6.0.0\n */\nexport class MatListOptionChange {\n  constructor(\n    /** Reference to the list option that changed. */\n    public source: MatListOption,\n    /** The new selected state of the option. */\n    public selected: boolean) {}\n}\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-focus]': '_hasFocus',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase\n    implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\n\n  private _lineSetter: MatLineSetter;\n  private _selected = false;\n  private _disabled = false;\n\n  /** Whether the option has focus. */\n  _hasFocus: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  /** DOM element containing the item's text. */\n  @ViewChild('text') _text: ElementRef;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Value of the option */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  /**\n   * Emits a change event whenever the selected state of an option changes.\n   * @deprecated Use the `selectionChange` event on the `<mat-selection-list>` instead.\n   * @deletion-target 6.0.0\n   */\n  @Output() readonly selectionChange: EventEmitter<MatListOptionChange> =\n    new EventEmitter<MatListOptionChange>();\n\n  constructor(private _element: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              /** @docs-private */\n              @Inject(forwardRef(() => MatSelectionList)) public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    if (this._selected) {\n      // List options that are selected at initialization can't be reported properly to the form\n      // control. This is because it takes some time until the selection-list knows about all\n      // available options. Also it can happen that the ControlValueAccessor has an initial value\n      // that should be used instead. Deferring the value change report to the next tick ensures\n      // that the form control value is not being overwritten.\n      Promise.resolve().then(() => this.selected = true);\n    }\n  }\n\n  ngAfterContentInit() {\n    this._lineSetter = new MatLineSetter(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => this.selected = false);\n    }\n\n    this.selectionList._removeOptionFromList(this);\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n   * @docs-private\n   */\n  getLabel() {\n    return this._text ? this._text.nativeElement.textContent : '';\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n\n      // TODO: the `selectionChange` event on the option is deprecated. Remove that in the future.\n      this._emitDeprecatedChangeEvent();\n    }\n  }\n\n  _handleFocus() {\n    this._hasFocus = true;\n    this.selectionList._setFocusedOption(this);\n  }\n\n  _handleBlur() {\n    this._hasFocus = false;\n    this.selectionList._onTouched();\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. */\n  _setSelected(selected: boolean) {\n    if (selected === this._selected) {\n      return;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n  }\n\n  /** Emits a selectionChange event for this option. */\n  _emitDeprecatedChangeEvent() {\n    // TODO: the `selectionChange` event on the option is deprecated. Remove that in the future.\n    this.selectionChange.emit(new MatListOptionChange(this, this.selected));\n  }\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'role': 'listbox',\n    '[tabIndex]': 'tabIndex',\n    'class': 'mat-selection-list',\n    '(focus)': 'focus()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_keydown($event)',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements FocusableOption,\n    CanDisable, CanDisableRipple, HasTabIndex, AfterContentInit, ControlValueAccessor, OnDestroy {\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /** The currently selected options. */\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Used for storing the values that were assigned before the options were initialized. */\n  private _tempValues: string[]|null;\n\n  private _modelChanges = Subscription.EMPTY;\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  _onTouched: () => void = () => {};\n\n  constructor(private _element: ElementRef, @Attribute('tabindex') tabIndex: string) {\n    super();\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options).withWrap().withTypeAhead();\n\n    if (this._tempValues) {\n      this._setOptionsFromValues(this._tempValues);\n      this._tempValues = null;\n    }\n\n    // Sync external changes to the model back to the options.\n    this._modelChanges = this.selectedOptions.onChange!.subscribe(event => {\n      if (event.added) {\n        for (let item of event.added) {\n          item.selected = true;\n        }\n      }\n\n      if (event.removed) {\n        for (let item of event.removed) {\n          item.selected = false;\n        }\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this._modelChanges.unsubscribe();\n  }\n\n  /** Focus the selection-list. */\n  focus() {\n    this._element.nativeElement.focus();\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this.options.forEach(option => option._setSelected(true));\n    this._reportValueChange();\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this.options.forEach(option => option._setSelected(false));\n    this._reportValueChange();\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItemIndex(this._getOptionIndex(option));\n  }\n\n  /** Removes an option from the selection list and updates the active item. */\n  _removeOptionFromList(option: MatListOption) {\n    if (option._hasFocus) {\n      const optionIndex = this._getOptionIndex(option);\n\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.setPreviousItemActive();\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.setNextItemActive();\n      }\n    }\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case SPACE:\n      case ENTER:\n        this._toggleSelectOnFocusedOption();\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n      case HOME:\n      case END:\n        event.keyCode === HOME ? this._keyManager.setFirstItemActive() :\n                                 this._keyManager.setLastItemActive();\n        event.preventDefault();\n        break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    if (this.options) {\n      this._onChange(this._getSelectedOptionValues());\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    } else {\n      this._tempValues = values;\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    if (this.options) {\n      this.options.forEach(option => option.disabled = isDisabled);\n    }\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /** Returns the option with the specified value. */\n  private _getOptionByValue(value: string): MatListOption | undefined {\n    return this.options.find(option => option.value === value);\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values\n      .map(value => this._getOptionByValue(value))\n      .filter(Boolean)\n      .forEach(option => option!._setSelected(true));\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the selected state of the currently focused option. */\n  private _toggleSelectOnFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n\n        // TODO: the `selectionChange` event on the option is deprecated. Remove that in the future.\n        focusedOption._emitDeprecatedChangeEvent();\n      }\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  query,\n  group,\n  sequence,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n */\nexport const matMenuAnimations: {\n  readonly transformMenu: AnimationTriggerMetadata;\n  readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: trigger('transformMenu', [\n    state('void', style({\n      opacity: 0,\n      // This starts off from 0.01, instead of 0, because there's an issue in the Angular animations\n      // as of 4.2, which causes the animation to be skipped if it starts from 0.\n      transform: 'scale(0.01, 0.01)'\n    })),\n    transition('void => enter', sequence([\n      query('.mat-menu-content', style({opacity: 0})),\n      animate('100ms linear', style({opacity: 1, transform: 'scale(1, 0.5)'})),\n      group([\n        query('.mat-menu-content', animate('400ms cubic-bezier(0.55, 0, 0.55, 0.2)',\n          style({opacity: 1})\n        )),\n        animate('300ms cubic-bezier(0.25, 0.8, 0.25, 1)', style({transform: 'scale(1, 1)'})),\n      ])\n    ])),\n    transition('* => void', animate('150ms 50ms linear', style({opacity: 0})))\n  ]),\n\n\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: trigger('fadeInItems', [\n    // TODO(crisbeto): this is inside the `transformMenu`\n    // now. Remove next time we do breaking changes.\n    state('showing', style({opacity: 1})),\n    transition('void => *', [\n      style({opacity: 0}),\n      animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const fadeInItems = matMenuAnimations.fadeInItems;\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const transformMenu = matMenuAnimations.transformMenu;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {Subject} from 'rxjs/Subject';\nimport {DOCUMENT} from '@angular/common';\n\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nexport class MatMenuItemBase {}\nexport const _MatMenuItemMixinBase = mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n\n/**\n * This directive is intended to be used inside an mat-menu tag.\n * It exists mostly to set the role attribute.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-menu-item]',\n  exportAs: 'matMenuItem',\n  inputs: ['disabled', 'disableRipple'],\n  host: {\n    'role': 'menuitem',\n    'class': 'mat-menu-item',\n    '[class.mat-menu-item-highlighted]': '_highlighted',\n    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n    '(click)': '_checkDisabled($event)',\n    '(mouseenter)': '_emitHoverEvent()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  templateUrl: 'menu-item.html',\n})\nexport class MatMenuItem extends _MatMenuItemMixinBase\n    implements FocusableOption, CanDisable, CanDisableRipple, OnDestroy {\n\n  private _document: Document;\n\n  /** Stream that emits when the menu item is hovered. */\n  readonly _hovered: Subject<MatMenuItem> = new Subject<MatMenuItem>();\n\n  /** Whether the menu item is highlighted. */\n  _highlighted: boolean = false;\n\n  /** Whether the menu item acts as a trigger for a sub-menu. */\n  _triggersSubmenu: boolean = false;\n\n  constructor(\n    private _elementRef: ElementRef,\n    @Inject(DOCUMENT) document?: any,\n    private _focusMonitor?: FocusMonitor) {\n\n    // @deletion-target 6.0.0 make `_focusMonitor` and `document` required params.\n    super();\n\n    if (_focusMonitor) {\n      // Start monitoring the element so it gets the appropriate focused classes. We want\n      // to show the focus style for menu items only when the focus was not caused by a\n      // mouse or touch interaction.\n      _focusMonitor.monitor(this._getHostElement(), false);\n    }\n\n    this._document = document;\n  }\n\n  /** Focuses the menu item. */\n  focus(origin: FocusOrigin = 'program'): void {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._getHostElement(), origin);\n    } else {\n      this._getHostElement().focus();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._getHostElement());\n    }\n\n    this._hovered.complete();\n  }\n\n  /** Used to set the `tabindex`. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Returns the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Prevents the default element actions if it is disabled. */\n  _checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /** Emits to the hover stream. */\n  _emitHoverEvent() {\n    if (!this.disabled) {\n      this._hovered.next(this);\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const textNodeType = this._document ? this._document.TEXT_NODE : 3;\n    let output = '';\n\n    if (element.childNodes) {\n      const length = element.childNodes.length;\n\n      // Go through all the top-level text nodes and extract their text.\n      // We skip anything that's not a text node to prevent the text from\n      // being thrown off by something like an icon.\n      for (let i = 0; i < length; i++) {\n        if (element.childNodes[i].nodeType === textNodeType) {\n          output += element.childNodes[i].textContent;\n        }\n      }\n    }\n\n    return output.trim();\n  }\n\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  TemplateRef,\n  ComponentFactoryResolver,\n  ApplicationRef,\n  Injector,\n  ViewContainerRef,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {TemplatePortal, DomPortalOutlet} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\n\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\n@Directive({\n  selector: 'ng-template[matMenuContent]'\n})\nexport class MatMenuContent implements OnDestroy {\n  private _portal: TemplatePortal<any>;\n  private _outlet: DomPortalOutlet;\n\n  constructor(\n    private _template: TemplateRef<any>,\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private _appRef: ApplicationRef,\n    private _injector: Injector,\n    private _viewContainerRef: ViewContainerRef,\n    @Inject(DOCUMENT) private _document: any) {}\n\n  /**\n   * Attaches the content with a particular context.\n   * @docs-private\n   */\n  attach(context: any = {}) {\n    if (!this._portal) {\n      this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n    } else if (this._portal.isAttached) {\n      this._portal.detach();\n    }\n\n    if (!this._outlet) {\n      this._outlet = new DomPortalOutlet(this._document.createElement('div'),\n          this._componentFactoryResolver, this._appRef, this._injector);\n    }\n\n    const element: HTMLElement = this._template.elementRef.nativeElement;\n\n    // Because we support opening the same menu from different triggers (which in turn have their\n    // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n    // risk it staying attached to a pane that's no longer in the DOM.\n    element.parentNode!.insertBefore(this._outlet.outletElement, element);\n    this._portal.attach(this._outlet, context);\n  }\n\n  ngOnDestroy() {\n    if (this._outlet) {\n      this._outlet.dispose();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, MatLine, MatLineSetter, mixinDisableRipple} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nexport class MatListBase {}\nexport const _MatListMixinBase = mixinDisableRipple(MatListBase);\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nexport class MatListItemBase {}\nexport const _MatListItemMixinBase = mixinDisableRipple(MatListItemBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisableRipple {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {'class': 'mat-list'},\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatList extends _MatListMixinBase implements CanDisableRipple {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-item, a[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple {\n  private _lineSetter: MatLineSetter;\n  private _isNavList: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  @ContentChild(MatListAvatarCssMatStyler)\n  set _hasAvatar(avatar: MatListAvatarCssMatStyler) {\n    if (avatar != null) {\n      this._element.nativeElement.classList.add('mat-list-item-avatar');\n    } else {\n      this._element.nativeElement.classList.remove('mat-list-item-avatar');\n    }\n  }\n\n  constructor(private _element: ElementRef,\n              @Optional() private _navList: MatNavList) {\n    super();\n    this._isNavList = !!_navList;\n  }\n\n  ngAfterContentInit() {\n    this._lineSetter = new MatLineSetter(this._lines, this._element);\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return !this._isNavList || this.disableRipple || this._navList.disableRipple;\n  }\n\n  _handleFocus() {\n    this._element.nativeElement.classList.add('mat-list-item-focus');\n  }\n\n  _handleBlur() {\n    this._element.nativeElement.classList.remove('mat-list-item-focus');\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {catchError} from 'rxjs/operators/catchError';\nimport {tap} from 'rxjs/operators/tap';\nimport {finalize} from 'rxjs/operators/finalize';\nimport {map} from 'rxjs/operators/map';\nimport {share} from 'rxjs/operators/share';\nimport {\n  Injectable,\n  Inject,\n  InjectionToken,\n  Optional,\n  SecurityContext,\n  SkipSelf,\n} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {DomSanitizer, SafeResourceUrl} from '@angular/platform-browser';\nimport {Observable} from 'rxjs/Observable';\nimport {forkJoin} from 'rxjs/observable/forkJoin';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {_throw as observableThrow} from 'rxjs/observable/throw';\nimport {DOCUMENT} from '@angular/common';\n\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n\n\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/http.\n * @docs-private\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n               'Please include the HttpClientModule from @angular/common/http in your ' +\n               'app imports.');\n}\n\n\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n  svgElement: SVGElement | null = null;\n  constructor(public url: SafeResourceUrl) { }\n}\n\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n@Injectable()\nexport class MatIconRegistry {\n  private _document: Document;\n\n  /**\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n   */\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\n\n  /**\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n   * Multiple icon sets can be registered under the same namespace.\n   */\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n\n  /** Cache for icons loaded by direct URLs. */\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\n\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\n\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n  private _fontCssClassesByAlias = new Map<string, string>();\n\n  /**\n   * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n   */\n  private _defaultFontSetClass = 'material-icons';\n\n  constructor(\n    @Optional() private _httpClient: HttpClient,\n    private _sanitizer: DomSanitizer,\n    @Optional() @Inject(DOCUMENT) document?: any) {\n      // TODO(crisbeto): make _document required next major release.\n      this._document = document;\n    }\n\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    const key = iconKey(namespace, iconName);\n    this._svgIconConfigs.set(key, new SvgIconConfig(url));\n    return this;\n  }\n\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param url\n   */\n  addSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param url\n   */\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    const config = new SvgIconConfig(url);\n    const configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n    return this;\n  }\n\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the `<mat-icon>` element.\n   *\n   * @param alias Alias for the font.\n   * @param className Class name override to be used instead of the alias.\n   */\n  registerFontClassAlias(alias: string, className: string = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   */\n  classNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n\n  /**\n   * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @param className\n   */\n  setDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   */\n  getDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param safeUrl URL from which to fetch the SVG icon.\n   */\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    let url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeError(safeUrl);\n    }\n\n    let cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\n      map(svg => cloneSvg(svg)),\n    );\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param name Name of the icon to be retrieved.\n   * @param namespace Namespace in which to look for the icon.\n   */\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const key = iconKey(namespace, name);\n    const config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   */\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(\n        tap(svg => config.svgElement = svg),\n        map(svg => cloneSvg(svg)),\n      );\n    }\n  }\n\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   */\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\n          catchError((err: any): Observable<SVGElement | null> => {\n            let url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the combined Observable won't\n            // necessarily fail.\n            console.log(`Loading icon set URL: ${url} failed: ${err}`);\n            return observableOf(null);\n          })\n        );\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    }));\n  }\n\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchUrl(config.url)\n        .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText)));\n  }\n\n  /**\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    // If the SVG for this icon set has already been parsed, do nothing.\n    if (config.svgElement) {\n      return observableOf(config.svgElement);\n    }\n\n    return this._fetchUrl(config.url).pipe(map(svgText => {\n      // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n      // only needs to occur if the cache is yet unset.\n      if (!config.svgElement) {\n        config.svgElement = this._svgElementFromString(svgText);\n      }\n\n      return config.svgElement;\n    }));\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string, and adds default attributes.\n   */\n  private _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\n    const iconSource = iconSet.querySelector('#' + iconName);\n\n    if (!iconSource) {\n      return null;\n    }\n\n    // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n    const iconElement = iconSource.cloneNode(true) as Element;\n    iconElement.id = '';\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(iconElement as SVGElement);\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement));\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n\n    return this._setSvgAttributes(svg);\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string.\n   */\n  private _svgElementFromString(str: string): SVGElement {\n    if (this._document || typeof document !== 'undefined') {\n      const div = (this._document || document).createElement('DIV');\n      div.innerHTML = str;\n      const svg = div.querySelector('svg') as SVGElement;\n      if (!svg) {\n        throw Error('<svg> tag not found');\n      }\n      return svg;\n    }\n\n    throw new Error('MatIconRegistry could not resolve document.');\n  }\n\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   */\n  private _toSvgElement(element: Element): SVGElement {\n    let svg = this._svgElementFromString('<svg></svg>');\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   */\n  private _setSvgAttributes(svg: SVGElement): SVGElement {\n    if (!svg.getAttribute('xmlns')) {\n      svg.setAttribute('xmlns', 'http://www.w3.org/2000/svg');\n    }\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n\n  /**\n   * Returns an Observable which produces the string contents of the given URL. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   */\n  private _fetchUrl(safeUrl: SafeResourceUrl): Observable<string> {\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finally` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const req = this._httpClient.get(url, {responseType: 'text'}).pipe(\n      finalize(() => this._inProgressUrlFetches.delete(url)),\n      share(),\n    );\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n}\n\n/** @docs-private */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n  parentRegistry: MatIconRegistry,\n  httpClient: HttpClient,\n  sanitizer: DomSanitizer,\n  document?: any) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document);\n}\n\n/** @docs-private */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [\n    [new Optional(), new SkipSelf(), MatIconRegistry],\n    [new Optional(), HttpClient],\n    DomSanitizer,\n    [new Optional(), DOCUMENT as InjectionToken<any>],\n  ],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return svg.cloneNode(true) as SVGElement;\n}\n\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {take} from 'rxjs/operators/take';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {MatIconRegistry} from './icon-registry';\n\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nexport class MatIconBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatIconMixinBase = mixinColor(MatIconBase);\n\n\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\n@Component({\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'mat-icon',\n  exportAs: 'matIcon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, CanColor {\n\n  /** Name of the icon in the SVG icon set. */\n  @Input() svgIcon: string;\n\n  /** Font set that the icon is a part of. */\n  @Input()\n  get fontSet(): string { return this._fontSet; }\n  set fontSet(value: string) {\n    this._fontSet = this._cleanupFontValue(value);\n  }\n  private _fontSet: string;\n\n  /** Name of an icon within a font set. */\n  @Input()\n  get fontIcon(): string { return this._fontIcon; }\n  set fontIcon(value: string) {\n    this._fontIcon = this._cleanupFontValue(value);\n  }\n  private _fontIcon: string;\n\n  private _previousFontSetClass: string;\n  private _previousFontIconClass: string;\n\n  constructor(\n      elementRef: ElementRef,\n      private _iconRegistry: MatIconRegistry,\n      @Attribute('aria-hidden') ariaHidden: string) {\n    super(elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   `'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)`\n   */\n  private _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return <[string, string]>parts;\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    if (changes.svgIcon) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(\n          svg => this._setSvgElement(svg),\n          (err: Error) => console.log(`Error retrieving icon: ${err.message}`)\n        );\n      } else {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  private _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n\n  private _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n\n  private _clearSvgElement() {\n    const layoutElement: HTMLElement = this._elementRef.nativeElement;\n    const childCount = layoutElement.childNodes.length;\n\n    // Remove existing child nodes and add the new SVG element. Note that we can't\n    // use innerHTML, because IE will throw if the element has a data binding.\n    for (let i = 0; i < childCount; i++) {\n      layoutElement.removeChild(layoutElement.childNodes[i]);\n    }\n  }\n\n  private _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const elem: HTMLElement = this._elementRef.nativeElement;\n    const fontSetClass = this.fontSet ?\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\n        this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        elem.classList.remove(this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        elem.classList.add(fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n\n  /**\n   * Cleans up a value to be used as a fontIcon or fontSet.\n   * Since the value ends up being assigned as a CSS class, we\n   * have to trim the value and omit space-separated values.\n   */\n  private _cleanupFontValue(value: string) {\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\nimport {ICON_REGISTRY_PROVIDER} from './icon-registry';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n  providers: [ICON_REGISTRY_PROVIDER],\n})\nexport class MatIconModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators\n} from '@angular/forms';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: MatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D> implements AfterContentInit, ControlValueAccessor, OnDestroy,\n    Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(value: MatDatepicker<D>) {\n    this.registerDatepicker(value);\n  }\n  _datepicker: MatDatepicker<D>;\n\n  private registerDatepicker(value: MatDatepicker<D>) {\n    if (value) {\n      this._datepicker = value;\n      this._datepicker._registerInput(this);\n    }\n  }\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(value: (date: D | null) => boolean) {\n    this._dateFilter = value;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null { return this._value; }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    let oldDate = this.value;\n    this._value = value;\n    this._elementRef.nativeElement.value =\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _value: D | null;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled(): boolean { return !!this._disabled; }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n\n    if (newValue) {\n      // Normally, native input elements automatically blur if they turn disabled. This behavior\n      // is problematic, because it would mean that it triggers another change detection cycle,\n      // which then causes a changed after checked error if the input element was focused before.\n      this._elementRef.nativeElement.blur();\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() readonly dateChange: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() readonly dateInput: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D | null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngAfterContentInit() {\n    if (this._datepicker) {\n      this._datepickerSubscription =\n          this._datepicker.selectedChanged.subscribe((selected: D) => {\n            this.value = selected;\n            this._cvaOnChange(selected);\n            this._onTouched();\n            this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n            this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n          });\n    }\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  /** @docs-private */\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /**\n   * @deprecated\n   * @deletion-target 7.0.0 Use `getConnectedOverlayOrigin` instead\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this.getConnectedOverlayOrigin();\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (event.altKey && event.keyCode === DOWN_ARROW) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n    this._value = date;\n    this._cvaOnChange(date);\n    this._valueChange.emit(date);\n    this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /** Returns the palette used by the input's form field, if any. */\n  _getThemePalette() {\n    return this._formField ? this._formField.color : undefined;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n  Directive,\n  ContentChild,\n} from '@angular/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerIntl} from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `matDatepickerToggle`. */\n@Directive({\n  selector: '[matDatepickerToggleIcon]'\n})\nexport class MatDatepickerToggleIcon {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  styleUrls: ['datepicker-toggle.css'],\n  host: {\n    'class': 'mat-datepicker-toggle',\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n    '[class.mat-accent]': 'datepicker && datepicker.color === \"accent\"',\n    '[class.mat-warn]': 'datepicker && datepicker.color === \"warn\"',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepicker<D>;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  /** Custom icon set by the consumer. */\n  @ContentChild(MatDatepickerToggleIcon) _customIcon: MatDatepickerToggleIcon;\n\n  constructor(public _intl: MatDatepickerIntl, private _changeDetectorRef: ChangeDetectorRef) {}\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.datepicker) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n    const datepickerToggled = this.datepicker ?\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n        observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(\n      this._intl.changes,\n      datepickerDisabled,\n      inputDisabled,\n      datepickerToggled\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatCalendar} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {\n  MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER,\n  MatDatepicker,\n  MatDatepickerContent,\n} from './datepicker';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle, MatDatepickerToggleIcon} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    OverlayModule,\n    A11yModule,\n  ],\n  exports: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n  ],\n  providers: [\n    MatDatepickerIntl,\n    MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n  ]\n})\nexport class MatDatepickerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-divider',\n  host: {\n    'role': 'separator',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-divider-vertical]': 'vertical',\n    '[class.mat-divider-inset]': 'inset',\n    'class': 'mat-divider'\n  },\n  template: '',\n  styleUrls: ['divider.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  preserveWhitespaces: false,\n})\nexport class MatDivider {\n  /** Whether the divider is vertically aligned. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Whether the divider is an inset divider. */\n  @Input()\n  get inset(): boolean { return this._inset; }\n  set inset(value: boolean) { this._inset = coerceBooleanProperty(value); }\n  private _inset: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDivider} from './divider';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [\n    MatDivider,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDivider,\n  ],\n})\nexport class MatDividerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  host: {\n    class: 'mat-accordion'\n  }\n})\nexport class MatAccordion extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private _hideToggle: boolean = false;\n\n  /**\n   * The display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the reset of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]'\n})\nexport class MatExpansionPanelContent {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  Host,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  SimpleChanges,\n  ViewEncapsulation,\n  ViewContainerRef,\n  AfterContentInit,\n  ContentChild,\n} from '@angular/core';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {Subject} from 'rxjs/Subject';\nimport {take} from 'rxjs/operators/take';\nimport {filter} from 'rxjs/operators/filter';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {MatAccordion} from './accordion';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {matExpansionAnimations} from './expansion-animations';\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MdAccordion directive attached.\n */\n@Component({\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed', 'expandedChange'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  }\n})\nexport class MatExpansionPanel extends CdkAccordionItem\n    implements AfterContentInit, OnChanges, OnDestroy {\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(value: boolean) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n  private _hideToggle = false;\n\n  /** Stream that emits for changes in `@Input` properties. */\n  readonly _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  accordion: MatAccordion;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent) _lazyContent: MatExpansionPanelContent;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\n\n  constructor(@Optional() @Host() accordion: MatAccordion,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n              private _viewContainerRef: ViewContainerRef) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n  }\n\n  /** Whether the expansion indicator should be hidden. */\n  _getHideToggle(): boolean {\n    if (this.accordion) {\n      return this.accordion.hideToggle;\n    }\n    return this.hideToggle;\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith(null!),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._inputChanges.complete();\n  }\n\n  _bodyAnimation(event: AnimationEvent) {\n    const classList = event.element.classList;\n    const cssClass = 'mat-expanded';\n    const {phaseName, toState} = event;\n\n    // Toggle the body's `overflow: hidden` class when closing starts or when expansion ends in\n    // order to prevent the cases where switching too early would cause the animation to jump.\n    // Note that we do it directly on the DOM element to avoid the slight delay that comes\n    // with doing it via change detection.\n    if (phaseName === 'done' && toState === 'expanded') {\n      classList.add(cssClass);\n    } else if (phaseName === 'start' && toState === 'collapsed') {\n      classList.remove(cssClass);\n    }\n  }\n}\n\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n})\nexport class MatExpansionPanelActionRow {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {filter} from 'rxjs/operators/filter';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatExpansionPanel} from './expansion-panel';\nimport {matExpansionAnimations} from './expansion-animations';\n\n\n/**\n * `<mat-expansion-panel-header>`\n *\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    matExpansionAnimations.indicatorRotate,\n    matExpansionAnimations.expansionHeaderHeight\n  ],\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'panel.disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '(click)': '_toggle()',\n    '(keydown)': '_keydown($event)',\n    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n  },\n})\nexport class MatExpansionPanelHeader implements OnDestroy {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  constructor(\n    @Host() public panel: MatExpansionPanel,\n    private _element: ElementRef,\n    private _focusMonitor: FocusMonitor,\n    private _changeDetectorRef: ChangeDetectorRef) {\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to  subscribe and trigger change detection manually.\n    this._parentChangeSubscription = merge(\n      panel.opened,\n      panel.closed,\n      panel._inputChanges.pipe(filter(changes => !!(changes.hideToggle || changes.disabled)))\n    )\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    _focusMonitor.monitor(_element.nativeElement);\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    this.panel.toggle();\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        event.preventDefault();\n        this._toggle();\n        break;\n      default:\n        return;\n    }\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\n  }\n}\n\n/**\n * `<mat-panel-description>`\n *\n * This direction is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host : {\n    class: 'mat-expansion-panel-header-description'\n  }\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * `<mat-panel-title>`\n *\n * This direction is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host : {\n    class: 'mat-expansion-panel-header-title'\n  }\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {UNIQUE_SELECTION_DISPATCHER_PROVIDER} from '@angular/cdk/collections';\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanel,\n  MatExpansionPanelActionRow\n} from './expansion-panel';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n\n@NgModule({\n  imports: [CommonModule, A11yModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER]\n})\nexport class MatExpansionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ElementRef,\n  Input,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Directive,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatLine, MatLineSetter} from '@angular/material/core';\nimport {coerceToNumber} from './grid-list-measure';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile',\n  exportAs: 'matGridTile',\n  host: {\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n\n  constructor(private _element: ElementRef) {}\n\n  /** Amount of rows that the grid tile takes up. */\n  @Input()\n  get rowspan(): number { return this._rowspan; }\n  set rowspan(value: number) { this._rowspan = coerceToNumber(value); }\n\n  /** Amount of columns that the grid tile takes up. */\n  @Input()\n  get colspan(): number { return this._colspan; }\n  set colspan(value: number) { this._colspan = coerceToNumber(value); }\n\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n  _setStyle(property: string, value: any): void {\n    this._element.nativeElement.style[property] = value;\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatGridTileText implements AfterContentInit {\n  /**\n   *  Helper that watches the number of lines in a text area and sets\n   * a class on the host element that matches the line count.\n   */\n  _lineSetter: MatLineSetter;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  constructor(private _element: ElementRef) {}\n\n  ngAfterContentInit() {\n    this._lineSetter = new MatLineSetter(this._lines, this._element);\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-grid-avatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n})\nexport class MatGridAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n})\nexport class MatGridTileHeaderCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n})\nexport class MatGridTileFooterCssMatStyler {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {QueryList} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nexport class TileCoordinator {\n  /** Tracking array (see class description). */\n  tracker: number[];\n\n  /** Index at which the search for the next gap will start. */\n  columnIndex: number = 0;\n\n  /** The current row index. */\n  rowIndex: number = 0;\n\n  /** Gets the total number of rows occupied by tiles */\n  get rowCount(): number { return this.rowIndex + 1; }\n\n  /**\n   * Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n   */\n  get rowspan() {\n    let lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n\n  /** The computed (row, col) position of each tile (the output). */\n  positions: TilePosition[];\n\n  constructor(numColumns: number, tiles: QueryList<MatGridTile>) {\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n\n  /** Calculates the row and col position of a tile. */\n  private _trackTile(tile: MatGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    let gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n\n  /** Finds the next available space large enough to fit the tile. */\n  private _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let gapStartIndex = -1;\n    let gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile.\n    } while (gapEndIndex - gapStartIndex < tileCols);\n\n    // If we still didn't manage to find a gap, ensure that the index is\n    // at least zero so the tile doesn't get pulled out of the grid.\n    return Math.max(gapStartIndex, 0);\n  }\n\n  /** Move \"down\" to the next row. */\n  private _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   */\n  private _findGapEndIndex(gapStartIndex: number): number {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n\n  /** Update the tile tracker to account for the given tile in the given space. */\n  private _markTilePosition(start: number, tile: MatGridTile): void {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nexport class TilePosition {\n  constructor(public row: number, public col: number) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridList} from './grid-list';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n\n\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n\n\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n\n\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param tile Tile to which to apply the styling.\n   * @param rowIndex Index of the tile's row.\n   * @param colIndex Index of the tile's column.\n   */\n  setStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n\n  /** Sets the horizontal placement of the tile in the list. */\n  setColStyles(tile: MatGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let side = this._direction === 'ltr' ? 'left' : 'right';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   */\n  getGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param tileHeight Height of the tile.\n   */\n  getTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n\n  /**\n   * Sets the vertical placement of the tile in the list.\n   * This method will be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  abstract setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number);\n\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  getComputedHeight(): [string, string] | null { return null; }\n\n  /**\n   * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n   * @param list Grid list that the styler was attached to.\n   * @docs-private\n   */\n  abstract reset(list: MatGridList);\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n\n  constructor(public fixedRowHeight: string) { super(); }\n\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['height', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n\n  /** Ratio width:height given by user to determine row height. */\n  rowHeightRatio: number;\n  baseTileHeight: string;\n\n  constructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('margin-top', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('padding-top', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'padding-bottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['padding-bottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('margin-top', null);\n      tile._setStyle('padding-top', null);\n    });\n  }\n\n  private _parseRatio(value: string): void {\n    const ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nexport class FitTileStyler extends TileStyler {\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n  reset(list: MatGridList) {\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/** Wraps a CSS string in a calc function */\nfunction calc(exp: string): string { return `calc(${exp})`; }\n\n\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value: string): string {\n  return (value.match(/px|em|rem/)) ? value : value + 'px';\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  coerceToString,\n  coerceToNumber,\n} from './grid-list-measure';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst MAT_FIT_MODE = 'fit';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-list',\n  exportAs: 'matGridList',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatGridList implements OnInit, AfterContentChecked {\n  /** Number of columns being rendered. */\n  private _cols: number;\n\n  /**\n   * Row height value passed in by user. This can be one of three types:\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n   */\n  private _rowHeight: string;\n\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n  private _gutter: string = '1px';\n\n  /** Sets position and size styles for a tile */\n  private _tileStyler: TileStyler;\n\n  /** Query list of tiles that are being rendered. */\n  @ContentChildren(MatGridTile) _tiles: QueryList<MatGridTile>;\n\n  constructor(private _element: ElementRef, @Optional() private _dir: Directionality) {}\n\n  /** Amount of columns in the grid list. */\n  @Input()\n  get cols(): number { return this._cols; }\n  set cols(value: number) { this._cols = coerceToNumber(value); }\n\n  /** Size of the grid list's gutter in pixels. */\n  @Input()\n  get gutterSize(): string { return this._gutter; }\n  set gutterSize(value: string) { this._gutter = coerceToString(value); }\n\n  /** Set internal representation of row height from the user-provided value. */\n  @Input()\n  set rowHeight(value: string | number) {\n    const newValue = coerceToString(value);\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n\n  /** Throw a friendly error if cols property is missing */\n  private _checkCols() {\n    if (!this.cols) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` +\n                  `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n\n  /** Default to equal width:height if rowHeight property is missing */\n  private _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n  private _setTileStyler(rowHeight: string): void {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n\n  /** Computes and applies the size and position for all children grid tiles. */\n  private _layoutTiles(): void {\n    const tracker = new TileCoordinator(this.cols, this._tiles);\n    const direction = this._dir ? this._dir.value : 'ltr';\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    this._tiles.forEach((tile, index) => {\n      const pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n\n  /** Sets style on the main grid-list element, given the style name and value. */\n  _setListStyle(style: [string, string | null] | null): void {\n    if (style) {\n      this._element.nativeElement.style[style[0]] = style[1];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatLineModule, MatCommonModule} from '@angular/material/core';\nimport {\n  MatGridTile, MatGridTileText, MatGridTileFooterCssMatStyler,\n  MatGridTileHeaderCssMatStyler, MatGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MatGridList} from './grid-list';\n\n\n@NgModule({\n  imports: [MatLineModule, MatCommonModule],\n  exports: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatLineModule,\n    MatCommonModule,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n})\nexport class MatGridListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMonthView<D> implements AfterContentInit {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    const oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new date is selected. */\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody;\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n    this._focusActiveCell();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n\n    const isRtl = this._isRtl();\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n              this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n        if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n          this._dateSelected(this._dateAdapter.getDate(this._activeDate));\n          this._userSelection.emit();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  private _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    const dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      const date = this._dateAdapter.createDate(\n            this._dateAdapter.getYear(this.activeDate),\n            this._dateAdapter.getMonth(this.activeDate), i + 1);\n      const enabled = this._shouldEnableDate(date);\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      this._weeks[this._weeks.length - 1]\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled));\n    }\n  }\n\n  /** Date filter for the month */\n  private _shouldEnableDate(date: D): boolean {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'matMultiYearView',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMultiYearView<D> implements AfterContentInit {\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !=\n        Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new year is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected year. This doesn't imply a change on the selected date */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody;\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: MatCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n    this._focusActiveCell();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n    let activeYear = this._dateAdapter.getYear(this._activeDate);\n    let activeOffset = activeYear % yearsPerPage;\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(activeYear - activeOffset + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n        this._yearSelected(this._dateAdapter.getYear(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  _getActiveCell(): number {\n    return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  private _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates an MatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\n  }\n\n  /** Whether the given year is enabled. */\n  private _shouldEnableYear(year: number) {\n    // disable if the year is greater than maxDate lower than minDate\n    if (year === undefined || year === null ||\n        (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\n        (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\n      return false;\n    }\n\n    // enable if it reaches here and there's no filter defined\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n\n    // If any date in the year is enabled count the year as enabled.\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) == year;\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatYearView<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected month. This doesn't imply a change on the selected date */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody;\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n    this._focusActiveCell();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    const normalizedDate =\n          this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    this.monthSelected.emit(normalizedDate);\n\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n        this._monthSelected(this._dateAdapter.getMonth(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  private _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _shouldEnableMonth(month: number) {\n\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\n\n    if (month === undefined || month === null ||\n        this._isYearAndMonthAfterMaxDate(activeYear, month) ||\n        this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n      return false;\n    }\n\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is after this.maxDate, considering\n   * just the month and year of this.maxDate\n   */\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\n    if (this.maxDate) {\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\n\n      return year > maxYear || (year === maxYear && month > maxMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is before this.minDate, considering\n   * just the month and year of this.minDate\n   */\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\n    if (this.minDate) {\n      const minYear = this._dateAdapter.getYear(this.minDate);\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\n\n      return year < minYear || (year === minYear && month < minMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Subscription} from 'rxjs/Subscription';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView, yearsPerPage} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendar<D> implements AfterContentInit, OnDestroy, OnChanges {\n  private _intlChanges: Subscription;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: 'month' | 'year' | 'multi-year' = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when the currently selected date changes. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the year chosen in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the month chosen in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView) yearView: MatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(MatMultiYearView) multiYearView: MatMultiYearView<D>;\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get _activeDate(): D { return this._clampedActiveDate; }\n  set _activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  _currentView: 'month' | 'year' | 'multi-year';\n\n  /** The label for the current calendar view. */\n  get _periodButtonText(): string {\n    if (this._currentView == 'month') {\n      return this._dateAdapter.format(this._activeDate, this._dateFormats.display.monthYearLabel)\n          .toLocaleUpperCase();\n    }\n    if (this._currentView == 'year') {\n      return this._dateAdapter.getYearName(this._activeDate);\n    }\n    const activeYear = this._dateAdapter.getYear(this._activeDate);\n    const firstYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n    const lastYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n    return `${firstYearInView} \\u2013 ${lastYearInView}`;\n  }\n\n  get _periodButtonLabel(): string {\n    return this._currentView == 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the the previous button. */\n  get _prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this._currentView];\n  }\n\n  /** The label for the the next button. */\n  get _nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this._currentView];\n  }\n\n  constructor(private _intl: MatDatepickerIntl,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngAfterContentInit() {\n    this._activeDate = this.startAt || this._dateAdapter.today();\n    this._currentView = this.startView;\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change = changes.minDate || changes.maxDate || changes.dateFilter;\n\n    if (change && !change.firstChange) {\n      const view = this.monthView || this.yearView || this.multiYearView;\n\n      if (view) {\n        view._init();\n      }\n    }\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  /** Handles year selection in the multiyear view. */\n  _yearSelectedInMultiYearView(normalizedYear: D) {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Handles month selection in the year view. */\n  _monthSelectedInYearView(normalizedMonth: D) {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles year/month selection in the multi-year/year views. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this._activeDate = date;\n    this._currentView = view;\n  }\n\n  /** Handles user clicks on the period label. */\n  _currentPeriodClicked(): void {\n    this._currentView = this._currentView == 'month' ? 'multi-year' : 'month';\n  }\n\n  /** Handles user clicks on the previous button. */\n  _previousClicked(): void {\n    this._activeDate = this._currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this._activeDate, -1) :\n        this._dateAdapter.addCalendarYears(\n            this._activeDate, this._currentView == 'year' ? -1 : -yearsPerPage);\n  }\n\n  /** Handles user clicks on the next button. */\n  _nextClicked(): void {\n    this._activeDate = this._currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this._activeDate, 1) :\n        this._dateAdapter.addCalendarYears(\n            this._activeDate, this._currentView == 'year' ? 1 : yearsPerPage);\n  }\n\n  /** Whether the previous period button is enabled. */\n  _previousEnabled(): boolean {\n    if (!this.minDate) {\n      return true;\n    }\n    return !this.minDate || !this._isSameView(this._activeDate, this.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  _nextEnabled(): boolean {\n    return !this.maxDate || !this._isSameView(this._activeDate, this.maxDate);\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this._currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this._currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) ==\n        Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take} from 'rxjs/operators/take';\nimport {filter} from 'rxjs/operators/filter';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, DateAdapter, mixinColor, ThemePalette} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {DOCUMENT} from '@angular/common';\nimport {Subject} from 'rxjs/Subject';\nimport {Subscription} from 'rxjs/Subscription';\nimport {merge} from 'rxjs/observable/merge';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatCalendar} from './calendar';\n\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n// Boilerplate for applying mixins to MatDatepickerContent.\n/** @docs-private */\nexport class MatDatepickerContentBase {\n  constructor(public _elementRef: ElementRef) { }\n}\nexport const _MatDatepickerContentMixinBase = mixinColor(MatDatepickerContentBase);\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n  },\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color'],\n})\nexport class MatDatepickerContent<D> extends _MatDatepickerContentMixinBase\n  implements AfterContentInit, CanColor {\n  datepicker: MatDatepicker<D>;\n\n  @ViewChild(MatCalendar) _calendar: MatCalendar<D>;\n\n  constructor(elementRef: ElementRef, private _ngZone: NgZone) {\n    super(elementRef);\n  }\n\n  ngAfterContentInit() {\n    this._focusActiveCell();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  private _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._elementRef.nativeElement.querySelector('.mat-calendar-body-active').focus();\n      });\n    });\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatDatepicker<D> implements OnDestroy, CanColor {\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' = 'month';\n\n  /** Color palette to use on the datepicker's calendar. */\n  @Input() color: ThemePalette;\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean { return this._touchUi; }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits new selected date when selected date changes.\n   * @deprecated Switch to the `dateChange` and `dateInput` binding on the input element.\n   * @deletion-target 6.0.0\n   */\n  @Output() readonly selectedChanged: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected year in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected month in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { value ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id: string = `mat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._validSelected; }\n  set _selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  private _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<MatDatepickerContent<D>> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\n\n  /** Reference to the component instantiated in popup mode. */\n  private _popupComponentRef: ComponentRef<MatDatepickerContent<D>> | null;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  /** Subscription to value changes in the associated input element. */\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: MatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  readonly _disabledChange = new Subject<boolean>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n      this._popupComponentRef = null;\n    }\n  }\n\n  /** Selects the given date */\n  _select(date: D): void {\n    let oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this.selectedChanged.emit(date);\n    }\n  }\n\n  /** Emits the selected year in multiyear view */\n  _selectYear(normalizedYear: D): void {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Emits selected month in year view */\n  _selectMonth(normalizedMonth: D): void {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: MatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    this._dialogRef = this._dialog.open<MatDatepickerContent<D>>(MatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n    if (this._dialogRef) {\n      this._dialogRef.afterClosed().subscribe(() => this.close());\n      this._dialogRef.componentInstance.datepicker = this;\n    }\n    this._setColor();\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal<MatDatepickerContent<D>>(MatDatepickerContent,\n                                                                          this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      this._popupComponentRef = this._popupRef.attach(this._calendarPortal);\n      this._popupComponentRef.instance.datepicker = this;\n      this._setColor();\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir ? this._dir.value : 'ltr',\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE))\n    ).subscribe(() => this.close());\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    return this._overlay.position()\n      .connectedTo(this._datepickerInput.getConnectedOverlayOrigin(),\n        {originX: 'start', originY: 'bottom'},\n        {overlayX: 'start', overlayY: 'top'}\n      )\n      .withFallbackPosition(\n        {originX: 'start', originY: 'top'},\n        {overlayX: 'start', overlayY: 'bottom'},\n      )\n      .withFallbackPosition(\n        {originX: 'end', originY: 'bottom'},\n        {overlayX: 'end', overlayY: 'top'}\n      )\n      .withFallbackPosition(\n        {originX: 'end', originY: 'top'},\n        {overlayX: 'end', overlayY: 'bottom'},\n      );\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Passes the current theme color along to the calendar overlay. */\n  private _setColor(): void {\n    const input = this._datepickerInput;\n    const color = this.color || (input ? input._getThemePalette() : undefined);\n\n    if (this._popupComponentRef) {\n      this._popupComponentRef.instance.color = color;\n    }\n\n    if (this._dialogRef) {\n      this._dialogRef.componentInstance.color = color;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {AnimationEvent} from '@angular/animations';\nimport {matDialogAnimations} from './dialog-animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {MatDialogConfig} from './dialog-config';\n\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nexport function throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [matDialogAnimations.slideDialog],\n  host: {\n    'class': 'mat-dialog-container',\n    'tabindex': '-1',\n    '[attr.id]': '_id',\n    '[attr.role]': '_config?.role',\n    '[attr.aria-labelledby]': '_config?.ariaLabel ? null : _ariaLabelledBy',\n    '[attr.aria-label]': '_config?.ariaLabel',\n    '[attr.aria-describedby]': '_config?.ariaDescribedBy || null',\n    '[@slideDialog]': '_state',\n    '(@slideDialog.start)': '_onAnimationStart($event)',\n    '(@slideDialog.done)': '_onAnimationDone($event)',\n  },\n})\nexport class MatDialogContainer extends BasePortalOutlet {\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The class that traps and manages focus within the dialog. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n\n  /** The dialog configuration. */\n  _config: MatDialogConfig;\n\n  /** State of the dialog animation. */\n  _state: 'void' | 'enter' | 'exit' = 'enter';\n\n  /** Emits when an animation state changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** ID of the element that should be considered as the dialog's label. */\n  _ariaLabelledBy: string | null = null;\n\n  /** ID for the container DOM element. */\n  _id: string;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DOCUMENT) private _document: any) {\n\n    super();\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the dialog opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the dialog was opened. */\n  private _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n\n      // Note that there is no focus method when rendering on the server.\n      if (this._elementRef.nativeElement.focus) {\n        // Move focus onto the dialog immediately in order to prevent the user from accidentally\n        // opening multiple dialogs at the same time. Needs to be async, because the element\n        // may not be focusable immediately.\n        Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n      }\n    }\n  }\n\n  /** Callback, invoked whenever an animation on the host completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Callback, invoked when an animation on the host starts. */\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Starts the dialog exit animation. */\n  _startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef, GlobalPositionStrategy} from '@angular/cdk/overlay';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Location} from '@angular/common';\nimport {filter} from 'rxjs/operators/filter';\nimport {take} from 'rxjs/operators/take';\nimport {DialogPosition} from './dialog-config';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {Subscription, ISubscription} from 'rxjs/Subscription';\nimport {MatDialogContainer} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nexport class MatDialogRef<T, R = any> {\n  /** The instance of component opened into the dialog. */\n  componentInstance: T;\n\n  /** Whether the user is allowed to close the dialog. */\n  disableClose: boolean | undefined = this._containerInstance._config.disableClose;\n\n  /** Subject for notifying the user that the dialog has finished opening. */\n  private readonly _afterOpen = new Subject<void>();\n\n  /** Subject for notifying the user that the dialog has finished closing. */\n  private readonly _afterClosed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the dialog has started closing. */\n  private readonly _beforeClose = new Subject<R | undefined>();\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined;\n\n  /** Subscription to changes in the user's location. */\n  private _locationChanges: ISubscription = Subscription.EMPTY;\n\n  constructor(\n    private _overlayRef: OverlayRef,\n    public _containerInstance: MatDialogContainer,\n    location?: Location,\n    readonly id: string = `mat-dialog-${uniqueId++}`) {\n\n    // Pass the id along to the container.\n    _containerInstance._id = id;\n\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'enter'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpen.next();\n      this._afterOpen.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'exit'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._overlayRef.dispose();\n      this._locationChanges.unsubscribe();\n      this._afterClosed.next(this._result);\n      this._afterClosed.complete();\n      this.componentInstance = null!;\n    });\n\n    _overlayRef.keydownEvents()\n      .pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose))\n      .subscribe(() => this.close());\n\n    if (location) {\n      // Close the dialog when the user goes forwards/backwards in history or when the location\n      // hash changes. Note that this usually doesn't include clicking on links (unless the user\n      // is using the `HashLocationStrategy`).\n      this._locationChanges = location.subscribe(() => {\n        if (this._containerInstance._config.closeOnNavigation) {\n          this.close();\n        }\n      });\n    }\n  }\n\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult?: R): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'start'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._beforeClose.next(dialogResult);\n      this._beforeClose.complete();\n      this._overlayRef.detachBackdrop();\n    });\n\n    this._containerInstance._startExitAnimation();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  afterOpen(): Observable<void> {\n    return this._afterOpen.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  afterClosed(): Observable<R | undefined> {\n    return this._afterClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n  beforeClose(): Observable<R | undefined> {\n    return this._beforeClose.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position?: DialogPosition): this {\n    let strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width: string = 'auto', height: string = 'auto'): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n\n  /** Fetches the position strategy object from the overlay ref. */\n  private _getPositionStrategy(): GlobalPositionStrategy {\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  ScrollStrategy,\n  OverlayContainer,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {Location} from '@angular/common';\nimport {\n  ComponentRef,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {defer} from 'rxjs/observable/defer';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {Subject} from 'rxjs/Subject';\nimport {MatDialogConfig} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nexport const MAT_DIALOG_DATA = new InjectionToken<any>('MatDialogData');\n\n/** Injection token that can be used to specify default dialog options. */\nexport const MAT_DIALOG_DEFAULT_OPTIONS =\n    new InjectionToken<MatDialogConfig>('mat-dialog-default-options');\n\n/** Injection token that determines the scroll handling while the dialog is open. */\nexport const MAT_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-dialog-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Service to open Material Design modal dialogs.\n */\n@Injectable()\nexport class MatDialog {\n  private _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\n  private readonly _afterAllClosedAtThisLevel = new Subject<void>();\n  private readonly _afterOpenAtThisLevel = new Subject<MatDialogRef<any>>();\n  private _ariaHiddenElements = new Map<Element, string|null>();\n\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs(): MatDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpen(): Subject<MatDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpen : this._afterOpenAtThisLevel;\n  }\n\n  get _afterAllClosed() {\n    const parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   */\n  readonly afterAllClosed: Observable<void> = defer<void>(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      this._afterAllClosed.pipe(startWith(undefined)));\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() private _location: Location,\n      @Optional() @Inject(MAT_DIALOG_DEFAULT_OPTIONS) private _defaultOptions,\n      @Inject(MAT_DIALOG_SCROLL_STRATEGY) private _scrollStrategy,\n      @Optional() @SkipSelf() private _parentDialog: MatDialog,\n      private _overlayContainer: OverlayContainer) {}\n\n  /**\n   * Opens a modal dialog containing the given component.\n   * @param componentOrTemplateRef Type of the component to load into the dialog,\n   *     or a TemplateRef to instantiate as the dialog content.\n   * @param config Extra configuration options.\n   * @returns Reference to the newly-opened dialog.\n   */\n  open<T, D = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MatDialogConfig<D>): MatDialogRef<T> {\n\n    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayRef = this._createOverlay(config);\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const dialogRef =\n        this._attachDialogContent<T>(componentOrTemplateRef, dialogContainer, overlayRef, config);\n\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpen.next(dialogRef);\n\n    return dialogRef;\n  }\n\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n  closeAll(): void {\n    let i = this.openDialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      this.openDialogs[i].close();\n    }\n  }\n\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n  getDialogById(id: string): MatDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the OverlayRef for the created overlay.\n   */\n  private _createOverlay(config: MatDialogConfig): OverlayRef {\n    const overlayConfig = this._getOverlayConfig(config);\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param dialogConfig The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  private _getOverlayConfig(dialogConfig: MatDialogConfig): OverlayConfig {\n    const state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n\n  /**\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  private _attachDialogContainer(overlay: OverlayRef, config: MatDialogConfig): MatDialogContainer {\n    let containerPortal = new ComponentPortal(MatDialogContainer, config.viewContainerRef);\n    let containerRef: ComponentRef<MatDialogContainer> = overlay.attach(containerPortal);\n    containerRef.instance._config = config;\n\n    return containerRef.instance;\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  private _attachDialogContent<T>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MatDialogContainer,\n      overlayRef: OverlayRef,\n      config: MatDialogConfig): MatDialogRef<T> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef = new MatDialogRef<T>(overlayRef, dialogContainer, this._location, config.id);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, null!,\n          <any>{ $implicit: config.data, dialogRef }));\n    } else {\n      const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const contentRef = dialogContainer.attachComponentPortal<T>(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog.\n   * @param container Dialog container element that wraps all of the contents.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  private _createInjector<T>(\n      config: MatDialogConfig,\n      dialogRef: MatDialogRef<T>,\n      dialogContainer: MatDialogContainer): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap();\n\n    injectionTokens.set(MatDialogRef, dialogRef);\n    // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\n    // purposes.  To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n    // added to the injection tokens.\n    injectionTokens.set(MatDialogContainer, dialogContainer);\n    injectionTokens.set(MAT_DIALOG_DATA, config.data);\n    injectionTokens.set(Directionality, {\n      value: config.direction,\n      change: observableOf()\n    });\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   */\n  private _removeOpenDialog(dialogRef: MatDialogRef<any>) {\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n\n        this._ariaHiddenElements.clear();\n        this._afterAllClosed.next();\n      }\n    }\n  }\n\n  /**\n   * Hides all of the content that isn't an overlay from assistive technology.\n   */\n  private _hideNonDialogContentFromAssistiveTechnology() {\n    const overlayContainer = this._overlayContainer.getContainerElement();\n\n    // Ensure that the overlay container is attached to the DOM.\n    if (overlayContainer.parentElement) {\n      const siblings = overlayContainer.parentElement.children;\n\n      for (let i = siblings.length - 1; i > -1; i--) {\n        let sibling = siblings[i];\n\n        if (sibling !== overlayContainer &&\n          sibling.nodeName !== 'SCRIPT' &&\n          sibling.nodeName !== 'STYLE' &&\n          !sibling.hasAttribute('aria-live')) {\n\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n\n  }\n\n}\n\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(\n    config?: MatDialogConfig, defaultOptions?: MatDialogConfig): MatDialogConfig {\n  return {...defaultOptions, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  ElementRef,\n} from '@angular/core';\nimport {MatDialog} from './dialog';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: `button[mat-dialog-close], button[matDialogClose]`,\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel',\n    'type': 'button', // Prevents accidental form submits.\n  }\n})\nexport class MatDialogClose implements OnInit, OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string = 'Close dialog';\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  constructor(\n    @Optional() public dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes._matDialogClose || changes._matDialogCloseResult;\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  @Input() id = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n    @Optional() private _dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'}\n})\nexport class MatDialogContent {}\n\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {'class': 'mat-dialog-actions'}\n})\nexport class MatDialogActions {}\n\n\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef, openDialogs: MatDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatDialog,\n  MAT_DIALOG_SCROLL_STRATEGY_PROVIDER\n} from './dialog';\nimport {MatDialogContainer} from './dialog-container';\nimport {\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n  MatDialogActions\n} from './dialog-content-directives';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    A11yModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogActions,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n  ],\n  providers: [\n    MatDialog,\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MatDialogContainer],\n})\nexport class MatDialogModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform, supportsPassiveEventListeners} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Injectable,\n  OnDestroy,\n  OnInit,\n  Output\n} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {empty as observableEmpty} from 'rxjs/observable/empty';\nimport {Subject} from 'rxjs/Subject';\n\n\n/** An event that is emitted when the autofill state of an input changes. */\nexport type AutofillEvent = {\n  /** The element whose autofill state changes. */\n  target: Element;\n  /** Whether the element is currently autofilled. */\n  isAutofilled: boolean;\n};\n\n\n/** Used to track info about currently monitored elements. */\ntype MonitoredElementInfo = {\n  subject: Subject<AutofillEvent>;\n  unlisten: () => void;\n};\n\n\n/** Options to pass to the animationstart listener. */\nconst listenerOptions: any = supportsPassiveEventListeners() ? {passive: true} : false;\n\n\n/**\n * An injectable service that can be used to monitor the autofill state of an input.\n * Based on the following blog post:\n * https://medium.com/@brunn/detecting-autofilled-fields-in-javascript-aed598d25da7\n */\n@Injectable()\nexport class AutofillMonitor implements OnDestroy {\n  private _monitoredElements = new Map<Element, MonitoredElementInfo>();\n\n  constructor(private _platform: Platform) {}\n\n  /**\n   * Monitor for changes in the autofill state of the given input element.\n   * @param element The element to monitor.\n   * @return A stream of autofill state changes.\n   */\n  monitor(element: Element): Observable<AutofillEvent> {\n    if (!this._platform.isBrowser) {\n      return observableEmpty();\n    }\n\n    const info = this._monitoredElements.get(element);\n    if (info) {\n      return info.subject.asObservable();\n    }\n\n    const result = new Subject<AutofillEvent>();\n    const listener = (event: AnimationEvent) => {\n      if (event.animationName === 'mat-input-autofill-start') {\n        element.classList.add('mat-input-autofilled');\n        result.next({target: event.target as Element, isAutofilled: true});\n      } else if (event.animationName === 'mat-input-autofill-end') {\n        element.classList.remove('mat-input-autofilled');\n        result.next({target: event.target as Element, isAutofilled: false});\n      }\n    };\n\n    element.addEventListener('animationstart', listener, listenerOptions);\n    element.classList.add('mat-input-autofill-monitored');\n\n    this._monitoredElements.set(element, {\n      subject: result,\n      unlisten: () => {\n        element.removeEventListener('animationstart', listener, listenerOptions);\n      }\n    });\n\n    return result.asObservable();\n  }\n\n  /**\n   * Stop monitoring the autofill state of the given input element.\n   * @param element The element to stop monitoring.\n   */\n  stopMonitoring(element: Element) {\n    const info = this._monitoredElements.get(element);\n\n    if (info) {\n      info.unlisten();\n      info.subject.complete();\n      element.classList.remove('mat-input-autofill-monitored');\n      element.classList.remove('mat-input-autofilled');\n      this._monitoredElements.delete(element);\n    }\n  }\n\n  ngOnDestroy() {\n    this._monitoredElements.forEach((_info, element) => this.stopMonitoring(element));\n  }\n}\n\n\n/** A directive that can be used to monitor the autofill state of an input. */\n@Directive({\n  selector: '[matAutofill]',\n})\nexport class MatAutofill implements OnDestroy, OnInit {\n  @Output() matAutofill: EventEmitter<AutofillEvent> = new EventEmitter<AutofillEvent>();\n\n  constructor(private _elementRef: ElementRef, private _autofillMonitor: AutofillMonitor) {}\n\n  ngOnInit() {\n    this._autofillMonitor\n      .monitor(this._elementRef.nativeElement)\n      .subscribe(event => this.matAutofill.emit(event));\n  }\n\n  ngOnDestroy() {\n    this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  ElementRef,\n  Input,\n  AfterViewInit,\n  DoCheck,\n  OnDestroy,\n  NgZone,\n} from '@angular/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {fromEvent} from 'rxjs/observable/fromEvent';\nimport {auditTime} from 'rxjs/operators/auditTime';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {Subject} from 'rxjs/Subject';\n\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n */\n@Directive({\n  selector: `textarea[mat-autosize], textarea[matTextareaAutosize]`,\n  exportAs: 'matTextareaAutosize',\n  host: {\n    'class': 'mat-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n  },\n})\nexport class MatTextareaAutosize implements AfterViewInit, DoCheck, OnDestroy {\n  /** Keep track of the previous textarea value to avoid resizing when the value hasn't changed. */\n  private _previousValue: string;\n  private readonly _destroyed = new Subject<void>();\n\n  private _minRows: number;\n  private _maxRows: number;\n\n  /** Minimum amount of rows in the textarea. */\n  @Input('matAutosizeMinRows')\n  set minRows(value: number) {\n    this._minRows = value;\n    this._setMinHeight();\n  }\n  get minRows(): number { return this._minRows; }\n\n  /** Maximum amount of rows in the textarea. */\n  @Input('matAutosizeMaxRows')\n  get maxRows(): number { return this._maxRows; }\n  set maxRows(value: number) {\n    this._maxRows = value;\n    this._setMaxHeight();\n  }\n\n  /** Cached height of a textarea with a single row. */\n  private _cachedLineHeight: number;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _platform: Platform,\n    private _ngZone?: NgZone) {}\n\n  // TODO(crisbeto): make the `_ngZone` a required param in the next major version.\n\n  /** Sets the minimum height of the textarea as determined by minRows. */\n  _setMinHeight(): void {\n    const minHeight = this.minRows && this._cachedLineHeight ?\n        `${this.minRows * this._cachedLineHeight}px` : null;\n\n    if (minHeight)  {\n      this._setTextareaStyle('minHeight', minHeight);\n    }\n  }\n\n  /** Sets the maximum height of the textarea as determined by maxRows. */\n  _setMaxHeight(): void {\n    const maxHeight = this.maxRows && this._cachedLineHeight ?\n        `${this.maxRows * this._cachedLineHeight}px` : null;\n\n    if (maxHeight) {\n      this._setTextareaStyle('maxHeight', maxHeight);\n    }\n  }\n\n  ngAfterViewInit() {\n    if (this._platform.isBrowser) {\n      this.resizeToFitContent();\n\n      if (this._ngZone) {\n        this._ngZone.runOutsideAngular(() => {\n          fromEvent(window, 'resize')\n            .pipe(auditTime(16), takeUntil(this._destroyed))\n            .subscribe(() => this.resizeToFitContent(true));\n        });\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Sets a style property on the textarea element. */\n  private _setTextareaStyle(property: string, value: string): void {\n    const textarea = this._elementRef.nativeElement as HTMLTextAreaElement;\n    textarea.style[property] = value;\n  }\n\n  /**\n   * Cache the height of a single-row textarea if it has not already been cached.\n   *\n   * We need to know how large a single \"row\" of a textarea is in order to apply minRows and\n   * maxRows. For the initial version, we will assume that the height of a single line in the\n   * textarea does not ever change.\n   */\n  private _cacheTextareaLineHeight(): void {\n    if (this._cachedLineHeight) {\n      return;\n    }\n\n    let textarea = this._elementRef.nativeElement as HTMLTextAreaElement;\n\n    // Use a clone element because we have to override some styles.\n    let textareaClone = textarea.cloneNode(false) as HTMLTextAreaElement;\n    textareaClone.rows = 1;\n\n    // Use `position: absolute` so that this doesn't cause a browser layout and use\n    // `visibility: hidden` so that nothing is rendered. Clear any other styles that\n    // would affect the height.\n    textareaClone.style.position = 'absolute';\n    textareaClone.style.visibility = 'hidden';\n    textareaClone.style.border = 'none';\n    textareaClone.style.padding = '0';\n    textareaClone.style.height = '';\n    textareaClone.style.minHeight = '';\n    textareaClone.style.maxHeight = '';\n\n    // In Firefox it happens that textarea elements are always bigger than the specified amount\n    // of rows. This is because Firefox tries to add extra space for the horizontal scrollbar.\n    // As a workaround that removes the extra space for the scrollbar, we can just set overflow\n    // to hidden. This ensures that there is no invalid calculation of the line height.\n    // See Firefox bug report: https://bugzilla.mozilla.org/show_bug.cgi?id=33654\n    textareaClone.style.overflow = 'hidden';\n\n    textarea.parentNode!.appendChild(textareaClone);\n    this._cachedLineHeight = textareaClone.clientHeight;\n    textarea.parentNode!.removeChild(textareaClone);\n\n    // Min and max heights have to be re-calculated if the cached line height changes\n    this._setMinHeight();\n    this._setMaxHeight();\n  }\n\n  ngDoCheck() {\n    if (this._platform.isBrowser) {\n      this.resizeToFitContent();\n    }\n  }\n\n  /**\n   * Resize the textarea to fit its content.\n   * @param force Whether to force a height recalculation. By default the height will be\n   *    recalculated only if the value changed since the last call.\n   */\n  resizeToFitContent(force: boolean = false) {\n    this._cacheTextareaLineHeight();\n\n    // If we haven't determined the line-height yet, we know we're still hidden and there's no point\n    // in checking the height of the textarea.\n    if (!this._cachedLineHeight) {\n      return;\n    }\n\n    const textarea = this._elementRef.nativeElement as HTMLTextAreaElement;\n    const value = textarea.value;\n\n    // Only resize of the value changed since these calculations can be expensive.\n    if (value === this._previousValue && !force) {\n      return;\n    }\n\n    const placeholderText = textarea.placeholder;\n\n    // Reset the textarea height to auto in order to shrink back to its default size.\n    // Also temporarily force overflow:hidden, so scroll bars do not interfere with calculations.\n    // Long placeholders that are wider than the textarea width may lead to a bigger scrollHeight\n    // value. To ensure that the scrollHeight is not bigger than the content, the placeholders\n    // need to be removed temporarily.\n    textarea.style.height = 'auto';\n    textarea.style.overflow = 'hidden';\n    textarea.placeholder = '';\n\n    // Use the scrollHeight to know how large the textarea *would* be if fit its entire value.\n    textarea.style.height = `${textarea.scrollHeight}px`;\n    textarea.style.overflow = '';\n    textarea.placeholder = placeholderText;\n\n    this._previousValue = value;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nexport const MAT_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{value: any}>('MAT_INPUT_VALUE_ACCESSOR');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {getSupportedInputTypes, Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Self,\n} from '@angular/core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {CanUpdateErrorState, ErrorStateMatcher, mixinErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Subject} from 'rxjs/Subject';\nimport {AutofillMonitor} from './autofill';\nimport {getMatInputUnsupportedTypeError} from './input-errors';\nimport {MAT_INPUT_VALUE_ACCESSOR} from './input-value-accessor';\n\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet nextUniqueId = 0;\n\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nexport class MatInputBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatInputMixinBase = mixinErrorState(MatInputBase);\n\n/** Directive that allows a native input to work inside a `MatFormField`. */\n@Directive({\n  selector: `input[matInput], textarea[matInput]`,\n  exportAs: 'matInput',\n  host: {\n    /**\n     * @deletion-target 7.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n     */\n    'class': 'mat-input-element mat-form-field-autofill-control',\n    '[class.mat-input-server]': '_isServer',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[attr.id]': 'id',\n    '[placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[readonly]': 'readonly',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-required]': 'required.toString()',\n    '(blur)': '_focusChanged(false)',\n    '(focus)': '_focusChanged(true)',\n    '(input)': '_onInput()',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatInput}],\n})\nexport class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges,\n    OnDestroy, OnInit, DoCheck, CanUpdateErrorState {\n  protected _uid = `mat-input-${nextUniqueId++}`;\n  protected _previousNativeValue: any;\n  private _inputValueAccessor: {value: any};\n  /** The aria-describedby attribute on the input for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Whether the component is being rendered on the server. */\n  _isServer = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  focused: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly stateChanges: Subject<void> = new Subject<void>();\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  controlType: string = 'mat-input';\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  autofilled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n  protected _disabled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) { this._id = value || this._uid; }\n  protected _id: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input() placeholder: string = '';\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  protected _required = false;\n\n  /** Input type of the element. */\n  @Input()\n  get type(): string { return this._type; }\n  set type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      this._elementRef.nativeElement.type = this._type;\n    }\n  }\n  protected _type = 'text';\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): string { return this._inputValueAccessor.value; }\n  set value(value: string) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Whether the element is readonly. */\n  @Input()\n  get readonly(): boolean { return this._readonly; }\n  set readonly(value: boolean) { this._readonly = coerceBooleanProperty(value); }\n  private _readonly = false;\n\n  protected _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n\n  constructor(protected _elementRef: ElementRef,\n              protected _platform: Platform,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              @Optional() @Self() @Inject(MAT_INPUT_VALUE_ACCESSOR) inputValueAccessor: any,\n              private _autofillMonitor: AutofillMonitor) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n    this._inputValueAccessor = inputValueAccessor || this._elementRef.nativeElement;\n\n    this._previousNativeValue = this.value;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      _elementRef.nativeElement.addEventListener('keyup', (event: Event) => {\n        let el = event.target as HTMLInputElement;\n        if (!el.value && !el.selectionStart && !el.selectionEnd) {\n          // Note: Just setting `0, 0` doesn't fix the issue. Setting `1, 1` fixes it for the first\n          // time that you type text and then hold delete. Toggling to `1, 1` and then back to\n          // `0, 0` seems to completely fix it.\n          el.setSelectionRange(1, 1);\n          el.setSelectionRange(0, 0);\n        }\n      });\n    }\n\n    this._isServer = !this._platform.isBrowser;\n  }\n\n  ngOnInit() {\n    this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n      this.autofilled = event.isAutofilled;\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n    this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n\n    // We need to dirty-check the native element's value, because there are some cases where\n    // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n    // updating the value using `emitEvent: false`).\n    this._dirtyCheckNativeValue();\n  }\n\n  /** Focuses the input. */\n  focus(): void { this._elementRef.nativeElement.focus(); }\n\n  /** Callback for the cases where the focused state of the input changes. */\n  _focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused && !this.readonly) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n\n  _onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n\n  /** Does some manual dirty checking on the native input `value` property. */\n  protected _dirtyCheckNativeValue() {\n    const newValue = this.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Make sure the input is a supported type. */\n  protected _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n\n  /** Checks whether the input type is one of the types that are never empty. */\n  protected _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n\n  /** Checks whether the input is invalid based on the native validation. */\n  protected _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n    return validity && validity.badInput;\n  }\n\n  /** Determines if the component host is a textarea. If not recognizable it returns false. */\n  protected _isTextarea() {\n    let nativeElement = this._elementRef.nativeElement;\n\n    // In Universal, we don't have access to `nodeName`, but the same can be achieved with `name`.\n    // Note that this shouldn't be necessary once Angular switches to an API that resembles the\n    // DOM closer.\n    let nodeName = this._platform.isBrowser ? nativeElement.nodeName : nativeElement.name;\n    return nodeName ? nodeName.toLowerCase() === 'textarea' : false;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&\n        !this.autofilled;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return this.focused || !this.empty; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() { this.focus(); }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {AutofillMonitor, MatAutofill} from './autofill';\nimport {MatTextareaAutosize} from './autosize';\nimport {MatInput} from './input';\n\n\n@NgModule({\n  declarations: [\n    MatAutofill,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  imports: [\n    CommonModule,\n    MatFormFieldModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatAutofill,\n    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n    // be used together with `MatFormField`.\n    MatFormFieldModule,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  providers: [ErrorStateMatcher, AutofillMonitor],\n})\nexport class MatInputModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable()\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel: string = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel: string = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel: string = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel: string = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel: string = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel: string = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel: string = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel: string = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel: string = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel: string = 'Choose month and year';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation,\n  NgZone,\n} from '@angular/core';\nimport {take} from 'rxjs/operators/take';\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class MatCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean) {}\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n    'role': 'grid',\n    'attr.aria-readonly': 'true'\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarBody {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** Whether to allow selection of disabled cells. */\n  @Input() allowDisabledSelection = false;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /** Emits when a new value is selected. */\n  @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\n\n  constructor(private _elementRef: ElementRef, private _ngZone: NgZone) { }\n\n  _cellClicked(cell: MatCalendarCell): void {\n    if (!this.allowDisabledSelection && !cell.enabled) {\n      return;\n    }\n    this.selectedValueChange.emit(cell.value);\n  }\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  get _firstRowOffset(): number {\n    return this.rows && this.rows.length && this.rows[0].length ?\n        this.numCols - this.rows[0].length : 0;\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._elementRef.nativeElement.querySelector('.mat-calendar-body-active').focus();\n      });\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterViewInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\nimport {MAT_CHECKBOX_CLICK_ACTION, MatCheckboxClickAction} from './checkbox-config';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate\n}\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nexport class MatCheckboxBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatCheckboxMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://www.google.com/design/spec/components/selection-controls.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  exportAs: 'matCheckbox',\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewInit, OnDestroy, CanColor, CanDisable, HasTabIndex, CanDisableRipple {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  private _uniqueId: string = `mat-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  private _required: boolean;\n\n  /**\n   * Whether or not the checkbox should appear before or after the label.\n   * @deprecated\n   * @deletion-target 6.0.0\n   */\n  @Input()\n  get align(): 'start' | 'end' {\n    // align refers to the checkbox relative to the label, while labelPosition refers to the\n    // label relative to the checkbox. As such, they are inverted.\n    return this.labelPosition == 'after' ? 'start' : 'end';\n  }\n  set align(value: 'start' | 'end') {\n    this.labelPosition = (value == 'start') ? 'after' : 'before';\n  }\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() readonly change: EventEmitter<MatCheckboxChange> =\n      new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** The native `<input type=\"checkbox\">` element */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** Reference to the ripple instance of the checkbox. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  _onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Reference to the focused state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              @Attribute('tabindex') tabIndex: string,\n              @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION)\n                  private _clickAction: MatCheckboxClickAction) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (value != this.checked) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked: boolean = false;\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input()\n  get indeterminate(): boolean { return this._indeterminate; }\n  set indeterminate(value: boolean) {\n    const changed = value != this._indeterminate;\n    this._indeterminate = value;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n  private _indeterminate: boolean = false;\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the checkbox changes.\n    // Since the checkbox uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element: HTMLElement = this._elementRef.nativeElement;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n    }\n  }\n\n  private _emitChangeEvent() {\n    let event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this.ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      this._removeFocusRipple();\n      this._onTouched();\n    }\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param event\n   */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && this._clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && this._clickAction !== 'check') {\n\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n          this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && this._clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  /** Focuses the checkbox. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    let animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n\n  /** Fades out the focus state ripple. */\n  private _removeFocusRipple(): void {\n    if (this._focusRipple) {\n      this._focusRipple.fadeOut();\n      this._focusRipple = null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n@Directive({\n  selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n})\nexport class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {MatRippleModule, MatCommonModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\nimport {A11yModule} from '@angular/cdk/a11y';\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, ObserversModule, A11yModule],\n  exports: [MatCheckbox, MatCheckboxRequiredValidator, MatCommonModule],\n  declarations: [MatCheckbox, MatCheckboxRequiredValidator],\n})\nexport class MatCheckboxModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ContentChild,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget\n} from '@angular/material/core';\nimport {Subject} from 'rxjs/Subject';\n\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/** Event object emitted by MatChip when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChip,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false) { }\n}\n\n\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nexport class MatChipBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatChipMixinBase =\n    mixinColor(mixinDisableRipple(mixinDisabled(MatChipBase)), 'primary');\n\nconst CHIP_ATTRIBUTE_NAMES = ['mat-basic-chip'];\n\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-avatar, [matChipAvatar]',\n  host: {'class': 'mat-chip-avatar'}\n})\nexport class MatChipAvatar {}\n\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n  host: {'class': 'mat-chip-trailing-icon'}\n})\nexport class MatChipTrailingIcon {}\n\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled', 'disableRipple'],\n  exportAs: 'matChip',\n  host: {\n    'class': 'mat-chip',\n    '[attr.tabindex]': 'disabled ? null : -1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[class.mat-chip-with-avatar]': 'avatar',\n    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n    '[class.mat-chip-disabled]': 'disabled',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_hasFocus = true',\n    '(blur)': '_blur()',\n  },\n})\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n    CanDisable, CanDisableRipple, RippleTarget {\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /** Reference to the RippleRenderer for the chip. */\n  private _chipRipple: RippleRenderer;\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple;\n  }\n\n  /** Whether the chip has focus. */\n  _hasFocus: boolean = false;\n\n  /** Whether the chip list is selectable */\n  chipListSelectable: boolean = true;\n\n  /** The chip avatar */\n  @ContentChild(MatChipAvatar) avatar: MatChipAvatar;\n\n  /** The chip's trailing icon. */\n  @ContentChild(MatChipTrailingIcon) trailingIcon: MatChipTrailingIcon;\n\n  /** The chip's remove toggler. */\n  @ContentChild(forwardRef(() => MatChipRemove)) removeIcon: MatChipRemove;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) {\n    this._selected = coerceBooleanProperty(value);\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: value\n    });\n  }\n  protected _selected: boolean = false;\n\n  /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n  @Input()\n  get value(): any {\n    return this._value != undefined\n      ? this._value\n      : this._elementRef.nativeElement.textContent;\n  }\n  set value(value: any) { this._value = value; }\n  protected _value: any;\n\n  /**\n   * Whether or not the chip is selectable. When a chip is not selectable,\n   * changes to it's selected state are always ignored. By default a chip is\n   * selectable, and it becomes non-selectable if it's parent chip list is\n   * not selectable.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable && this.chipListSelectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n  protected _selectable: boolean = true;\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (remove) events.\n   */\n  @Input()\n  get removable(): boolean { return this._removable; }\n  set removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n  protected _removable: boolean = true;\n\n  /** Emits when the chip is focused. */\n  readonly _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blured. */\n  readonly _onBlur = new Subject<MatChipEvent>();\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() readonly selectionChange: EventEmitter<MatChipSelectionChange> =\n      new EventEmitter<MatChipSelectionChange>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() readonly destroyed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /**\n   * Emitted when the chip is destroyed.\n   * @deprecated Use 'destroyed' instead.\n   * @deletion-target 6.0.0\n   */\n  @Output() readonly destroy: EventEmitter<MatChipEvent> = this.destroyed;\n\n  /** Emitted when a chip is to be removed. */\n  @Output() readonly removed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /**\n   * Emitted when a chip is to be removed.\n   * @deprecated Use `removed` instead.\n   * @deletion-target 6.0.0\n   */\n  @Output('remove') onRemove: EventEmitter<MatChipEvent> = this.removed;\n\n  /** The ARIA selected applied to the chip. */\n  get ariaSelected(): string | null {\n    return this.selectable ? this.selected.toString() : null;\n  }\n\n  constructor(public _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions) {\n    super(_elementRef);\n\n    this._addHostClassName();\n\n    this._chipRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._chipRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    if (globalOptions) {\n      this.rippleConfig = {\n        speedFactor: globalOptions.baseSpeedFactor,\n        animation: globalOptions.animation,\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n      };\n    }\n  }\n\n  _addHostClassName() {\n    // Add class for the different chips\n    for (const attr of CHIP_ATTRIBUTE_NAMES) {\n      if (this._elementRef.nativeElement.hasAttribute(attr) ||\n        this._elementRef.nativeElement.tagName.toLowerCase() === attr) {\n        (this._elementRef.nativeElement as HTMLElement).classList.add(attr);\n        return;\n      }\n    }\n    (this._elementRef.nativeElement as HTMLElement).classList.add('mat-standard-chip');\n  }\n\n  ngOnDestroy() {\n    this.destroyed.emit({chip: this});\n    this._chipRipple._removeTriggerEvents();\n  }\n\n  /** Selects the chip. */\n  select(): void {\n    this._selected = true;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: true\n    });\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    this._selected = false;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: false\n    });\n  }\n\n  /** Select this chip and emit selected event */\n  selectViaInteraction(): void {\n    this._selected = true;\n    // Emit select event when selected changes.\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: true,\n      selected: true\n    });\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    this._selected = !this.selected;\n\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n\n    return this.selected;\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n    this._onFocus.next({chip: this});\n  }\n\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this.removed.emit({chip: this});\n    }\n  }\n\n  /** Ensures events fire properly upon click. */\n  _handleClick(event: Event) {\n    // Check disabled\n    if (this.disabled) {\n      return;\n    }\n\n    event.preventDefault();\n    event.stopPropagation();\n\n    this.focus();\n  }\n\n  /** Handle custom key presses. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n\n  _blur(): void {\n    this._hasFocus = false;\n    this._onBlur.next({chip: this});\n  }\n}\n\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n@Directive({\n  selector: '[matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove mat-chip-trailing-icon',\n    '(click)': '_handleClick()',\n  }\n})\nexport class MatChipRemove {\n  constructor(protected _parentChip: MatChip) {\n  }\n\n  /** Calls the parent chip's public `remove()` method if applicable. */\n  _handleClick(): void {\n    if (this._parentChip.removable) {\n      this._parentChip.remove();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {BACKSPACE} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {CanUpdateErrorState, ErrorStateMatcher, mixinErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Observable} from 'rxjs/Observable';\nimport {merge} from 'rxjs/observable/merge';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatChip, MatChipEvent, MatChipSelectionChange} from './chip';\nimport {MatChipInput} from './chip-input';\n\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nexport class MatChipListBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatChipListMixinBase = mixinErrorState(MatChipListBase);\n\n\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the chip list value has changed. */\nexport class MatChipListChange {\n  constructor(\n    /** Chip list that emitted the event. */\n    public source: MatChipList,\n    /** Value of the chip list when the event was emitted. */\n    public value: any) { }\n}\n\n\n/**\n * A material design chips component (named ChipList for it's similarity to the List component).\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'matChipList',\n  host: {\n    '[attr.tabindex]': '_tabIndex',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.role]': 'role',\n    '[class.mat-chip-list-disabled]': 'disabled',\n    '[class.mat-chip-list-invalid]': 'errorState',\n    '[class.mat-chip-list-required]': 'required',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    'class': 'mat-chip-list',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)'\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipList}],\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>,\n  ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly controlType: string = 'mat-chip-list';\n\n  /** When a chip is destroyed, we track the index so we can focus the appropriate next chip. */\n  protected _lastDestroyedIndex: number|null = null;\n\n  /** Track which chips we're listening to for focus/destruction. */\n  protected _chipSet: WeakMap<MatChip, boolean> = new WeakMap();\n\n  /** Subscription to tabbing out from the chip list. */\n  private _tabOutSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the chip list. */\n  private _changeSubscription: Subscription;\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription | null;\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription | null;\n\n  /** Subscription to selection changes in chips. */\n  private _chipSelectionSubscription: Subscription | null;\n\n  /** Subscription to remove changes in chips. */\n  private _chipRemoveSubscription: Subscription | null;\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipInput;\n\n  /** Uid of the chip list */\n  protected _uid: string = `mat-chip-list-${nextUniqueId++}`;\n\n  /** The aria-describedby attribute on the chip list for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Tab index for the chip list. */\n  _tabIndex = 0;\n\n  /**\n   * User defined tab index.\n   * When it is not null, use user defined tab index. Otherwise use _tabIndex\n   */\n  _userTabIndex: number | null = null;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatChip>;\n\n  /** Function when touched */\n  _onTouched = () => {};\n\n  /** Function when changed */\n  _onChange: (value: any) => void = () => {};\n\n  _selectionModel: SelectionModel<MatChip>;\n\n  /** The array of selected chips inside chip list. */\n  get selected(): MatChip[] | MatChip {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The ARIA role applied to the chip list. */\n  get role(): string | null { return this.empty ? null : 'listbox'; }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n  private _multiple: boolean = false;\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith(): (o1: any, o2: any) => boolean { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    this.writeValue(value);\n    this._value = value;\n  }\n  protected _value: any;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get id(): string { return this._id || this._uid; }\n  set id(value: string) {\n    this._id = value;\n    this.stateChanges.next();\n  }\n  protected _id: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  protected _required: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get placeholder(): string {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  protected _placeholder: string;\n\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n  get focused(): boolean {\n    return this.chips.some(chip => chip._hasFocus) ||\n      (this._chipInput && this._chipInput.focused);\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return !this.empty || this.focused; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  protected _disabled: boolean = false;\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip list is selectable. When a chip list is not selectable,\n   * the selected states for all the chips inside the chip list are always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n    if (this.chips) {\n      this.chips.forEach(chip => chip.chipListSelectable = this._selectable);\n    }\n  }\n  protected _selectable: boolean = true;\n\n  @Input()\n  set tabIndex(value: number) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n\n  /** Combined stream of all of the child chips' focus change events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n\n  /** Combined stream of all of the child chips' blur change events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n\n  /** Combined stream of all of the child chips' remove change events. */\n  get chipRemoveChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip.destroy));\n  }\n\n  /** Event emitted when the selected chip list value has been changed by the user. */\n  @Output() readonly change: EventEmitter<MatChipListChange> =\n      new EventEmitter<MatChipListChange>();\n\n  /**\n   * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  /** The chip components contained within this chip list. */\n  @ContentChildren(MatChip) chips: QueryList<MatChip>;\n\n  constructor(protected _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatChip>(this.chips)\n      .withWrap()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n\n    // Prevents the chip list from capturing focus and redirecting\n    // it back to the first chip when the user tabs out.\n    this._tabOutSubscription = this._keyManager.tabOut.subscribe(() => {\n      this._tabIndex = -1;\n      setTimeout(() => this._tabIndex = this._userTabIndex || 0);\n    });\n\n    // When the list changes, re-subscribe\n    this._changeSubscription = this.chips.changes.pipe(startWith(null)).subscribe(() => {\n      this._resetChips();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n    });\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatChip>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabOutSubscription.unsubscribe();\n\n    if (this._changeSubscription) {\n      this._changeSubscription.unsubscribe();\n    }\n    this._dropSubscriptions();\n    this.stateChanges.complete();\n  }\n\n\n  /** Associates an HTML input element with this chip list. */\n  registerInput(inputElement: MatChipInput): void {\n    this._chipInput = inputElement;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._elementRef.nativeElement.disabled = isDisabled;\n    this.stateChanges.next();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() { this.focus(); }\n\n  /**\n   * Focuses the the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   */\n  focus(): void {\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput();\n      this.stateChanges.next();\n    }\n  }\n\n  /** Attempt to focus an input if we have one. */\n  _focusInput() {\n    if (this._chipInput) {\n      this._chipInput.focus();\n    }\n  }\n\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keydown(event: KeyboardEvent) {\n    const target = event.target as HTMLElement;\n\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n    } else if (target && target.classList.contains('mat-chip')) {\n      this._keyManager.onKeydown(event);\n      this.stateChanges.next();\n    }\n  }\n\n\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   */\n  protected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n\n  /**\n   * Update key manager's active item when chip is deleted.\n   * If the deleted chip is the last chip in chip list, focus the new last chip.\n   * Otherwise focus the next chip in the list.\n   * Save `_lastDestroyedIndex` so we can set the correct focus.\n   */\n  protected _updateKeyManager(chip: MatChip) {\n    let chipIndex: number = this.chips.toArray().indexOf(chip);\n    if (this._isValidIndex(chipIndex)) {\n      if (chip._hasFocus) {\n        // Check whether the chip is not the last item\n        if (chipIndex < this.chips.length - 1) {\n          this._keyManager.setActiveItem(chipIndex);\n        } else if (chipIndex - 1 >= 0) {\n          this._keyManager.setActiveItem(chipIndex - 1);\n        }\n      }\n      if (this._keyManager.activeItemIndex === chipIndex) {\n        this._lastDestroyedIndex = chipIndex;\n      }\n    }\n  }\n\n  /**\n   * Checks to see if a focus chip was recently destroyed so that we can refocus the next closest\n   * one.\n   */\n  protected _updateFocusForDestroyedChips() {\n    let chipsArray = this.chips;\n\n    if (this._lastDestroyedIndex != null && chipsArray.length > 0) {\n      // Check whether the destroyed chip was the last item\n      const newFocusIndex = Math.min(this._lastDestroyedIndex, chipsArray.length - 1);\n      this._keyManager.setActiveItem(newFocusIndex);\n      let focusChip = this._keyManager.activeItem;\n      // Focus the chip\n      if (focusChip) {\n        focusChip.focus();\n      }\n    }\n\n    // Reset our destroyed index\n    this._lastDestroyedIndex = null;\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\n  private _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let input = element as HTMLInputElement;\n      return !input.value;\n    }\n\n    return false;\n  }\n\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        const correspondingChipIndex = this.chips.toArray().indexOf(correspondingChip);\n\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChipIndex);\n        } else {\n          this._keyManager.updateActiveItemIndex(correspondingChipIndex);\n        }\n\n      }\n    }\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n        this.stateChanges.next();\n      }\n    });\n  }\n\n  /**\n   * Deselects every chip in the list.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\n  _blur() {\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n\n  /** Mark the field as touched */\n  _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  private _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n\n\n  private _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected\n        ? this._selectionModel.select(event.source)\n        : this._selectionModel.deselect(event.source);\n\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let chipIndex: number = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n\n  private _listenToChipsRemoved(): void {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n      this._updateKeyManager(event.chip);\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {Directive, ElementRef, EventEmitter, Input, Output} from '@angular/core';\nimport {MatChipList} from './chip-list';\n\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /** The native `<input>` element that the event is being fired for. */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n}\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    'class': 'mat-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n  }\n})\nexport class MatChipInput {\n  /** Whether the control is focused. */\n  focused: boolean = false;\n  _chipList: MatChipList;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  set chipList(value: MatChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input('matChipInputAddOnBlur')\n  get addOnBlur(): boolean { return this._addOnBlur; }\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  // TODO(tinayuangao): Support Set here\n  @Input('matChipInputSeparatorKeyCodes') separatorKeyCodes: number[] = [ENTER];\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  chipEnd: EventEmitter<MatChipInputEvent> = new EventEmitter<MatChipInputEvent>();\n\n  /** The input's placeholder text. */\n  @Input() placeholder: string = '';\n\n  /** Whether the input is empty. */\n  get empty(): boolean { return !this._inputElement.value; }\n\n  /** The native input element to which this directive is attached. */\n  protected _inputElement: HTMLInputElement;\n\n  constructor(protected _elementRef: ElementRef) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event?: KeyboardEvent) {\n    this._emitChipEnd(event);\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this.separatorKeyCodes.indexOf(event.keyCode) > -1) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n\n  /** Focuses the input. */\n  focus(): void { this._inputElement.focus(); }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatChip, MatChipAvatar, MatChipRemove, MatChipTrailingIcon} from './chip';\nimport {MatChipInput} from './chip-input';\nimport {MatChipList} from './chip-list';\n\nconst CHIP_DECLARATIONS = [\n  MatChipList,\n  MatChip,\n  MatChipInput,\n  MatChipRemove,\n  MatChipAvatar,\n  MatChipTrailingIcon,\n];\n\n@NgModule({\n  imports: [PlatformModule],\n  exports: CHIP_DECLARATIONS,\n  declarations: CHIP_DECLARATIONS,\n  providers: [ErrorStateMatcher]\n})\nexport class MatChipsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  /** Override for the dialog's top position. */\n  top?: string;\n\n  /** Override for the dialog's bottom position. */\n  bottom?: string;\n\n  /** Override for the dialog's left position. */\n  left?: string;\n\n  /** Override for the dialog's right position. */\n  right?: string;\n}\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport class MatDialogConfig<D = any> {\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class for the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop, */\n  backdropClass?: string = '';\n\n  /** Whether the user can use escape or clicking outside to close a modal. */\n  disableClose?: boolean = false;\n\n  /** Width of the dialog. */\n  width?: string = '';\n\n  /** Height of the dialog. */\n  height?: string = '';\n\n  /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\n  maxWidth?: number | string = '80vw';\n\n  /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction;\n\n  /** ID of the element that describes the dialog. */\n  ariaDescribedBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the dialog. */\n  scrollStrategy?: ScrollStrategy;\n\n  /** Whether the dialog should close when the user goes backwards/forwards in history. */\n  closeOnNavigation?: boolean = true;\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by MatDialog. */\nexport const matDialogAnimations: {\n  readonly slideDialog: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides the dialog in and out of view and fades the opacity. */\n  slideDialog: trigger('slideDialog', [\n    // Note: The `enter` animation doesn't transition to something like `translate3d(0, 0, 0)\n    // scale(1)`, because for some reason specifying the transform explicitly, causes IE both\n    // to blur the dialog content and decimate the animation performance. Leaving it as `none`\n    // solves both issues.\n    state('enter', style({ transform: 'none', opacity: 1 })),\n    state('void', style({ transform: 'translate3d(0, 25%, 0) scale(0.9)', opacity: 0 })),\n    state('exit', style({ transform: 'translate3d(0, 25%, 0)', opacity: 0 })),\n    transition('* => *', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\n\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n\n/** Default color palette for flat buttons (mat-flat-button) */\nconst DEFAULT_FLAT_BUTTON_COLOR = 'primary';\n\n/**\n * List of classes to add to MatButton instances based on host attributes to\n * style as different variants.\n */\nconst BUTTON_HOST_ATTRIBUTES = [\n  'mat-button',\n  'mat-flat-button',\n  'mat-icon-button',\n  'mat-raised-button',\n  'mat-stroked-button',\n  'mat-mini-fab',\n  'mat-fab',\n];\n\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nexport class MatButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatButtonMixinBase = mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n\n\n/**\n * Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],\n             button[mat-flat-button]`,\n  exportAs: 'matButton',\n  host: {\n    '[disabled]': 'disabled || null',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends _MatButtonMixinBase\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple {\n\n  /** Whether the button is round. */\n  _isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n\n  /** Whether the button is icon button. */\n  _isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\n\n  /** Reference to the MatRipple instance of the button. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              private _platform: Platform,\n              private _focusMonitor: FocusMonitor) {\n    super(elementRef);\n\n    // For each of the variant selectors that is prevent in the button's host\n    // attributes, add the correct corresponding class.\n    for (const attr of BUTTON_HOST_ATTRIBUTES) {\n      if (this._hasHostAttributes(attr)) {\n        (elementRef.nativeElement as HTMLElement).classList.add(attr);\n      }\n    }\n\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n\n    if (this._isRoundButton) {\n      this.color = DEFAULT_ROUND_BUTTON_COLOR;\n    } else if (this._hasHostAttributes('mat-flat-button')) {\n      this.color = DEFAULT_FLAT_BUTTON_COLOR;\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._getHostElement().focus();\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  _hasHostAttributes(...attributes: string[]) {\n    // If not on the browser, say that there are none of the attributes present.\n    // Since these only affect how the ripple displays (and ripples only happen on the client),\n    // detecting these attributes isn't necessary when not on the browser.\n    if (!this._platform.isBrowser) {\n      return false;\n    }\n\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n  }\n}\n\n/**\n * Raised Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab],\n             a[mat-mini-fab], a[mat-stroked-button], a[mat-flat-button]`,\n  exportAs: 'matButton, matAnchor',\n  host: {\n    '[attr.tabindex]': 'disabled ? -1 : 0',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatButton {\n  constructor(\n      platform: Platform,\n      focusMonitor: FocusMonitor,\n      elementRef: ElementRef) {\n    super(elementRef, platform, focusMonitor);\n  }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {\n  MatAnchor,\n  MatButton,\n} from './button';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n    A11yModule,\n  ],\n  exports: [\n    MatButton,\n    MatAnchor,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatButton,\n    MatAnchor,\n  ],\n})\nexport class MatButtonModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n// Boilerplate for applying mixins to MatButtonToggleGroup and MatButtonToggleGroupMultiple\n/** @docs-private */\nexport class MatButtonToggleGroupBase {}\nexport const _MatButtonToggleGroupMixinBase = mixinDisabled(MatButtonToggleGroupBase);\n\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n\nlet _uniqueIdCounter = 0;\n\n/** Change event object emitted by MatButtonToggle. */\nexport class MatButtonToggleChange {\n  /** The MatButtonToggle that emits the event. */\n  source: MatButtonToggle | null;\n  /** The value assigned to the MatButtonToggle. */\n  value: any;\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n  selector: 'mat-button-toggle-group:not([multiple])',\n  providers: [MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR],\n  inputs: ['disabled'],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-button-toggle-group',\n    '[class.mat-button-toggle-vertical]': 'vertical'\n  },\n  exportAs: 'matButtonToggleGroup',\n})\nexport class MatButtonToggleGroup extends _MatButtonToggleGroupMixinBase\n    implements ControlValueAccessor, CanDisable {\n  /**\n   * The method to be called in order to update ngModel.\n   * Now `ngModel` binding is not supported in multiple selection mode.\n   */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  _onTouched: () => any = () => {};\n\n  /** Child button toggle buttons. */\n  @ContentChildren(forwardRef(() => MatButtonToggle)) _buttonToggles: QueryList<MatButtonToggle>;\n\n  /** `name` attribute for the underlying `input` element. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateButtonToggleNames();\n  }\n  private _name: string = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Value of the toggle group. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value != value) {\n      this._value = value;\n      this.valueChange.emit(value);\n      this._updateSelectedButtonToggleFromValue();\n    }\n  }\n  private _value: any = null;\n\n  /**\n   * Event that emits whenever the value of the group changes.\n   * Used to facilitate two-way data binding.\n   * @docs-private\n   */\n  @Output() readonly valueChange = new EventEmitter<any>();\n\n  /** The currently selected button toggle, should match the value. */\n  @Input()\n  get selected(): MatButtonToggle | null { return this._selected; }\n  set selected(selected: MatButtonToggle | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n\n    if (selected && !selected.checked) {\n      selected.checked = true;\n    }\n  }\n  private _selected: MatButtonToggle | null = null;\n\n  /** Event emitted when the group's value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  private _updateButtonToggleNames(): void {\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach((toggle) => {\n        toggle.name = this._name;\n      });\n    }\n  }\n\n  // TODO: Refactor into shared code with radio.\n  private _updateSelectedButtonToggleFromValue(): void {\n    let isAlreadySelected = this._selected != null && this._selected.value == this._value;\n\n    if (this._buttonToggles != null && !isAlreadySelected) {\n      let matchingButtonToggle = this._buttonToggles.filter(\n          buttonToggle => buttonToggle.value == this._value)[0];\n\n      if (matchingButtonToggle) {\n        this.selected = matchingButtonToggle;\n      } else if (this.value == null) {\n        this.selected = null;\n        this._buttonToggles.forEach(buttonToggle => {\n          buttonToggle.checked = false;\n        });\n      }\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    let event = new MatButtonToggleChange();\n    event.source = this._selected;\n    event.value = this._value;\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._markButtonTogglesForCheck();\n  }\n\n  private _markButtonTogglesForCheck() {\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach((toggle) => toggle._markForCheck());\n    }\n  }\n}\n\n/** Multiple selection button-toggle group. `ngModel` is not supported in this mode. */\n@Directive({\n  selector: 'mat-button-toggle-group[multiple]',\n  exportAs: 'matButtonToggleGroup',\n  inputs: ['disabled'],\n  host: {\n    'class': 'mat-button-toggle-group',\n    '[class.mat-button-toggle-vertical]': 'vertical',\n    'role': 'group'\n  }\n})\nexport class MatButtonToggleGroupMultiple extends _MatButtonToggleGroupMixinBase\n    implements CanDisable {\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n}\n\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/** @docs-private */\nexport class MatButtonToggleBase {}\nexport const _MatButtonToggleMixinBase = mixinDisableRipple(MatButtonToggleBase);\n\n/** Single button inside of a toggle group. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  exportAs: 'matButtonToggle',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disableRipple'],\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup && !buttonToggleGroupMultiple',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    'class': 'mat-button-toggle',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatButtonToggle extends _MatButtonToggleMixinBase\n    implements OnInit, OnDestroy, CanDisableRipple {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n  _type: ToggleType;\n\n  /** Whether or not the button toggle is a single selection. */\n  private _isSingleSelector: boolean = false;\n\n  /** Unregister function for _buttonToggleDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  buttonToggleGroup: MatButtonToggleGroup;\n\n  /** The parent button toggle group (multiple selection). Optional. */\n  buttonToggleGroupMultiple: MatButtonToggleGroupMultiple;\n\n  /** Unique ID for the underlying `input` element. */\n  get inputId(): string { return `${this.id}-input`; }\n\n  /** The unique ID for this button toggle. */\n  @Input() id: string;\n\n  /** HTML's 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Whether the button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (this._isSingleSelector && value) {\n      // Notify all button toggles with the same name (in the same group) to un-check.\n      this._buttonToggleDispatcher.notify(this.id, this.name);\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._checked = value;\n\n    if (value && this._isSingleSelector && this.buttonToggleGroup.value != this.value) {\n      this.buttonToggleGroup.selected = this;\n    }\n  }\n  private _checked: boolean = false;\n\n  /** MatButtonToggleGroup reads this to assign its own value. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value != value) {\n      if (this.buttonToggleGroup != null && this.checked) {\n        this.buttonToggleGroup.value = value;\n      }\n      this._value = value;\n    }\n  }\n  private _value: any = null;\n\n  /** Whether the button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup != null && this.buttonToggleGroup.disabled) ||\n        (this.buttonToggleGroupMultiple != null && this.buttonToggleGroupMultiple.disabled);\n  }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Event emitted when the group value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(@Optional() toggleGroup: MatButtonToggleGroup,\n              @Optional() toggleGroupMultiple: MatButtonToggleGroupMultiple,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _buttonToggleDispatcher: UniqueSelectionDispatcher,\n              private _elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor) {\n    super();\n\n    this.buttonToggleGroup = toggleGroup;\n    this.buttonToggleGroupMultiple = toggleGroupMultiple;\n\n    if (this.buttonToggleGroup) {\n      this._removeUniqueSelectionListener =\n        _buttonToggleDispatcher.listen((id: string, name: string) => {\n          if (id != this.id && name == this.name) {\n            this.checked = false;\n            this._changeDetectorRef.markForCheck();\n          }\n        });\n\n      this._type = 'radio';\n      this.name = this.buttonToggleGroup.name;\n      this._isSingleSelector = true;\n    } else {\n      // Even if there is no group at all, treat the button toggle as a checkbox so it can be\n      // toggled on or off.\n      this._type = 'checkbox';\n      this._isSingleSelector = false;\n    }\n  }\n\n  ngOnInit() {\n    if (this.id == null) {\n      this.id = `mat-button-toggle-${_uniqueIdCounter++}`;\n    }\n\n    if (this.buttonToggleGroup && this._value == this.buttonToggleGroup.value) {\n      this._checked = true;\n    }\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._inputElement.nativeElement.focus();\n  }\n\n  /** Toggle the state of the current button toggle. */\n  private _toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /** Checks the button toggle due to an interaction with the underlying native input. */\n  _onInputChange(event: Event) {\n    event.stopPropagation();\n\n    if (this._isSingleSelector) {\n      // Propagate the change one-way via the group, which will in turn mark this\n      // button toggle as checked.\n      let groupValueChanged = this.buttonToggleGroup.selected != this;\n      this.checked = true;\n      this.buttonToggleGroup.selected = this;\n      this.buttonToggleGroup._onTouched();\n      if (groupValueChanged) {\n        this.buttonToggleGroup._emitChangeEvent();\n      }\n    } else {\n      this._toggle();\n    }\n\n    // Emit a change event when the native input does.\n    this._emitChangeEvent();\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    let event = new MatButtonToggleChange();\n    event.source = this;\n    event.value = this._value;\n    this.change.emit(event);\n  }\n\n  // Unregister buttonToggleDispatcherListener on destroy\n  ngOnDestroy() {\n    this._removeUniqueSelectionListener();\n  }\n\n  /**\n   * Marks the button toggle as needing checking for change detection.\n   * This method is exposed because the parent button toggle group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update button toggle's status\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatButtonToggleGroup, MatButtonToggleGroupMultiple, MatButtonToggle} from './button-toggle';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {UNIQUE_SELECTION_DISPATCHER_PROVIDER} from '@angular/cdk/collections';\nimport {A11yModule} from '@angular/cdk/a11y';\n\n\n@NgModule({\n  imports: [MatCommonModule, MatRippleModule, A11yModule],\n  exports: [\n    MatButtonToggleGroup,\n    MatButtonToggleGroupMultiple,\n    MatButtonToggle,\n    MatCommonModule,\n  ],\n  declarations: [MatButtonToggleGroup, MatButtonToggleGroupMultiple, MatButtonToggle],\n  providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER]\n})\nexport class MatButtonToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Directive,\n  Input,\n} from '@angular/core';\n\n\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-content',\n  host: {'class': 'mat-card-content'}\n})\nexport class MatCardContent {}\n\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n  host: {\n    'class': 'mat-card-title'\n  }\n})\nexport class MatCardTitle {}\n\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n  host: {\n    'class': 'mat-card-subtitle'\n  }\n})\nexport class MatCardSubtitle {}\n\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-actions',\n  exportAs: 'matCardActions',\n  host: {\n    'class': 'mat-card-actions',\n    '[class.mat-card-actions-align-end]': 'align === \"end\"',\n  }\n})\nexport class MatCardActions {\n  /** Position of the actions inside the card. */\n  @Input() align: 'start' | 'end' = 'start';\n}\n\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-footer',\n  host: {'class': 'mat-card-footer'}\n})\nexport class MatCardFooter {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-image], [matCardImage]',\n  host: {'class': 'mat-card-image'}\n})\nexport class MatCardImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-sm-image], [matCardImageSmall]',\n  host: {'class': 'mat-card-sm-image'}\n})\nexport class MatCardSmImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-md-image], [matCardImageMedium]',\n  host: {'class': 'mat-card-md-image'}\n})\nexport class MatCardMdImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-lg-image], [matCardImageLarge]',\n  host: {'class': 'mat-card-lg-image'}\n})\nexport class MatCardLgImage {}\n\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-xl-image], [matCardImageXLarge]',\n  host: {'class': 'mat-card-xl-image'}\n})\nexport class MatCardXlImage {}\n\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-avatar], [matCardAvatar]',\n  host: {'class': 'mat-card-avatar'}\n})\nexport class MatCardAvatar {}\n\n\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card',\n  exportAs: 'matCard',\n  templateUrl: 'card.html',\n  styleUrls: ['card.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card'}\n})\nexport class MatCard {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-header',\n  templateUrl: 'card-header.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-header'}\n})\nexport class MatCardHeader {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a preset\n * layout that groups an image with a title section.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-title-group',\n  templateUrl: 'card-title-group.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-title-group'}\n})\nexport class MatCardTitleGroup {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatCard,\n  MatCardHeader,\n  MatCardTitleGroup,\n  MatCardContent,\n  MatCardTitle,\n  MatCardSubtitle,\n  MatCardActions,\n  MatCardFooter,\n  MatCardSmImage,\n  MatCardMdImage,\n  MatCardLgImage,\n  MatCardImage,\n  MatCardXlImage,\n  MatCardAvatar,\n} from './card';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatCard,\n    MatCardHeader,\n    MatCardTitleGroup,\n    MatCardContent,\n    MatCardTitle,\n    MatCardSubtitle,\n    MatCardActions,\n    MatCardFooter,\n    MatCardSmImage,\n    MatCardMdImage,\n    MatCardLgImage,\n    MatCardImage,\n    MatCardXlImage,\n    MatCardAvatar,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\n    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\n    MatCardXlImage, MatCardAvatar,\n  ],\n})\nexport class MatCardModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MAT_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<MatCheckboxClickAction>('mat-checkbox-click-action');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\nimport {MatAutocomplete} from './autocomplete';\nimport {\n  MatAutocompleteTrigger,\n  MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER,\n} from './autocomplete-trigger';\n\n@NgModule({\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n  exports: [MatAutocomplete, MatOptionModule, MatAutocompleteTrigger, MatCommonModule],\n  declarations: [MatAutocomplete, MatAutocompleteTrigger],\n  providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER],\n})\nexport class MatAutocompleteModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, ElementRef, Inject, Optional, NgZone, OnDestroy} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ThemePalette} from '@angular/material/core';\nimport {AriaDescriber} from '@angular/cdk/a11y';\nimport {DOCUMENT} from '@angular/common';\n\nlet nextId = 0;\n\nexport type MatBadgePosition = 'above after' | 'above before' | 'below before' | 'below after';\nexport type MatBadgeSize = 'small' | 'medium' | 'large';\n\n/** Directive to display a text badge. */\n@Directive({\n  selector: '[matBadge]',\n  host: {\n    'class': 'mat-badge',\n    '[class.mat-badge-overlap]': 'overlap',\n    '[class.mat-badge-above]': 'isAbove()',\n    '[class.mat-badge-below]': '!isAbove()',\n    '[class.mat-badge-before]': '!isAfter()',\n    '[class.mat-badge-after]': 'isAfter()',\n    '[class.mat-badge-small]': 'size === \"small\"',\n    '[class.mat-badge-medium]': 'size === \"medium\"',\n    '[class.mat-badge-large]': 'size === \"large\"',\n    '[class.mat-badge-hidden]': 'hidden',\n  },\n})\nexport class MatBadge implements OnDestroy {\n\n  /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n  @Input('matBadgeColor')\n  get color(): ThemePalette { return this._color; }\n  set color(value: ThemePalette) {\n    this._setColor(value);\n    this._color = value;\n  }\n  private _color: ThemePalette = 'primary';\n\n  /** Whether the badge should overlap its contents or not */\n  @Input('matBadgeOverlap')\n  get overlap(): boolean { return this._overlap; }\n  set overlap(val: boolean) {\n    this._overlap = coerceBooleanProperty(val);\n  }\n  private _overlap: boolean = true;\n\n  /**\n   * Position the badge should reside.\n   * Accepts any combination of 'above'|'below' and 'before'|'after'\n   */\n  @Input('matBadgePosition') position: MatBadgePosition = 'above after';\n\n  /** The content for the badge */\n  @Input('matBadge')\n  get content(): string { return this._content; }\n  set content(val: string) {\n    this._content = val;\n    this._updateTextContent();\n  }\n  private _content: string;\n\n  /** Message used to describe the decorated element via aria-describedby */\n  @Input('matBadgeDescription')\n  get description(): string { return this._description; }\n  set description(newDescription: string) {\n    if (newDescription !== this._description) {\n      this._updateHostAriaDescription(newDescription, this._description);\n      this._description = newDescription;\n    }\n  }\n  private _description: string;\n\n  /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n  @Input('matBadgeSize') size: MatBadgeSize = 'medium';\n\n  /** Whether the badge is hidden. */\n  @Input('matBadgeHidden')\n  get hidden(): boolean { return this._hidden; }\n  set hidden(val: boolean) {\n    this._hidden = coerceBooleanProperty(val);\n  }\n  private _hidden: boolean;\n\n  /** Unique id for the badge */\n  _id: number = nextId++;\n\n  private _badgeElement: HTMLElement;\n\n  constructor(\n      @Optional() @Inject(DOCUMENT) private _document: any,\n      private _ngZone: NgZone,\n      private _elementRef: ElementRef,\n      private _ariaDescriber: AriaDescriber) {}\n\n  /** Whether the badge is above the host or not */\n  isAbove(): boolean {\n    return this.position.indexOf('below') === -1;\n  }\n\n  /** Whether the badge is after the host or not */\n  isAfter(): boolean {\n    return this.position.indexOf('before') === -1;\n  }\n\n  ngOnDestroy() {\n    if (this.description && this._badgeElement) {\n      this._ariaDescriber.removeDescription(this._badgeElement, this.description);\n    }\n  }\n\n  /** Injects a span element into the DOM with the content. */\n  private _updateTextContent(): HTMLSpanElement {\n    if (!this._badgeElement) {\n      this._badgeElement = this._createBadgeElement();\n    } else {\n      this._badgeElement.textContent = this.content;\n    }\n    return this._badgeElement;\n  }\n\n  /** Creates the badge element */\n  private _createBadgeElement(): HTMLElement {\n    const badgeElement = this._document.createElement('span');\n    const activeClass = 'mat-badge-active';\n\n    badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n    badgeElement.classList.add('mat-badge-content');\n    badgeElement.textContent = this.content;\n\n    if (this.description) {\n      badgeElement.setAttribute('aria-label', this.description);\n    }\n\n    this._elementRef.nativeElement.appendChild(badgeElement);\n\n    // animate in after insertion\n    if (typeof requestAnimationFrame === 'function') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          badgeElement.classList.add(activeClass);\n        });\n      });\n    } else {\n      badgeElement.classList.add(activeClass);\n    }\n\n    return badgeElement;\n  }\n\n  /** Sets the aria-label property on the element */\n  private _updateHostAriaDescription(newDescription: string, oldDescription: string): void {\n    // ensure content available before setting label\n    const content = this._updateTextContent();\n\n    if (oldDescription) {\n      this._ariaDescriber.removeDescription(content, oldDescription);\n    }\n\n    if (newDescription) {\n      this._ariaDescriber.describe(content, newDescription);\n    }\n  }\n\n  /** Adds css theme class given the color to the component host */\n  private _setColor(colorPalette: ThemePalette) {\n    if (colorPalette !== this._color) {\n      if (this._color) {\n        this._elementRef.nativeElement.classList.remove(`mat-badge-${this._color}`);\n      }\n      if (colorPalette) {\n        this._elementRef.nativeElement.classList.add(`mat-badge-${colorPalette}`);\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatBadge} from './badge';\n\n\n@NgModule({\n  imports: [\n    MatCommonModule,\n    A11yModule,\n  ],\n  exports: [\n    MatBadge,\n  ],\n  declarations: [\n    MatBadge,\n  ],\n})\nexport class MatBadgeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material bottom sheet. */\nexport const matBottomSheetAnimations: {\n  readonly bottomSheetState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a bottom sheet. */\n  bottomSheetState: trigger('state', [\n    state('void, hidden', style({transform: 'translateY(100%)'})),\n    state('visible', style({transform: 'translateY(0%)'})),\n    transition('visible => void, visible => hidden',\n        animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible',\n        animate(`${AnimationDurations.EXITING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  OnDestroy,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  EventEmitter,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n  CdkPortalOutlet,\n} from '@angular/cdk/portal';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {MatBottomSheetConfig} from './bottom-sheet-config';\nimport {matBottomSheetAnimations} from './bottom-sheet-animations';\nimport {Subscription} from 'rxjs/Subscription';\nimport {DOCUMENT} from '@angular/common';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\n\n// TODO(crisbeto): consolidate some logic between this, MatDialog and MatSnackBar\n\n/**\n * Internal component that wraps user-provided bottom sheet content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-bottom-sheet-container',\n  templateUrl: 'bottom-sheet-container.html',\n  styleUrls: ['bottom-sheet-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  animations: [matBottomSheetAnimations.bottomSheetState],\n  host: {\n    'class': 'mat-bottom-sheet-container',\n    'tabindex': '-1',\n    'role': 'dialog',\n    '[attr.aria-label]': 'bottomSheetConfig?.ariaLabel',\n    '[@state]': '_animationState',\n    '(@state.start)': '_onAnimationStart($event)',\n    '(@state.done)': '_onAnimationDone($event)'\n  },\n})\nexport class MatBottomSheetContainer extends BasePortalOutlet implements OnDestroy {\n  private _breakpointSubscription: Subscription;\n\n  /** The portal outlet inside of this container into which the content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The state of the bottom sheet animations. */\n  _animationState: 'void' | 'visible' | 'hidden' = 'void';\n\n  /** Emits whenever the state of the animation changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** The bottom sheet configuration. */\n  bottomSheetConfig: MatBottomSheetConfig;\n\n  /** The class that traps and manages focus within the bottom sheet. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the bottom sheet was opened. */\n  private _elementFocusedBeforeOpened: HTMLElement | null = null;\n\n  /** Server-side rendering-compatible reference to the global document object. */\n  private _document: Document;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    breakpointObserver: BreakpointObserver,\n    @Optional() @Inject(DOCUMENT) document: any) {\n    super();\n\n    this._document = document;\n    this._breakpointSubscription = breakpointObserver\n      .observe([Breakpoints.Medium, Breakpoints.Large, Breakpoints.XLarge])\n      .subscribe(() => {\n        this._toggleClass('mat-bottom-sheet-container-medium',\n            breakpointObserver.isMatched(Breakpoints.Medium));\n        this._toggleClass('mat-bottom-sheet-container-large',\n            breakpointObserver.isMatched(Breakpoints.Large));\n        this._toggleClass('mat-bottom-sheet-container-xlarge',\n            breakpointObserver.isMatched(Breakpoints.XLarge));\n      });\n  }\n\n  /** Attach a component portal as content to this bottom sheet container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this bottom sheet container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Begin animation of bottom sheet entrance into view. */\n  enter(): void {\n    this._animationState = 'visible';\n    this._changeDetectorRef.detectChanges();\n  }\n\n  /** Begin animation of the bottom sheet exiting from view. */\n  exit(): void {\n    this._animationState = 'hidden';\n    this._changeDetectorRef.markForCheck();\n  }\n\n  ngOnDestroy() {\n    this._breakpointSubscription.unsubscribe();\n  }\n\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'visible') {\n      this._trapFocus();\n    } else if (event.toState === 'hidden') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  private _toggleClass(cssClass: string, add: boolean) {\n    const classList = this._elementRef.nativeElement.classList;\n    add ? classList.add(cssClass) : classList.remove(cssClass);\n  }\n\n  private _validatePortalAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach bottom sheet content after content is already attached');\n    }\n  }\n\n  private _setPanelClass() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClass = this.bottomSheetConfig.panelClass;\n\n    if (Array.isArray(panelClass)) {\n      // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n      panelClass.forEach(cssClass => element.classList.add(cssClass));\n    } else if (panelClass) {\n      element.classList.add(panelClass);\n    }\n  }\n\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    this._focusTrap.focusInitialElementWhenReady();\n  }\n\n  /** Restores focus to the element that was focused before the bottom sheet opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the bottom sheet was opened. */\n  private _savePreviouslyFocusedElement() {\n    this._elementFocusedBeforeOpened = this._document.activeElement as HTMLElement;\n    Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a bottom sheet. */\nexport const MAT_BOTTOM_SHEET_DATA = new InjectionToken<any>('MatBottomSheetData');\n\n/**\n * Configuration used when opening a bottom sheet.\n */\nexport class MatBottomSheetConfig<D = any> {\n  /** The view container to place the overlay for the bottom sheet into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** Extra CSS classes to be added to the bottom sheet container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the bottom sheet. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Whether the bottom sheet has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop. */\n  backdropClass?: string;\n\n  /** Whether the user can use escape or clicking outside to close the bottom sheet. */\n  disableClose?: boolean = false;\n\n  /** Aria label to assign to the bottom sheet element. */\n  ariaLabel?: string | null = null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {merge} from 'rxjs/observable/merge';\nimport {filter} from 'rxjs/operators/filter';\nimport {take} from 'rxjs/operators/take';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n/**\n * Reference to a bottom sheet dispatched from the bottom sheet service.\n */\nexport class MatBottomSheetRef<T = any, R = any> {\n  /** Instance of the component making up the content of the bottom sheet. */\n  instance: T;\n\n  /**\n   * Instance of the component into which the bottom sheet content is projected.\n   * @docs-private\n   */\n  containerInstance: MatBottomSheetContainer;\n\n  /** Subject for notifying the user that the bottom sheet has been dismissed. */\n  private readonly _afterDismissed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the bottom sheet has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Result to be passed down to the `afterDismissed` stream. */\n  private _result: R | undefined;\n\n  constructor(containerInstance: MatBottomSheetContainer, private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n\n    // Emit when opening animation completes\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'visible'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'hidden'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._overlayRef.dispose();\n      this._afterDismissed.next(this._result);\n      this._afterDismissed.complete();\n    });\n\n    if (!containerInstance.bottomSheetConfig.disableClose) {\n      merge(\n        _overlayRef.backdropClick(),\n        _overlayRef._keydownEvents.pipe(filter(event => event.keyCode === ESCAPE))\n      ).subscribe(() => this.dismiss());\n    }\n  }\n\n  /**\n   * Dismisses the bottom sheet.\n   * @param result Data to be passed back to the bottom sheet opener.\n   */\n  dismiss(result?: R): void {\n    if (!this._afterDismissed.closed) {\n      // Transition the backdrop in parallel to the bottom sheet.\n      this.containerInstance._animationStateChanged.pipe(\n        filter(event => event.phaseName === 'start'),\n        take(1)\n      ).subscribe(() => this._overlayRef.detachBackdrop());\n\n      this._result = result;\n      this.containerInstance.exit();\n    }\n  }\n\n  /** Gets an observable that is notified when the bottom sheet is finished closing. */\n  afterDismissed(): Observable<R | undefined> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the bottom sheet has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, TemplatePortal, ComponentType, PortalInjector} from '@angular/cdk/portal';\nimport {ComponentRef, TemplateRef, Injectable, Injector, Optional, SkipSelf} from '@angular/core';\nimport {MatBottomSheetConfig, MAT_BOTTOM_SHEET_DATA} from './bottom-sheet-config';\nimport {MatBottomSheetRef} from './bottom-sheet-ref';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Directionality} from '@angular/cdk/bidi';\n\n/**\n * Service to trigger Material Design bottom sheets.\n */\n@Injectable()\nexport class MatBottomSheet {\n  private _bottomSheetRefAtThisLevel: MatBottomSheetRef<any> | null = null;\n\n  /** Reference to the currently opened bottom sheet. */\n  get _openedBottomSheetRef(): MatBottomSheetRef<any> | null {\n    const parent = this._parentBottomSheet;\n    return parent ? parent._openedBottomSheetRef : this._bottomSheetRefAtThisLevel;\n  }\n\n  set _openedBottomSheetRef(value: MatBottomSheetRef<any> | null) {\n    if (this._parentBottomSheet) {\n      this._parentBottomSheet._openedBottomSheetRef = value;\n    } else {\n      this._bottomSheetRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() @SkipSelf() private _parentBottomSheet: MatBottomSheet) {}\n\n  open<T, D = any, R = any>(component: ComponentType<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n  open<T, D = any, R = any>(template: TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R> {\n\n    const _config = _applyConfigDefaults(config);\n    const overlayRef = this._createOverlay(_config);\n    const container = this._attachContainer(overlayRef, _config);\n    const ref = new MatBottomSheetRef<T, R>(container, overlayRef);\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      container.attachTemplatePortal(new TemplatePortal<T>(componentOrTemplateRef, null!, {\n        $implicit: _config.data,\n        bottomSheetRef: ref\n      } as any));\n    } else {\n      const portal = new ComponentPortal(componentOrTemplateRef, undefined,\n            this._createInjector(_config, ref));\n      const contentRef = container.attachComponentPortal(portal);\n      ref.instance = contentRef.instance;\n    }\n\n    // When the bottom sheet is dismissed, clear the reference to it.\n    ref.afterDismissed().subscribe(() => {\n      // Clear the bottom sheet ref if it hasn't already been replaced by a newer one.\n      if (this._openedBottomSheetRef == ref) {\n        this._openedBottomSheetRef = null;\n      }\n    });\n\n    if (this._openedBottomSheetRef) {\n      // If a bottom sheet is already in view, dismiss it and enter the\n      // new bottom sheet after exit animation is complete.\n      this._openedBottomSheetRef.afterDismissed().subscribe(() => ref.containerInstance.enter());\n      this._openedBottomSheetRef.dismiss();\n    } else {\n      // If no bottom sheet is in view, enter the new bottom sheet.\n      ref.containerInstance.enter();\n    }\n\n    this._openedBottomSheetRef = ref;\n\n    return ref;\n  }\n\n  /**\n   * Dismisses the currently-visible bottom sheet.\n   */\n  dismiss(): void {\n    if (this._openedBottomSheetRef) {\n      this._openedBottomSheetRef.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the bottom sheet container component to the overlay.\n   */\n  private _attachContainer(overlayRef: OverlayRef,\n                           config: MatBottomSheetConfig): MatBottomSheetContainer {\n    const containerPortal = new ComponentPortal(MatBottomSheetContainer, config.viewContainerRef);\n    const containerRef: ComponentRef<MatBottomSheetContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.bottomSheetConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified bottom sheet config.\n   */\n  private _createOverlay(config: MatBottomSheetConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig({\n      direction: config.direction,\n      hasBackdrop: config.hasBackdrop,\n      maxWidth: '100%',\n      scrollStrategy: this._overlay.scrollStrategies.block(),\n      positionStrategy: this._overlay.position()\n        .global()\n        .centerHorizontally()\n        .bottom('0')\n    });\n\n    if (config.backdropClass) {\n      overlayConfig.backdropClass = config.backdropClass;\n    }\n\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a bottom sheet component.\n   * @param config Config that was used to create the bottom sheet.\n   * @param bottomSheetRef Reference to the bottom sheet.\n   */\n  private _createInjector<T>(config: MatBottomSheetConfig,\n                             bottomSheetRef: MatBottomSheetRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap();\n\n    injectionTokens.set(MatBottomSheetRef, bottomSheetRef);\n    injectionTokens.set(MAT_BOTTOM_SHEET_DATA, config.data);\n\n    if (!userInjector || !userInjector.get(Directionality, null)) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n\n/**\n * Applies default options to the bottom sheet config.\n * @param config The configuration to which the defaults will be applied.\n * @returns The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(config?: MatBottomSheetConfig): MatBottomSheetConfig {\n  return {...new MatBottomSheetConfig(), ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {LayoutModule} from '@angular/cdk/layout';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\nimport {MatBottomSheet} from './bottom-sheet';\n\n\n@NgModule({\n  imports: [\n    A11yModule,\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n    PortalModule,\n    LayoutModule,\n  ],\n  exports: [MatBottomSheetContainer, MatCommonModule],\n  declarations: [MatBottomSheetContainer],\n  entryComponents: [MatBottomSheetContainer],\n  providers: [MatBottomSheet],\n})\nexport class MatBottomSheetModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {Subject} from 'rxjs/Subject';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n  InjectionToken,\n  Inject,\n  AfterViewChecked,\n} from '@angular/core';\nimport {MatOptgroup} from './optgroup';\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n/** Event object emitted by MatOption when selected or deselected. */\nexport class MatOptionSelectionChange {\n  constructor(\n    /** Reference to the option that emitted the event. */\n    public source: MatOption,\n    /** Whether the change in the option's value was a result of a user action. */\n    public isUserInput = false) { }\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface MatOptionParentComponent {\n  disableRipple?: boolean;\n  multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MAT_OPTION_PARENT_COMPONENT =\n    new InjectionToken<MatOptionParentComponent>('MAT_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-option',\n  exportAs: 'matOption',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  styleUrls: ['option.css'],\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatOption implements AfterViewChecked {\n  private _selected = false;\n  private _active = false;\n  private _disabled = false;\n  private _id = `mat-option-${_uniqueIdCounter++}`;\n  private _mostRecentViewValue = '';\n\n  /** Whether the wrapping component is in multiple selection mode. */\n  get multiple() { return this._parent && this._parent.multiple; }\n\n  /** The unique ID of the option. */\n  get id(): string { return this._id; }\n\n  /** Whether or not the option is currently selected. */\n  get selected(): boolean { return this._selected; }\n\n  /** The form value of the option. */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return (this.group && this.group.disabled) || this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n  /** Whether ripples for the option are disabled. */\n  get disableRipple() { return this._parent && this._parent.disableRipple; }\n\n  /** Event emitted when the option is selected or deselected. */\n  @Output() readonly onSelectionChange = new EventEmitter<MatOptionSelectionChange>();\n\n  /** Emits when the state of the option changes and any parents have to be notified. */\n  readonly _stateChanges = new Subject<void>();\n\n  constructor(\n    private _element: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(MAT_OPTION_PARENT_COMPONENT) private _parent: MatOptionParentComponent,\n    @Optional() readonly group: MatOptgroup) {}\n\n  /**\n   * Whether or not the option is currently active and ready to be selected.\n   * An active option displays styles as if it is focused, but the\n   * focus is actually retained somewhere else. This comes in handy\n   * for components like autocomplete where focus must remain on the input.\n   */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * The displayed value of the option. It is necessary to show the selected option in the\n   * select's trigger.\n   */\n  get viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n\n  /** Selects the option. */\n  select(): void {\n    this._selected = true;\n    this._changeDetectorRef.markForCheck();\n    this._emitSelectionChangeEvent();\n  }\n\n  /** Deselects the option. */\n  deselect(): void {\n    this._selected = false;\n    this._changeDetectorRef.markForCheck();\n    this._emitSelectionChangeEvent();\n  }\n\n  /** Sets focus onto this option. */\n  focus(): void {\n    const element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus();\n    }\n  }\n\n  /**\n   * This method sets display styles on the option to make it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * This method removes display styles on the option that made it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    return this.viewValue;\n  }\n\n  /** Ensures the option is selected when activated from the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ENTER || event.keyCode === SPACE) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * `Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.`\n   */\n  _selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n\n  /** Returns the correct tabindex for the option depending on disabled state. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Gets the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  ngAfterViewChecked() {\n    // Since parent components could be using the option's label to display the selected values\n    // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n    // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n    // relatively cheap, however we still limit them only to selected options in order to avoid\n    // hitting the DOM too often.\n    if (this._selected) {\n      const viewValue = this.viewValue;\n\n      if (viewValue !== this._mostRecentViewValue) {\n        this._mostRecentViewValue = viewValue;\n        this._stateChanges.next();\n      }\n    }\n  }\n\n  /** Emits the selection change event. */\n  private _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n  }\n}\n\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nexport function _countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MatOption>,\n  optionGroups: QueryList<MatOptgroup>): number {\n\n  if (optionGroups.length) {\n    let optionsArray = options.toArray();\n    let groups = optionGroups.toArray();\n    let groupCounter = 0;\n\n    for (let i = 0; i < optionIndex + 1; i++) {\n      if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n        groupCounter++;\n      }\n    }\n\n    return groupCounter;\n  }\n\n  return 0;\n}\n\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionIndex Index of the option to be scrolled into the view.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nexport function _getOptionScrollPosition(optionIndex: number, optionHeight: number,\n    currentScrollPosition: number, panelHeight: number): number {\n  const optionOffset = optionIndex * optionHeight;\n\n  if (optionOffset < currentScrollPosition) {\n    return optionOffset;\n  }\n\n  if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n    return Math.max(0, optionOffset - panelHeight + optionHeight);\n  }\n\n  return currentScrollPosition;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatRippleModule} from '../ripple/index';\nimport {MatPseudoCheckboxModule} from '../selection/index';\nimport {MatOption} from './option';\nimport {MatOptgroup} from './optgroup';\n\n\n@NgModule({\n  imports: [MatRippleModule, CommonModule, MatPseudoCheckboxModule],\n  exports: [MatOption, MatOptgroup],\n  declarations: [MatOption, MatOptgroup]\n})\nexport class MatOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MAT_LABEL_GLOBAL_OPTIONS =\n  new InjectionToken<LabelOptions>('mat-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n  /**\n   * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n   * Default behavior is assumed to be `auto`.\n   */\n  float?: FloatLabelType;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Single error message to be shown underneath the form field. */\n@Directive({\n  selector: 'mat-error',\n  host: {\n    'class': 'mat-error',\n    'role': 'alert',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatError {\n  @Input() id: string = `mat-error-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the MatFormField. */\nexport const matFormFieldAnimations: {\n  readonly transitionMessages: AnimationTriggerMetadata\n} = {\n  /** Animation that transitions the form field's error and hint messages. */\n  transitionMessages: trigger('transitionMessages', [\n    // TODO(mmalerba): Use angular animations for label animation as well.\n    state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n    transition('void => enter', [\n      style({ opacity: 0, transform: 'translateY(-100%)' }),\n      animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n    ]),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs/Observable';\nimport {NgControl} from '@angular/forms';\n\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\nexport abstract class MatFormFieldControl<T> {\n  /** The value of the control. */\n  value: T | null;\n\n  /**\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n   * needs to run change detection.\n   */\n  readonly stateChanges: Observable<void>;\n\n  /** The element ID for this control. */\n  readonly id: string;\n\n  /** The placeholder for this control. */\n  readonly placeholder: string;\n\n  /** Gets the NgControl for this control. */\n  readonly ngControl: NgControl | null;\n\n  /** Whether the control is focused. */\n  readonly focused: boolean;\n\n  /** Whether the control is empty. */\n  readonly empty: boolean;\n\n  /** Whether the `MatFormField` label should try to float. */\n  readonly shouldLabelFloat?: boolean;\n\n  /**\n   * Whether the `MatFormField` placeholder should try to float.\n   * @deprecated Use `shouldLabelFloat` instead.\n   * @deletion-target 6.0.0\n   */\n  readonly shouldPlaceholderFloat?: boolean;\n\n  /** Whether the control is required. */\n  readonly required: boolean;\n\n  /** Whether the control is disabled. */\n  readonly disabled: boolean;\n\n  /** Whether the control is in an error state. */\n  readonly errorState: boolean;\n\n  /**\n   * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n   * based on their control type. The form field will add a class,\n   * `mat-form-field-type-{{controlType}}` to its root element.\n   */\n  readonly controlType?: string;\n\n  /**\n   * Whether the input is currently in an autofilled state. If property is not present on the\n   * control it is assumed to be false.\n   */\n  readonly autofilled?: boolean;\n\n  /** Sets the list of element IDs that currently describe this control. */\n  abstract setDescribedByIds(ids: string[]): void;\n\n  /** Handles a click on the control's container. */\n  abstract onContainerClick(event: MouseEvent): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Hint text to be shown underneath the form field control. */\n@Directive({\n  selector: 'mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  }\n})\nexport class MatHint {\n  /** Whether to align the hint label at the start or end of the line. */\n  @Input() align: 'start' | 'end' = 'start';\n\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n  @Input() id: string = `mat-hint-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The floating label for a `mat-form-field`. */\n@Directive({\n  selector: 'mat-label'\n})\nexport class MatLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The placeholder text for an `MatFormField`. */\n@Directive({\n  selector: 'mat-placeholder'\n})\nexport class MatPlaceholder {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Prefix to be placed the the front of the form field. */\n@Directive({\n  selector: '[matPrefix]',\n})\nexport class MatPrefix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Suffix to be placed at the end of the form field. */\n@Directive({\n  selector: '[matSuffix]',\n})\nexport class MatSuffix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  Input,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  FloatLabelType,\n  LabelOptions,\n  MAT_LABEL_GLOBAL_OPTIONS,\n  mixinColor,\n  ThemePalette\n} from '@angular/material/core';\nimport {fromEvent} from 'rxjs/observable/fromEvent';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {take} from 'rxjs/operators/take';\nimport {MatError} from './error';\nimport {matFormFieldAnimations} from './form-field-animations';\nimport {MatFormFieldControl} from './form-field-control';\nimport {\n  getMatFormFieldDuplicatedHintError,\n  getMatFormFieldMissingControlError,\n  getMatFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {Directionality} from '@angular/cdk/bidi';\n\n\nlet nextUniqueId = 0;\nconst floatingLabelScale = 0.75;\nconst outlineGapPadding = 5;\n\n\n// Boilerplate for applying mixins to MatFormField.\n/** @docs-private */\nexport class MatFormFieldBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n\nexport const _MatFormFieldMixinBase = mixinColor(MatFormFieldBase, 'primary');\n\n\nexport type MatFormFieldAppearance = 'legacy' | 'standard' | 'fill' | 'outline';\n\n\n/** Container for form controls that applies Material Design styling and behavior. */\n@Component({\n  moduleId: module.id,\n  // TODO(mmalerba): the input-container selectors and classes are deprecated and will be removed.\n  selector: 'mat-input-container, mat-form-field',\n  exportAs: 'matFormField',\n  templateUrl: 'form-field.html',\n  // MatInput is a directive and can't have styles, so we need to include its styles here.\n  // The MatInput styles are fairly minimal so it shouldn't be a big deal for people who\n  // aren't using MatInput.\n  styleUrls: [\n    'form-field.css',\n    'form-field-fill.css',\n    'form-field-legacy.css',\n    'form-field-outline.css',\n    'form-field-standard.css',\n    '../input/input.css',\n  ],\n  animations: [matFormFieldAnimations.transitionMessages],\n  host: {\n    'class': 'mat-input-container mat-form-field',\n    '[class.mat-form-field-appearance-standard]': 'appearance == \"standard\"',\n    '[class.mat-form-field-appearance-fill]': 'appearance == \"fill\"',\n    '[class.mat-form-field-appearance-outline]': 'appearance == \"outline\"',\n    '[class.mat-form-field-appearance-legacy]': 'appearance == \"legacy\"',\n    '[class.mat-input-invalid]': '_control.errorState',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-form-field-can-float]': '_canLabelFloat',\n    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n    '[class.mat-form-field-disabled]': '_control.disabled',\n    '[class.mat-form-field-autofilled]': '_control.autofilled',\n    '[class.mat-focused]': '_control.focused',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n  },\n  inputs: ['color'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class MatFormField extends _MatFormFieldMixinBase\n    implements AfterContentInit, AfterContentChecked, AfterViewInit, CanColor {\n  private _labelOptions: LabelOptions;\n\n  /** The form-field appearance style. */\n  @Input() appearance: MatFormFieldAppearance = 'legacy';\n\n  /**\n   * @deprecated Use `color` instead.\n   * @deletion-target 6.0.0\n   */\n  @Input()\n  get dividerColor(): ThemePalette { return this.color; }\n  set dividerColor(value: ThemePalette) { this.color = value; }\n\n  /** Whether the required marker should be hidden. */\n  @Input()\n  get hideRequiredMarker(): boolean { return this._hideRequiredMarker; }\n  set hideRequiredMarker(value: boolean) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\n  private _hideRequiredMarker: boolean;\n\n  /** Override for the logic that disables the label animation in certain cases. */\n  private _showAlwaysAnimate = false;\n\n  /** Whether the floating label should always float or not. */\n  get _shouldAlwaysFloat(): boolean {\n    return this.floatLabel === 'always' && !this._showAlwaysAnimate;\n  }\n\n  /** Whether the label can float or not. */\n  get _canLabelFloat(): boolean { return this.floatLabel !== 'never'; }\n\n  /** State of the mat-hint and mat-error animations. */\n  _subscriptAnimationState: string = '';\n\n  /** Text for the form field hint. */\n  @Input()\n  get hintLabel(): string { return this._hintLabel; }\n  set hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\n  private _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\n\n  /**\n   * Whether the placeholder should always float, never float or float as the user types.\n   * @deprecated Use floatLabel instead.\n   * @deletion-target 6.0.0\n   */\n  @Input()\n  get floatPlaceholder(): FloatLabelType { return this.floatLabel; }\n  set floatPlaceholder(value: FloatLabelType) { this.floatLabel = value; }\n\n  /**\n   * Whether the label should always float, never float or float as the user types.\n   *\n   * Note: only the legacy appearance supports the `never` option. `never` was originally added as a\n   * way to make the floating label emulate the behavior of a standard input placeholder. However\n   * the form field now supports both floating labels and placeholders. Therefore in the non-legacy\n   * appearances the `never` option has been disabled in favor of just using the placeholder.\n   */\n  @Input()\n  get floatLabel(): FloatLabelType {\n    return this.appearance !== 'legacy' && this._floatLabel === 'never' ? 'auto' : this._floatLabel;\n  }\n  set floatLabel(value: FloatLabelType) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value || this._labelOptions.float || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _floatLabel: FloatLabelType;\n\n  _outlineGapWidth = 0;\n\n  _outlineGapStart = 0;\n\n  /**\n   * @deprecated\n   * @deletion-target 7.0.0\n   */\n  @ViewChild('underline') underlineRef: ElementRef;\n\n  @ViewChild('connectionContainer') _connectionContainerRef: ElementRef;\n  @ViewChild('inputContainer') _inputContainerRef: ElementRef;\n  @ViewChild('label') private _label: ElementRef;\n  @ContentChild(MatFormFieldControl) _control: MatFormFieldControl<any>;\n  @ContentChild(MatPlaceholder) _placeholderChild: MatPlaceholder;\n  @ContentChild(MatLabel) _labelChild: MatLabel;\n  @ContentChildren(MatError) _errorChildren: QueryList<MatError>;\n  @ContentChildren(MatHint) _hintChildren: QueryList<MatHint>;\n  @ContentChildren(MatPrefix) _prefixChildren: QueryList<MatPrefix>;\n  @ContentChildren(MatSuffix) _suffixChildren: QueryList<MatSuffix>;\n\n  constructor(\n      public _elementRef: ElementRef,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Optional() @Inject(MAT_LABEL_GLOBAL_OPTIONS) labelOptions: LabelOptions,\n      @Optional() private _dir: Directionality) {\n    super(_elementRef);\n\n    this._labelOptions = labelOptions ? labelOptions : {};\n    this.floatLabel = this._labelOptions.float || 'auto';\n  }\n\n  /**\n   * Gets an ElementRef for the element that a overlay attached to the form-field should be\n   * positioned relative to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._connectionContainerRef || this._elementRef;\n  }\n\n  ngAfterContentInit() {\n    this._validateControlChild();\n    if (this._control.controlType) {\n      this._elementRef.nativeElement.classList\n          .add(`mat-form-field-type-${this._control.controlType}`);\n    }\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    this._control.stateChanges.pipe(startWith(null!)).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    let ngControl = this._control.ngControl;\n    if (ngControl && ngControl.valueChanges) {\n      ngControl.valueChanges.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n\n    // Re-validate when the number of hints changes.\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    Promise.resolve().then(() => {\n      this.updateOutlineGap();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngAfterContentChecked() {\n    this._validateControlChild();\n  }\n\n  ngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\n  _shouldForward(prop: string): boolean {\n    let ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && (ngControl as any)[prop];\n  }\n\n  _hasPlaceholder() {\n    return !!(this._control && this._control.placeholder || this._placeholderChild);\n  }\n\n  _hasLabel() {\n    return !!this._labelChild;\n  }\n\n  _shouldLabelFloat() {\n    return this._canLabelFloat && (this._control.shouldLabelFloat ||\n        this._control.shouldPlaceholderFloat || this._shouldAlwaysFloat);\n  }\n\n  _hideControlPlaceholder() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this.appearance === 'legacy' && !this._hasLabel() ||\n        this._hasLabel() && !this._shouldLabelFloat();\n  }\n\n  _hasFloatingLabel() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this._hasLabel() || this.appearance === 'legacy' && this._hasPlaceholder();\n  }\n\n  /** Determines whether to display hints or errors. */\n  _getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren && this._errorChildren.length > 0 &&\n        this._control.errorState) ? 'error' : 'hint';\n  }\n\n  /** Animates the placeholder up and locks it in position. */\n  _animateAndLockLabel(): void {\n    if (this._hasFloatingLabel() && this._canLabelFloat) {\n      this._showAlwaysAnimate = true;\n      this.floatLabel = 'always';\n\n      fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\n        this._showAlwaysAnimate = false;\n      });\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n   * or child element with the `mat-placeholder` directive).\n   */\n  private _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild) {\n      throw getMatFormFieldPlaceholderConflictError();\n    }\n  }\n\n  /** Does any extra processing that is required when handling the hints. */\n  private _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n\n  /**\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n   * attribute being considered as `align=\"start\"`.\n   */\n  private _validateHints() {\n    if (this._hintChildren) {\n      let startHint: MatHint;\n      let endHint: MatHint;\n      this._hintChildren.forEach((hint: MatHint) => {\n        if (hint.align === 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMatFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align === 'end') {\n          if (endHint) {\n            throw getMatFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n\n  /**\n   * Sets the list of element IDs that describe the child control. This allows the control to update\n   * its `aria-describedby` attribute accordingly.\n   */\n  private _syncDescribedByIds() {\n    if (this._control) {\n      let ids: string[] = [];\n\n      if (this._getDisplayedMessages() === 'hint') {\n        let startHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'start') : null;\n        let endHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids = this._errorChildren.map(error => error.id);\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n\n  /** Throws an error if the form field's control is missing. */\n  protected _validateControlChild() {\n    if (!this._control) {\n      throw getMatFormFieldMissingControlError();\n    }\n  }\n\n  /**\n   * Updates the width and position of the gap in the outline. Only relevant for the outline\n   * appearance.\n   */\n  updateOutlineGap() {\n    if (this.appearance === 'outline' && this._label && this._label.nativeElement.children.length) {\n      const containerStart = this._getStartEnd(\n          this._connectionContainerRef.nativeElement.getBoundingClientRect());\n      const labelStart = this._getStartEnd(\n          this._label.nativeElement.children[0].getBoundingClientRect());\n      let labelWidth = 0;\n      for (const child of this._label.nativeElement.children) {\n        labelWidth += child.offsetWidth;\n      }\n      this._outlineGapStart = labelStart - containerStart - outlineGapPadding;\n      this._outlineGapWidth = labelWidth * floatingLabelScale + outlineGapPadding * 2;\n    } else {\n      this._outlineGapStart = 0;\n      this._outlineGapWidth = 0;\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Gets the start end of the rect considering the current directionality. */\n  private _getStartEnd(rect: ClientRect): number {\n    return this._dir && this._dir.value === 'rtl' ? rect.right : rect.left;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatError} from './error';\nimport {MatFormField} from './form-field';\nimport {MatHint} from './hint';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {MatLabel} from './label';\n\n\n@NgModule({\n  declarations: [\n    MatError,\n    MatHint,\n    MatFormField,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n    MatLabel,\n  ],\n  imports: [\n    CommonModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatError,\n    MatHint,\n    MatFormField,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n    MatLabel,\n  ],\n})\nexport class MatFormFieldModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  ElementRef,\n  Input,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n  EventEmitter,\n  Output,\n  InjectionToken,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {\n  MatOption,\n  MatOptgroup,\n  MAT_OPTION_PARENT_COMPONENT,\n  mixinDisableRipple,\n  CanDisableRipple,\n} from '@angular/material/core';\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected. */\nexport class MatAutocompleteSelectedEvent {\n  constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    public source: MatAutocomplete,\n    /** Option that was selected. */\n    public option: MatOption) { }\n}\n\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nexport class MatAutocompleteBase {}\nexport const _MatAutocompleteMixinBase = mixinDisableRipple(MatAutocompleteBase);\n\n/** Default `mat-autocomplete` options that can be overridden. */\nexport interface MatAutocompleteDefaultOptions {\n  /** Whether the first option should be highlighted when an autocomplete panel is opened. */\n  autoActiveFirstOption?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nexport const MAT_AUTOCOMPLETE_DEFAULT_OPTIONS =\n    new InjectionToken<MatAutocompleteDefaultOptions>('mat-autocomplete-default-options');\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'matAutocomplete',\n  inputs: ['disableRipple'],\n  host: {\n    'class': 'mat-autocomplete'\n  },\n  providers: [\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete}\n  ]\n})\nexport class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit,\n  CanDisableRipple {\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel: boolean = false;\n\n  /** Whether the autocomplete panel is open. */\n  get isOpen(): boolean { return this._isOpen && this.showPanel; }\n  _isOpen: boolean = false;\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) template: TemplateRef<any>;\n\n  /** Element for the panel containing the autocomplete options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** @docs-private */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** @docs-private */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Function that maps an option's control value to its display value in the trigger. */\n  @Input() displayWith: ((value: any) => string) | null = null;\n\n  /**\n   * Whether the first option should be highlighted when the autocomplete panel is opened.\n   * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n   */\n  @Input()\n  get autoActiveFirstOption(): boolean { return this._autoActiveFirstOption; }\n  set autoActiveFirstOption(value: boolean) {\n    this._autoActiveFirstOption = coerceBooleanProperty(value);\n  }\n  private _autoActiveFirstOption: boolean;\n\n\n  /** Event that is emitted whenever an option from the list is selected. */\n  @Output() readonly optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\n      new EventEmitter<MatAutocompleteSelectedEvent>();\n\n  /** Event that is emitted when the autocomplete panel is opened. */\n  @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event that is emitted when the autocomplete panel is closed. */\n  @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  @Input('class')\n  set classList(value: string) {\n    if (value && value.length) {\n      value.split(' ').forEach(className => this._classList[className.trim()] = true);\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  _classList: {[key: string]: boolean} = {};\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _elementRef: ElementRef,\n\n    // @deletion-target Turn into required param in 6.0.0\n    @Optional() @Inject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS)\n        defaults?: MatAutocompleteDefaultOptions) {\n    super();\n\n    this._autoActiveFirstOption = defaults &&\n        typeof defaults.autoActiveFirstOption !== 'undefined' ?\n            defaults.autoActiveFirstOption :\n            false;\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\n    // Set the initial visibility state.\n    this._setVisibility();\n  }\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Returns the panel's scrollTop. */\n  _getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._classList['mat-autocomplete-visible'] = this.showPanel;\n    this._classList['mat-autocomplete-hidden'] = !this.showPanel;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits the `select` event. */\n  _emitSelectEvent(option: MatOption): void {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n}\n\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  /** Whether the component is disabled. */\n  disabled: boolean;\n}\n\n/** Mixin to augment a directive with a `disabled` property. */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): Constructor<CanDisable> & T {\n  return class extends base {\n    private _disabled: boolean = false;\n\n    get disabled() { return this._disabled; }\n    set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ElementRef} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  /** Theme color palette for the component. */\n  color: ThemePalette;\n}\n\n/** @docs-private */\nexport interface HasElementRef {\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values. */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(base: T,\n    defaultColor?: ThemePalette): Constructor<CanColor> & T {\n  return class extends base {\n    private _color: ThemePalette;\n\n    get color(): ThemePalette { return this._color; }\n    set color(value: ThemePalette) {\n      const colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisableRipple {\n  /** Whether ripples are disabled. */\n  disableRipple: boolean;\n}\n\n/** Mixin to augment a directive with a `disableRipple` property. */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T)\n    : Constructor<CanDisableRipple> & T {\n  return class extends base {\n    private _disableRipple: boolean = false;\n\n    /** Whether the ripple effect is disabled or not. */\n    get disableRipple() { return this._disableRipple; }\n    set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {CanDisable} from './disabled';\n\n/** @docs-private */\nexport interface HasTabIndex {\n  /** Tabindex of the component. */\n  tabIndex: number;\n}\n\n/** Mixin to augment a directive with a `tabIndex` property. */\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : Constructor<HasTabIndex> & T {\n  return class extends base {\n    private _tabIndex: number = defaultTabIndex;\n\n    get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n    set tabIndex(value: number) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? value : defaultTabIndex;\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ErrorStateMatcher} from '../error/error-options';\nimport {FormControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {Subject} from 'rxjs/Subject';\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n  updateErrorState();\n  readonly stateChanges: Subject<void>;\n  errorState: boolean;\n  errorStateMatcher: ErrorStateMatcher;\n}\n\n/** @docs-private */\nexport interface HasErrorState {\n  _parentFormGroup: FormGroupDirective;\n  _parentForm: NgForm;\n  _defaultErrorStateMatcher: ErrorStateMatcher;\n  ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n: Constructor<CanUpdateErrorState> & T {\n  return class extends base {\n    /** Whether the component is in an error state. */\n    errorState: boolean = false;\n\n    /**\n     * Stream that emits whenever the state of the input changes such that the wrapping\n     * `MatFormField` needs to run change detection.\n     */\n    readonly stateChanges = new Subject<void>();\n\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState() {\n      const oldState = this.errorState;\n      const parent = this._parentFormGroup || this._parentForm;\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n      const control = this.ngControl ? this.ngControl.control as FormControl : null;\n      const newState = matcher.isErrorState(control, parent);\n\n      if (newState !== oldState) {\n        this.errorState = newState;\n        this.stateChanges.next();\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {Observable} from 'rxjs/Observable';\nimport {Subscriber} from 'rxjs/Subscriber';\n\n/**\n * Mixin that adds an initialized property to a directive which, when subscribed to, will emit a\n * value once markInitialized has been called, which should be done during the ngOnInit function.\n * If the subscription is made after it has already been marked as initialized, then it will trigger\n * an emit immediately.\n * @docs-private\n */\nexport interface HasInitialized {\n  /** Stream that emits once during the directive/component's ngOnInit. */\n  initialized: Observable<void>;\n\n  /**\n   * Sets the state as initialized and must be called during ngOnInit to notify subscribers that\n   * the directive has been initialized.\n   * @docs-private\n   */\n  _markInitialized: () => void;\n}\n\n/** Mixin to augment a directive with an initialized property that will emits when ngOnInit ends. */\nexport function mixinInitialized<T extends Constructor<{}>>(base: T):\n    Constructor<HasInitialized> & T {\n  return class extends base {\n    /** Whether this directive has been marked as initialized. */\n    _isInitialized = false;\n\n    /**\n     * List of subscribers that subscribed before the directive was initialized. Should be notified\n     * during _markInitialized. Set to null after pending subscribers are notified, and should\n     * not expect to be populated after.\n     */\n    _pendingSubscribers: Subscriber<void>[] | null = [];\n\n    /**\n     * Observable stream that emits when the directive initializes. If already initialized, the\n     * subscriber is stored to be notified once _markInitialized is called.\n     */\n    initialized = new Observable<void>(subscriber => {\n      // If initialized, immediately notify the subscriber. Otherwise store the subscriber to notify\n      // when _markInitialized is called.\n      if (this._isInitialized) {\n        this._notifySubscriber(subscriber);\n      } else {\n        this._pendingSubscribers!.push(subscriber);\n      }\n    });\n\n    constructor(...args: any[]) { super(...args); }\n\n    /**\n     * Marks the state as initialized and notifies pending subscribers. Should be called at the end\n     * of ngOnInit.\n     * @docs-private\n     */\n    _markInitialized(): void {\n      if (this._isInitialized) {\n        throw Error('This directive has already been marked as initialized and ' +\n            'should not be called twice.');\n      }\n\n      this._isInitialized = true;\n\n      this._pendingSubscribers!.forEach(this._notifySubscriber);\n      this._pendingSubscribers = null;\n    }\n\n    /** Emits and completes the subscriber stream (should only emit once). */\n    _notifySubscriber(subscriber: Subscriber<void>): void {\n      subscriber.next();\n      subscriber.complete();\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\n\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/** Whether the browser supports the Intl API. */\nconst SUPPORTS_INTL_API = typeof Intl != 'undefined';\n\n\n/** The default month names to use if Intl API is not available. */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n\n\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n\n\n/** The default day of the week names to use if Intl API is not available. */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\n@Injectable()\nexport class NativeDateAdapter extends DateAdapter<Date> {\n  /** Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors. */\n  private readonly _clampDate: boolean;\n\n  /**\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n   * will produce `'8/13/1800'`.\n   */\n  useUtcForDisplay: boolean = true;\n\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string, platform: Platform) {\n    super();\n    super.setLocale(matDateLocale);\n\n    // IE does its own time zone correction, so we disable this on IE.\n    this.useUtcForDisplay = !platform.TRIDENT;\n    this._clampDate = platform.TRIDENT || platform.EDGE;\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      let dtf = new Intl.DateTimeFormat(this.locale, {month: style});\n      return range(12, i => this._stripDirectionalityCharacters(dtf.format(new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n\n  getDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      let dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          dtf.format(new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      let dtf = new Intl.DateTimeFormat(this.locale, {weekday: style});\n      return range(7, i => this._stripDirectionalityCharacters(\n          dtf.format(new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n\n  getYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      let dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric'});\n      return this._stripDirectionalityCharacters(dtf.format(date));\n    }\n    return String(this.getYear(date));\n  }\n\n  getFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n\n  clone(date: Date): Date {\n    return this.createDate(this.getYear(date), this.getMonth(date), this.getDate(date));\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let result = this._createDateWithOverflow(year, month, date);\n\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n\n    if (SUPPORTS_INTL_API) {\n      // On IE and Edge the i18n API will throw a hard error that can crash the entire app\n      // if we attempt to format a date whose year is less than 1 or greater than 9999.\n      if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\n        date = this.clone(date);\n        date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\n      }\n\n      if (this.useUtcForDisplay) {\n        date = new Date(Date.UTC(\n            date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n            date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n        displayFormat = {...displayFormat, timeZone: 'utc'};\n      }\n\n      const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(dtf.format(date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n\n  toIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number) {\n    let result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n   * other browsers do not. We remove them to make output consistent and because they interfere with\n   * date parsing.\n   * @param str The string to strip direction characters from.\n   * @returns The stripped string.\n   */\n  private _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform, supportsPassiveEventListeners} from '@angular/cdk/platform';\nimport {RippleRef, RippleState} from './ripple-ref';\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  persistent?: boolean;\n  animation?: RippleAnimationConfig;\n  terminateOnPointerUp?: boolean;\n  /**\n   * @deprecated Use the `animation` property instead.\n   * @deletion-target 7.0.0\n   */\n  speedFactor?: number;\n};\n\n/**\n * Interface that describes the configuration for the animation of a ripple.\n * There are two animation phases with different durations for the ripples.\n */\nexport interface RippleAnimationConfig {\n  /** Duration in milliseconds for the enter animation (expansion from point of contact). */\n  enterDuration?: number;\n  /** Duration in milliseconds for the exit animation (fade-out). */\n  exitDuration?: number;\n}\n\n/**\n * Interface that describes the target for launching ripples.\n * It defines the ripple configuration and disabled state for interaction ripples.\n * @docs-private\n */\nexport interface RippleTarget {\n  /** Configuration for ripples that are launched on pointer down. */\n  rippleConfig: RippleConfig;\n  /** Whether ripples on pointer down should be disabled. */\n  rippleDisabled: boolean;\n}\n\n/**\n * Default ripple animation configuration for ripples without an explicit\n * animation config specified.\n */\nexport const defaultRippleAnimationConfig = {\n  enterDuration: 450,\n  exitDuration: 400\n};\n\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst ignoreMouseEventsTimeout = 800;\n\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nexport class RippleRenderer {\n\n  /** Element where the ripples are being added to. */\n  private _containerElement: HTMLElement;\n\n  /** Element which triggers the ripple elements on mouse events. */\n  private _triggerElement: HTMLElement | null;\n\n  /** Whether the pointer is currently down or not. */\n  private _isPointerDown = false;\n\n  /** Events to be registered on the trigger element. */\n  private _triggerEvents = new Map<string, any>();\n\n  /** Set of currently active ripple references. */\n  private _activeRipples = new Set<RippleRef>();\n\n  /** Time in milliseconds when the last touchstart event happened. */\n  private _lastTouchStartEvent: number;\n\n  /** Options that apply to all the event listeners that are bound by the renderer. */\n  private _eventOptions = supportsPassiveEventListeners() ? ({passive: true} as any) : false;\n\n  constructor(private _target: RippleTarget,\n              private _ngZone: NgZone,\n              elementRef: ElementRef,\n              platform: Platform) {\n\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement;\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents.set('mousedown', this.onMousedown);\n      this._triggerEvents.set('mouseup', this.onPointerUp);\n      this._triggerEvents.set('mouseleave', this.onPointerUp);\n\n      this._triggerEvents.set('touchstart', this.onTouchStart);\n      this._triggerEvents.set('touchend', this.onPointerUp);\n    }\n  }\n\n  /**\n   * Fades in a ripple at the given coordinates.\n   * @param x Coordinate within the element, along the X axis at which to start the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n   * @param config Extra ripple options.\n   */\n  fadeInRipple(x: number, y: number, config: RippleConfig = {}): RippleRef {\n    const containerRect = this._containerElement.getBoundingClientRect();\n    const animationConfig = {...defaultRippleAnimationConfig, ...config.animation};\n\n    if (config.centered) {\n      x = containerRect.left + containerRect.width / 2;\n      y = containerRect.top + containerRect.height / 2;\n    }\n\n    const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n    const offsetX = x - containerRect.left;\n    const offsetY = y - containerRect.top;\n    const duration = animationConfig.enterDuration / (config.speedFactor || 1);\n\n    const ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color || null;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    const rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.VISIBLE;\n\n      if (!config.persistent && !this._isPointerDown) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n\n  /** Fades out a ripple reference. */\n  fadeOutRipple(rippleRef: RippleRef) {\n    // For ripples that are not active anymore, don't re-un the fade-out animation.\n    if (!this._activeRipples.delete(rippleRef)) {\n      return;\n    }\n\n    const rippleEl = rippleRef.element;\n    const animationConfig = {...defaultRippleAnimationConfig, ...rippleRef.config.animation};\n\n    rippleEl.style.transitionDuration = `${animationConfig.exitDuration}ms`;\n    rippleEl.style.opacity = '0';\n\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN;\n      rippleEl.parentNode!.removeChild(rippleEl);\n    }, animationConfig.exitDuration);\n  }\n\n  /** Fades out all currently active ripples. */\n  fadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n\n  /** Sets up the trigger event listeners */\n  setupTriggerEvents(element: HTMLElement) {\n    if (!element || element === this._triggerElement) {\n      return;\n    }\n\n    // Remove all previously registered event listeners from the trigger element.\n    this._removeTriggerEvents();\n\n    this._ngZone.runOutsideAngular(() => {\n      this._triggerEvents.forEach((fn, type) =>\n          element.addEventListener(type, fn, this._eventOptions));\n    });\n\n    this._triggerElement = element;\n  }\n\n  /** Function being called whenever the trigger is being pressed using mouse. */\n  private onMousedown = (event: MouseEvent) => {\n    const isSyntheticEvent = this._lastTouchStartEvent &&\n        Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;\n\n    if (!this._target.rippleDisabled && !isSyntheticEvent) {\n      this._isPointerDown = true;\n      this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being pressed using touch. */\n  private onTouchStart = (event: TouchEvent) => {\n    if (!this._target.rippleDisabled) {\n      // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n      // events will launch a second ripple if we don't ignore mouse events for a specific\n      // time after a touchstart event.\n      this._lastTouchStartEvent = Date.now();\n      this._isPointerDown = true;\n\n      this.fadeInRipple(\n          event.touches[0].clientX, event.touches[0].clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being released. */\n  private onPointerUp = () => {\n    if (!this._isPointerDown) {\n      return;\n    }\n\n    this._isPointerDown = false;\n\n    // Fade-out all ripples that are visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      // By default, only ripples that are completely visible will fade out on pointer release.\n      // If the `terminateOnPointerUp` option is set, ripples that still fade in will also fade out.\n      const isVisible = ripple.state === RippleState.VISIBLE ||\n        ripple.config.terminateOnPointerUp && ripple.state === RippleState.FADING_IN;\n\n      if (!ripple.config.persistent && isVisible) {\n        ripple.fadeOut();\n      }\n    });\n  }\n\n  /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */\n  private runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n  /** Removes previously registered event listeners from the trigger element. */\n  _removeTriggerEvents() {\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => {\n        this._triggerElement!.removeEventListener(type, fn, this._eventOptions);\n      });\n    }\n  }\n}\n\n/** Enforces a style recalculation of a DOM element by computing its styles. */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatFormFieldPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n\n/** @docs-private */\nexport function getMatFormFieldDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n\n/** @docs-private */\nexport function getMatFormFieldMissingControlError(): Error {\n  return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatInputUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Converts values into strings. Falsy values become empty strings.\n * @docs-private\n */\nexport function coerceToString(value: string | number): string {\n  return `${value || ''}`;\n}\n\n/**\n * Converts a value that might be a string into a number.\n * @docs-private\n */\nexport function coerceToNumber(value: string | number): number {\n  return typeof value === 'string' ? parseInt(value, 10) : value;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nexport function throwMatMenuMissingError() {\n  throw Error(`mat-menu-trigger: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionX() {\n  throw Error(`x-position value must be either 'before' or after'.\n      Example: <mat-menu x-position=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionY() {\n  throw Error(`y-position value must be either 'above' or below'.\n      Example: <mat-menu y-position=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getSortDuplicateSortableIdError(id: string): Error {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n\n/** @docs-private */\nexport function getSortHeaderNotContainedWithinSortError(): Error {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n\n/** @docs-private */\nexport function getSortHeaderMissingIdError(): Error {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n\n/** @docs-private */\nexport function getSortInvalidDirectionError(direction: string): Error {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\n\n/** @docs-private */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode} from '@angular/core';\nimport {BidiModule} from '@angular/cdk/bidi';\n\n\n/** Injection token that configures whether the Material sanity checks are enabled. */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('mat-sanity-checks');\n\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n  imports: [BidiModule],\n  exports: [BidiModule],\n  providers: [{\n    provide: MATERIAL_SANITY_CHECKS, useValue: true,\n  }],\n})\nexport class MatCommonModule {\n  /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n  private _hasDoneGlobalChecks = false;\n\n  /** Whether we've already checked for HammerJs availability. */\n  private _hasCheckedHammer = false;\n\n  /** Reference to the global `document` object. */\n  private _document = typeof document === 'object' && document ? document : null;\n\n  /** Reference to the global 'window' object. */\n  private _window = typeof window === 'object' && window ? window : null;\n\n  constructor(@Optional() @Inject(MATERIAL_SANITY_CHECKS) private _sanityChecksEnabled: boolean) {\n    if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n      this._checkDoctypeIsDefined();\n      this._checkThemeIsPresent();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n\n  /** Whether any sanity checks are enabled */\n  private _areChecksEnabled(): boolean {\n    return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n  }\n\n  /** Whether the code is running in tests. */\n  private _isTestEnv() {\n    return this._window && (this._window['__karma__'] || this._window['jasmine']);\n  }\n\n  private _checkDoctypeIsDefined(): void {\n    if (this._document && !this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n\n  private _checkThemeIsPresent(): void {\n    if (this._document && typeof getComputedStyle === 'function') {\n      const testElement = this._document.createElement('div');\n\n      testElement.classList.add('mat-theme-loaded-marker');\n      this._document.body.appendChild(testElement);\n\n      const computedStyle = getComputedStyle(testElement);\n\n      // In some situations, the computed style of the test element can be null. For example in\n      // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n      // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n      if (computedStyle && computedStyle.display !== 'none') {\n        console.warn(\n          'Could not find Angular Material core theme. Most Material ' +\n          'components may not work as expected. For more info refer ' +\n          'to the theming guide: https://material.angular.io/guide/theming'\n        );\n      }\n\n      this._document.body.removeChild(testElement);\n    }\n  }\n\n  /** Checks whether HammerJS is available. */\n  _checkHammerIsAvailable(): void {\n    if (this._hasCheckedHammer || !this._window) {\n      return;\n    }\n\n    if (this._areChecksEnabled() && !this._window['Hammer']) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material components may not work correctly.');\n    }\n    this._hasCheckedHammer = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\n\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE');\n\n/** Provider for MAT_DATE_LOCALE injection token. */\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\n\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nexport abstract class DateAdapter<D> {\n  /** The locale to use for all dates. */\n  protected locale: any;\n\n  /** A stream that emits when the locale changes. */\n  get localeChanges(): Observable<void> { return this._localeChanges; }\n  protected _localeChanges = new Subject<void>();\n\n  /**\n   * Gets the year component of the given date.\n   * @param date The date to extract the year from.\n   * @returns The year component.\n   */\n  abstract getYear(date: D): number;\n\n  /**\n   * Gets the month component of the given date.\n   * @param date The date to extract the month from.\n   * @returns The month component (0-indexed, 0 = January).\n   */\n  abstract getMonth(date: D): number;\n\n  /**\n   * Gets the date of the month component of the given date.\n   * @param date The date to extract the date of the month from.\n   * @returns The month component (1-indexed, 1 = first of month).\n   */\n  abstract getDate(date: D): number;\n\n  /**\n   * Gets the day of the week component of the given date.\n   * @param date The date to extract the day of the week from.\n   * @returns The month component (0-indexed, 0 = Sunday).\n   */\n  abstract getDayOfWeek(date: D): number;\n\n  /**\n   * Gets a list of names for the months.\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n   * @returns An ordered list of all month names, starting with January.\n   */\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets a list of names for the dates of the month.\n   * @returns An ordered list of all date of the month names, starting with '1'.\n   */\n  abstract getDateNames(): string[];\n\n  /**\n   * Gets a list of names for the days of the week.\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n   * @returns An ordered list of all weekday names, starting with Sunday.\n   */\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets the name for the year of the given date.\n   * @param date The date to get the year name for.\n   * @returns The name of the given year (e.g. '2017').\n   */\n  abstract getYearName(date: D): string;\n\n  /**\n   * Gets the first day of the week.\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\n   */\n  abstract getFirstDayOfWeek(): number;\n\n  /**\n   * Gets the number of days in the month of the given date.\n   * @param date The date whose month should be checked.\n   * @returns The number of days in the month of the given date.\n   */\n  abstract getNumDaysInMonth(date: D): number;\n\n  /**\n   * Clones the given date.\n   * @param date The date to clone\n   * @returns A new date equal to the given date.\n   */\n  abstract clone(date: D): D;\n\n  /**\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n   * month and date.\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n   * @returns The new date, or null if invalid.\n   */\n  abstract createDate(year: number, month: number, date: number): D;\n\n  /**\n   * Gets today's date.\n   * @returns Today's date.\n   */\n  abstract today(): D;\n\n  /**\n   * Parses a date from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   * @returns The parsed date.\n   */\n  abstract parse(value: any, parseFormat: any): D | null;\n\n  /**\n   * Formats a date as a string according to the given format.\n   * @param date The value to format.\n   * @param displayFormat The format to use to display the date as a string.\n   * @returns The formatted date string.\n   */\n  abstract format(date: D, displayFormat: any): string;\n\n  /**\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n   * calendar for each year and then finding the closest date in the new month. For example when\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n   * @param date The date to add years to.\n   * @param years The number of years to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of years added.\n   */\n  abstract addCalendarYears(date: D, years: number): D;\n\n  /**\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\n   * calendar for each month and then finding the closest date in the new month. For example when\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n   * @param date The date to add months to.\n   * @param months The number of months to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of months added.\n   */\n  abstract addCalendarMonths(date: D, months: number): D;\n\n  /**\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\n   * calendar for each day.\n   * @param date The date to add days to.\n   * @param days The number of days to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of days added.\n   */\n  abstract addCalendarDays(date: D, days: number): D;\n\n  /**\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n   * This method is used to generate date strings that are compatible with native HTML attributes\n   * such as the `min` or `max` attribute of an `<input>`.\n   * @param date The date to get the ISO date string for.\n   * @returns The ISO date string date string.\n   */\n  abstract toIso8601(date: D): string;\n\n  /**\n   * Checks whether the given object is considered a date instance by this DateAdapter.\n   * @param obj The object to check\n   * @returns Whether the object is a date instance.\n   */\n  abstract isDateInstance(obj: any): boolean;\n\n  /**\n   * Checks whether the given date is valid.\n   * @param date The date to check.\n   * @returns Whether the date is valid.\n   */\n  abstract isValid(date: D): boolean;\n\n  /**\n   * Gets date instance that is not valid.\n   * @returns An invalid date.\n   */\n  abstract invalid(): D;\n\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of it's `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value: any): D | null {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n    return this.invalid();\n  }\n\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale: any) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first: D | null, second: D | null): boolean {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\nexport type MatDateFormats = {\n  parse: {\n    dateInput: any\n  },\n  display: {\n    dateInput: any,\n    monthYearLabel: any,\n    dateA11yLabel: any,\n    monthYearA11yLabel: any,\n  }\n};\n\n\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatDateFormats} from './date-formats';\n\n\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE_PROVIDER} from './date-adapter';\nimport {MAT_DATE_FORMATS} from './date-formats';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport * from './date-adapter';\nexport * from './date-formats';\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\n\n\n@NgModule({\n  imports: [PlatformModule],\n  providers: [\n    {provide: DateAdapter, useClass: NativeDateAdapter},\n    MAT_DATE_LOCALE_PROVIDER\n  ],\n})\nexport class NativeDateModule {}\n\n\n@NgModule({\n  imports: [NativeDateModule],\n  providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS}],\n})\nexport class MatNativeDateModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {FormGroupDirective, NgForm, FormControl} from '@angular/forms';\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n  }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable()\nexport class ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken, Inject, Optional} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {\n  HammerStatic,\n  HammerInstance,\n  Recognizer,\n  RecognizerStatic,\n  HammerOptions,\n} from './gesture-annotations';\n\n/**\n * Injection token that can be used to provide options to the Hammerjs instance.\n * More info at http://hammerjs.github.io/api/.\n */\nexport const MAT_HAMMER_OPTIONS = new InjectionToken<HammerOptions>('MAT_HAMMER_OPTIONS');\n\n/** Adjusts configuration of our gesture library, Hammer. */\n@Injectable()\nexport class GestureConfig extends HammerGestureConfig {\n  private _hammer: HammerStatic = typeof window !== 'undefined' ? (window as any).Hammer : null;\n\n  /** List of new event names to add to the gesture support list */\n  events: string[] = this._hammer ? [\n    'longpress',\n    'slide',\n    'slidestart',\n    'slideend',\n    'slideright',\n    'slideleft'\n  ] : [];\n\n  constructor(\n    @Optional() @Inject(MAT_HAMMER_OPTIONS) private _hammerOptions?: HammerOptions,\n    @Optional() commonModule?: MatCommonModule) {\n    super();\n    if (commonModule) {\n      commonModule._checkHammerIsAvailable();\n    }\n  }\n\n  /**\n   * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n   *\n   * Our gesture names come from the Material Design gestures spec:\n   * https://www.google.com/design/spec/patterns/gestures.html#gestures-touch-mechanics\n   *\n   * More information on default recognizers can be found in Hammer docs:\n   * http://hammerjs.github.io/recognizer-pan/\n   * http://hammerjs.github.io/recognizer-press/\n   *\n   * @param element Element to which to assign the new HammerJS gestures.\n   * @returns Newly-created HammerJS instance.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const mc = new this._hammer(element, this._hammerOptions || undefined);\n\n    // Default Hammer Recognizers.\n    const pan = new this._hammer.Pan();\n    const swipe = new this._hammer.Swipe();\n    const press = new this._hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    const slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    const longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return mc as HammerInstance;\n  }\n\n  /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\n  private _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let recognizer = new (base.constructor as RecognizerStatic)(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  NgModule,\n  Directive,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {MatCommonModule} from '../common-behaviors/common-module';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n  selector: '[mat-line], [matLine]',\n  host: {'class': 'mat-line'}\n})\nexport class MatLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport class MatLineSetter {\n  constructor(private _lines: QueryList<MatLine>, private _element: ElementRef) {\n    this._setLineClass(this._lines.length);\n\n    this._lines.changes.subscribe(() => {\n      this._setLineClass(this._lines.length);\n    });\n  }\n\n  private _setLineClass(count: number): void {\n    this._resetClasses();\n    if (count === 2 || count === 3) {\n      this._setClass(`mat-${count}-line`, true);\n    } else if (count > 3) {\n      this._setClass(`mat-multi-line`, true);\n    }\n  }\n\n  private _resetClasses(): void {\n    this._setClass('mat-2-line', false);\n    this._setClass('mat-3-line', false);\n    this._setClass('mat-multi-line', false);\n  }\n\n  private _setClass(className: string, isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add(className);\n    } else {\n      this._element.nativeElement.classList.remove(className);\n    }\n  }\n\n}\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatLine, MatCommonModule],\n  declarations: [MatLine],\n})\nexport class MatLineModule { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\n\n/** Possible states for a ripple element. */\nexport enum RippleState {\n  FADING_IN, VISIBLE, FADING_OUT, HIDDEN\n}\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n\n  /** Current state of the ripple reference. */\n  state: RippleState = RippleState.HIDDEN;\n\n  constructor(\n    private _renderer: RippleRenderer,\n    public element: HTMLElement,\n    public config: RippleConfig) {\n  }\n\n  /** Fades out the ripple element. */\n  fadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n} from '@angular/core';\nimport {RippleRef} from './ripple-ref';\nimport {RippleAnimationConfig, RippleConfig, RippleRenderer, RippleTarget} from './ripple-renderer';\n\n/** Configurable options for `matRipple`. */\nexport interface RippleGlobalOptions {\n  /**\n   * Whether ripples should be disabled. Ripples can be still launched manually by using\n   * the `launch()` method. Therefore focus indicators will still show up.\n   */\n  disabled?: boolean;\n\n  /**\n   * Configuration for the animation duration of the ripples.\n   * There are two phases with different durations for the ripples.\n   */\n  animation?: RippleAnimationConfig;\n\n  /**\n   * If set, the default duration of the fade-in animation is divided by this value. For example,\n   * setting it to 0.5 will cause the ripple fade-in animation to take twice as long.\n   * A changed speedFactor will not affect the fade-out duration of the ripples.\n   * @deprecated Use the `animation` global option instead.\n   * @deletion-target 7.0.0\n   */\n  baseSpeedFactor?: number;\n\n  /**\n   * Whether ripples should start fading out immediately after the mouse our touch is released. By\n   * default, ripples will wait for the enter animation to complete and for mouse or touch release.\n   */\n  terminateOnPointerUp?: boolean;\n}\n\n/** Injection token that can be used to specify the global ripple options. */\nexport const MAT_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('mat-ripple-global-options');\n\n@Directive({\n  selector: '[mat-ripple], [matRipple]',\n  exportAs: 'matRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n})\nexport class MatRipple implements OnInit, OnDestroy, RippleTarget {\n\n  /** Custom color for all ripples. */\n  @Input('matRippleColor') color: string;\n\n  /** Whether the ripples should be visible outside the component's bounds. */\n  @Input('matRippleUnbounded') unbounded: boolean;\n\n  /**\n   * Whether the ripple always originates from the center of the host element's bounds, rather\n   * than originating from the location of the click event.\n   */\n  @Input('matRippleCentered') centered: boolean;\n\n  /**\n   * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n   * will be the distance from the center of the ripple to the furthest corner of the host element's\n   * bounding rectangle.\n   */\n  @Input('matRippleRadius') radius: number = 0;\n\n  /**\n   * If set, the normal duration of ripple animations is divided by this value. For example,\n   * setting it to 0.5 will cause the animations to take twice as long.\n   * A changed speedFactor will not modify the fade-out duration of the ripples.\n   * @deprecated Use the [matRippleAnimation] binding instead.\n   * @deletion-target 7.0.0\n   */\n  @Input('matRippleSpeedFactor') speedFactor: number = 1;\n\n  /**\n   * Configuration for the ripple animation. Allows modifying the enter and exit animation\n   * duration of the ripples.\n   */\n  @Input('matRippleAnimation') animation: RippleAnimationConfig;\n\n  /**\n   * Whether click events will not trigger the ripple. Ripples can be still launched manually\n   * by using the `launch()` method.\n   */\n  @Input('matRippleDisabled')\n  get disabled() { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = value;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * The element that triggers the ripple when click events are received.\n   * Defaults to the directive's host element.\n   */\n  @Input('matRippleTrigger')\n  get trigger() { return this._trigger || this._elementRef.nativeElement; }\n  set trigger(trigger: HTMLElement) {\n    this._trigger = trigger;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _trigger: HTMLElement;\n\n  /** Renderer for the ripple DOM manipulations. */\n  private _rippleRenderer: RippleRenderer;\n\n  /** Options that are set globally for all ripples. */\n  private _globalOptions: RippleGlobalOptions;\n\n  /** Whether ripple directive is initialized and the input bindings are set. */\n  private _isInitialized: boolean = false;\n\n  constructor(private _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions) {\n\n    this._globalOptions = globalOptions || {};\n    this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n    this._setupTriggerEventsIfEnabled();\n  }\n\n  ngOnDestroy() {\n    this._rippleRenderer._removeTriggerEvents();\n  }\n\n  /** Fades out all currently showing ripple elements. */\n  fadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n\n  /** Ripple configuration from the directive's input values. */\n  get rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      radius: this.radius,\n      color: this.color,\n      animation: {...this._globalOptions.animation, ...this.animation},\n      terminateOnPointerUp: this._globalOptions.terminateOnPointerUp,\n      speedFactor: this.speedFactor * (this._globalOptions.baseSpeedFactor || 1),\n    };\n  }\n\n  /** Whether ripples on pointer-down are disabled or not. */\n  get rippleDisabled(): boolean {\n    return this.disabled || !!this._globalOptions.disabled;\n  }\n\n  /** Sets up the the trigger event listeners if ripples are enabled. */\n  private _setupTriggerEventsIfEnabled() {\n    if (!this.disabled && this._isInitialized) {\n      this._rippleRenderer.setupTriggerEvents(this.trigger);\n    }\n  }\n\n  /**\n   * Launches a manual ripple using the specified ripple configuration.\n   * @param config Configuration for the manual ripple.\n   */\n  launch(config: RippleConfig): RippleRef;\n\n  /**\n   * Launches a manual ripple at the specified coordinates within the element.\n   * @param x Coordinate within the element, along the X axis at which to fade-in the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to fade-in the ripple.\n   * @param config Optional ripple configuration for the manual ripple.\n   */\n  launch(x: number, y: number, config?: RippleConfig): RippleRef;\n\n  /** Launches a manual ripple at the specified coordinated or just by the ripple config. */\n  launch(configOrX: number | RippleConfig, y: number = 0, config?: RippleConfig): RippleRef {\n    if (typeof configOrX === 'number') {\n      return this._rippleRenderer.fadeInRipple(configOrX, y, {...this.rippleConfig, ...config});\n    } else {\n      return this._rippleRenderer.fadeInRipple(0, 0, {...this.rippleConfig, ...configOrX});\n    }\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {MatRipple} from './ripple';\n\nexport * from './ripple';\nexport * from './ripple-ref';\nexport * from './ripple-renderer';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatRipple, MatCommonModule],\n  declarations: [MatRipple],\n})\nexport class MatRippleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\n\nexport type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n  },\n})\nexport class MatPseudoCheckbox {\n  /** Display state of the checkbox. */\n  @Input() state: MatPseudoCheckboxState = 'unchecked';\n\n  /** Whether the checkbox is disabled. */\n  @Input() disabled: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n  exports: [MatPseudoCheckbox],\n  declarations: [MatPseudoCheckbox]\n})\nexport class MatPseudoCheckboxModule { }\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\nimport {mixinDisabled, CanDisable} from '../common-behaviors/disabled';\n\n// Boilerplate for applying mixins to MatOptgroup.\n/** @docs-private */\nexport class MatOptgroupBase { }\nexport const _MatOptgroupMixinBase = mixinDisabled(MatOptgroupBase);\n\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mat-option`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-optgroup',\n  exportAs: 'matOptgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  styleUrls: ['optgroup.css'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n})\nexport class MatOptgroup extends _MatOptgroupMixinBase implements CanDisable {\n  /** Label for the option group. */\n  @Input() label: string;\n\n  /** Unique id for the underlying label. */\n  _labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n}\n"],"names":["_this","_elementRef","_changeDetectorRef","_viewportRuler","_dir","_focusIndex","_scrollDistance","_selectedIndexChanged","_realignInkBar","Subscription","EMPTY","_showPaginationControls","_disableScrollAfter","_disableScrollBefore","_selectedIndex","selectFocusedIndex","EventEmitter","indexFocused","tslib_1.__extends","MatTabHeader","_super","Object","defineProperty","prototype","this","value","coerceNumberProperty","ngAfterContentChecked","_tabLabelCount","_labelWrappers","length","_updatePagination","markForCheck","_scrollToLabel","_checkScrollingControls","_alignInkBarToSelectedTab","_scrollDistanceChanged","_updateTabScrollPosition","_handleKeydown","event","keyCode","RIGHT_ARROW","_focusNextTab","LEFT_ARROW","_focusPreviousTab","HOME","_focusFirstTab","preventDefault","END","_focusLastTab","ENTER","SPACE","emit","focusIndex","ngAfterContentInit","dirChange","change","observableOf","resize","realign","requestAnimationFrame","merge","subscribe","ngOnDestroy","unsubscribe","_onContentChanges","_checkPaginationEnabled","_isValidIndex","_setTabFocus","index","tab","toArray","disabled","tabIndex","focus","containerEl","_tabListContainer","nativeElement","dir","_getLayoutDirection","scrollLeft","scrollWidth","offsetWidth","_moveFocus","offset","tabs","i","scrollDistance","translateX","_tabList","style","transform","v","Math","max","min","_getMaxScrollDistance","_scrollHeader","scrollDir","viewLength","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","getOffsetLeft","getOffsetWidth","beforeVisiblePos","afterVisiblePos","isEnabled","selectedLabelWrapper","selectedIndex","elementRef","_inkBar","alignToElement","type","Component","args","selector","template","styles","inputs","encapsulation","ViewEncapsulation","None","preserveWhitespaces","changeDetection","ChangeDetectionStrategy","OnPush","host","class","[class.mat-tab-header-pagination-controls-enabled]","[class.mat-tab-header-rtl]","ViewportRuler","Directionality","decorators","Optional","propDecorators","ViewChild","Input","Output","_MatTabHeaderMixinBase","MatTabNavBase","_MatTabNavMixinBase","mixinColor","MatTabNav","_ngZone","call","_onDestroy","Subject","_disableRipple","_backgroundColor","classList","remove","backgroundColor","add","coerceBooleanProperty","_setLinkDisableRipple","updateActiveLink","element","_activeLinkChanged","_activeLinkElement","runOutsideAngular","pipe","takeUntil","_alignInkBar","next","complete","_tabLinks","forEach","link","disableRipple","exportAs","NgZone","ChangeDetectorRef","MatTabLinkBase","_MatTabLinkMixinBase","mixinTabIndex","mixinDisableRipple","mixinDisabled","_tabNavBar","_tabLinkRipple","setupTriggerEvents","parseInt","globalOptions","rippleConfig","terminateOnPointerUp","speedFactor","baseSpeedFactor","animation","get","enumerable","configurable","MatTabLink","Directive","[attr.aria-disabled]","[attr.tabIndex]","[class.mat-tab-disabled]","[class.mat-tab-label-active]","(click)","Platform","undefined","Inject","MAT_RIPPLE_GLOBAL_OPTIONS","Attribute","MatTabsModule","NgModule","imports","CommonModule","MatCommonModule","PortalModule","MatRippleModule","ObserversModule","ScrollDispatchModule","exports","MatTabGroup","MatTabLabel","MatTab","MatTabContent","declarations","MatInkBar","MatTabLabelWrapper","MatTabBody","MatTabBodyPortal","providers","VIEWPORT_RULER_PROVIDER","MatToolbarBase","_MatToolbarMixinBase","MatToolbarRow","MatToolbar","_platform","document","_document","ngAfterViewInit","isDevMode","isBrowser","_checkToolbarMixedModes","_toolbarRows","changes","slice","childNodes","filter","node","contains","nodeType","COMMENT_NODE","some","textContent","trim","throwToolbarMixedModesError","[class.mat-toolbar-multiple-rows]","[class.mat-toolbar-single-row]","DOCUMENT","MatToolbarModule","PlatformModule","VERSION","Version","SELECT_PANEL_PADDING_X","optional","MatStepHeader","matStepperAnimations","horizontalStepTransition","trigger","state","visibility","transition","animate","verticalStepTransition","height","MatStepperIcon","templateRef","TemplateRef","name","_MatStep","CdkStep","_MatStepper","CdkStepper","MatStep","stepper","_errorStateMatcher","isErrorState","control","form","originalErrorState","customErrorState","invalid","interacted","provide","ErrorStateMatcher","useExisting","MatStepper","apply","arguments","icons","_icons","editOverride","find","icon","doneOverride","_iconOverrides","_steps","_destroyed","_stateChanged","ContentChildren","MatHorizontalStepper","aria-orientation","role","animations","ctorParameters","MatVerticalStepper","MatStepperNext","[type]","CdkStepperNext","MatStepperPrevious","CdkStepperPrevious","MatStepperModule","MatButtonModule","CdkStepperModule","MatIconModule","A11yModule","MatStepLabel","MatStepperIntl","MatTable","CDK_TABLE_TEMPLATE","CdkTable","MatCellDef","CdkCellDef","MatHeaderCellDef","CdkHeaderCellDef","MatColumnDef","CdkColumnDef","MatHeaderCell","columnDef","cssClassFriendlyName","ElementRef","CdkHeaderCell","MatCell","CdkCell","MatHeaderRowDef","CdkHeaderRowDef","MatRowDef","CdkRowDef","MatHeaderRow","CDK_ROW_TEMPLATE","MatRow","MatTableModule","CdkTableModule","MatTableDataSource","initialData","_renderData","BehaviorSubject","_filter","sortingDataAccessor","data","sortHeaderId","_isNumberValue","Number","sortData","sort","active","direction","a","b","valueA","valueB","comparatorResult","filterPredicate","accumulator","currentTerm","key","dataStr","keys","reduce","toLowerCase","transformedFilter","indexOf","_data","_updateChangeSubscription","_sort","_paginator","paginator","sortChange","empty","pageChange","page","_renderChangesSubscription","combineLatest","map","_a","_filterData","startWith","_orderData","_pageData","filteredData","obj","_updatePaginator","startIndex","pageIndex","pageSize","splice","filteredDataLength","Promise","resolve","then","lastPageIndex","ceil","connect","disconnect","DataSource","show","_setStyles","hide","inkBar","left","offsetLeft","width","viewContainerRef","ViewContainerRef","CdkPortal","MatTabBase","_MatTabMixinBase","_viewContainerRef","textLabel","_contentPortal","_labelChange","_disableChange","position","origin","isActive","ngOnChanges","hasOwnProperty","ngOnInit","TemplatePortal","_explicitContent","_implicitContent","matTabsAnimations","translateTab","_componentFactoryResolver","_host","_isCenterPosition","_position","attach","_content","_centeringSub","_beforeCentering","isCentering","hasAttached","_leavingSub","_afterLeavingCenter","detach","closed","ComponentFactoryResolver","forwardRef","CdkPortalOutlet","_onCentering","_onCentered","_origin","_onTranslateTabStarted","e","toState","clientHeight","_onTranslateTabComplete","fromState","_portalHost","PortalHostDirective","nextId","MatTabChangeEvent","MatTabGroupBase","_MatTabGroupMixinBase","_indexToSelect","_tabBodyWrapperHeight","_tabsSubscription","_tabLabelSubscription","_dynamicHeight","headerPosition","selectedIndexChange","focusChange","animationDone","selectedTabChange","selectChange","_groupId","indexToSelect","_tabs","tabChangeEvent","_createChangeEvent","_subscribeToTabLabels","_focusChanged","concat","_getTabLabelId","_getTabContentId","_setTabBodyWrapperHeight","tabHeight","wrapper","_tabBodyWrapper","offsetHeight","_removeTabBodyWrapperHeight","_handleClick","tabHeader","idx","_getTabIndex","[class.mat-tab-group-dynamic-height]","[class.mat-tab-group-inverted-header]","dynamicHeight","_dynamicHeightDeprecated","MatTabLabelWrapperBase","_MatTabLabelWrapperMixinBase","MatTabHeaderBase","MatSlider","step","thumbLabel","_thumbLabelDeprecated","tickInterval","_tickIntervalDeprecated","vertical","input","_sliderWrapper","_MatSliderMixinBase","MatSliderModule","BidiModule","HAMMER_GESTURE_CONFIG","useClass","GestureConfig","MatSnackBarRef","containerInstance","_overlayRef","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","dismiss","_onExit","_finishDismiss","exit","clearTimeout","_durationTimeoutId","dismissWithAction","closeWithAction","_dismissAfter","duration","setTimeout","_open","dispose","dismissedByAction","afterDismissed","asObservable","afterOpened","_onEnter","MAT_SNACK_BAR_DATA","InjectionToken","MatSnackBarConfig","politeness","announcementMessage","horizontalPosition","verticalPosition","SHOW_ANIMATION","AnimationDurations","ENTERING","AnimationCurves","DECELERATION_CURVE","HIDE_ANIMATION","EXITING","ACCELERATION_CURVE","matSnackBarAnimations","contentFade","opacity","COMPLEX","STANDARD_CURVE","snackBarState","SimpleSnackBar","snackBarRef","action","[@contentFade]","MatSnackBarContainer","_animationState","attachComponentPortal","portal","_portalOutlet","Error","snackBarConfig","panelClass","extraClasses","_setCssClasses","attachTemplatePortal","onAnimationEnd","startsWith","_completeExit","onEnter_1","run","enter","detectChanges","onMicrotaskEmpty","take","Array","isArray","cssClass","[@state]","(@state.done)","BasePortalOutlet","MatSnackBar","_overlay","_live","_injector","_breakpointObserver","_parentSnackBar","_snackBarRefAtThisLevel","parent","_openedSnackBarRef","openFromComponent","component","config","_config","_applyConfigDefaults","_attach","announce","open","message","_attachSnackBarContainer","overlayRef","containerPortal","ComponentPortal","containerRef","instance","_createOverlay","container","injector","_createInjector","contentRef","observe","Breakpoints","Handset","detachments","matches","overlayElement","overlayConfig","OverlayConfig","positionStrategy","global","isRtl","isLeft","isRight","right","centerHorizontally","top","bottom","create","userInjector","injectionTokens","WeakMap","set","PortalInjector","Injectable","Overlay","LiveAnnouncer","Injector","BreakpointObserver","SkipSelf","MatSnackBarModule","OverlayModule","LayoutModule","entryComponents","LIVE_ANNOUNCER_PROVIDER","MatSortBase","_MatSortMixinBase","sortables","Map","_stateChanges","start","_direction","MatSort","getSortInvalidDirectionError","_disableClear","register","sortable","id","getSortHeaderMissingIdError","has","getSortDuplicateSortableIdError","deregister","delete","getNextSortDirection","disableClear","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","sortButtonLabel","sortDescriptionLabel","MatSortHeaderIntl","MAT_SORT_HEADER_INTL_PROVIDER","deps","useFactory","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","SORT_ANIMATION_TRANSITION","matSortAnimations","indicator","leftPointer","rightPointer","arrowOpacity","arrowPosition","keyframes","allowChildren","query","animateChild","MatSortHeaderBase","_MatSortHeaderMixinBase","MatSortHeader","_intl","changeDetectorRef","_cdkColumnDef","_showIndicatorHint","_arrowDirection","_disableViewStateAnimation","getSortHeaderNotContainedWithinSortError","_rerenderSubscription","_isSorted","_updateArrowDirection","_viewState","_setAnimationTransitionState","_setIndicatorHintVisible","visible","_isDisabled","viewState","_getArrowDirectionState","_getArrowViewState","(mouseenter)","(longpress)","(mouseleave)","[class.mat-sort-header-disabled]","MatSortModule","CdkStepLabel","optionalLabel","_focusMonitor","_element","monitor","_intlSubscription","_index","_selected","_active","_optional","stopMonitoring","_stringLabel","label","_templateLabel","_getHostElement","iconOverrides","selected","MatDrawer","ContentChild","MatDrawerContent","autosize","hasBackdrop","MatDrawerContainer","MatSidenavContent","[style.margin-left.px]","[style.margin-right.px]","MatSidenav","_fixedBottomGap","matDrawerAnimations","transformDrawer","[@transform]","(@transform.start)","(@transform.done)","(keydown)","[attr.align]","[class.mat-drawer-end]","[class.mat-drawer-over]","[class.mat-drawer-side]","[class.mat-sidenav-fixed]","[style.top.px]","[style.bottom.px]","MatSidenavContainer","_drawers","MatSidenavModule","MAT_DRAWER_DEFAULT_AUTOSIZE","useValue","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","MatSlideToggle","multi","MatSlideToggleChange","source","checked","MatSlideToggleBase","_MatSlideToggleMixinBase","onChange","_","onTouched","_uniqueId","_required","_checked","labelPosition","ariaLabel","ariaLabelledby","_slideRenderer","SlideToggleRenderer","_inputElement","focusOrigin","_onInputFocusChange","_onChangeEvent","stopPropagation","dragging","_emitChangeEvent","_onInputClick","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","focusVia","toggle","_focusRipple","fadeOut","_ripple","launch","persistent","_onDragStart","startThumbDrag","_onDrag","updateThumbPosition","deltaX","_onDragEnd","newCheckedValue","dragPercentage","stopThumbDrag","_onLabelTextChange","[id]","[class.mat-checked]","[class.mat-disabled]","[class.mat-slide-toggle-label-before]","FocusMonitor","required","MatRipple","_thumbBarEl","querySelector","_thumbBarWidth","clientWidth","_thumbEl","_previousChecked","dragX","percentage","MatSlideToggleModule","MAT_SLIDER_VALUE_ACCESSOR","MatSliderChange","MatSliderBase","_invert","_max","_min","_step","_thumbLabel","_tickInterval","_value","_vertical","_percent","_isSliding","_isActive","_tickIntervalPercent","_sliderDimensions","_controlValueAccessorChangeFn","_dirChangeSubscription","_calculatePercentage","_roundLabelTo","toString","split","pop","toFixed","_focusHostElement","blur","_blurHostElement","_clamp","invert","percent","_isMinValue","axis","_invertMouseCoords","_thumbGap","tickSize","backgroundSize","sign","rotate","_invertAxis","_onMouseenter","_getSliderDimensions","_updateTickIntervalPercent","_onClick","oldValue","_updateValueFromPosition","x","clientX","y","clientY","_emitInputEvent","_onSlide","_onSlideStart","center","_valueOnSlideStart","_onSlideEnd","_onFocus","_onBlur","_onKeydown","PAGE_UP","_increment","PAGE_DOWN","UP_ARROW","DOWN_ARROW","_onKeyup","numSteps","pos","size","posComponent","exactValue","_calculateValue","closestValue","round","trackSize","pixelsPerStep","stepsPerTick","pixelsPerTick","getBoundingClientRect","(focus)","(blur)","(keyup)","(slide)","(slideend)","(slidestart)","[tabIndex]","[attr.aria-valuemax]","[attr.aria-valuemin]","[attr.aria-valuenow]","[attr.aria-orientation]","[class.mat-slider-disabled]","[class.mat-slider-has-ticks]","[class.mat-slider-horizontal]","[class.mat-slider-axis-inverted]","[class.mat-slider-sliding]","[class.mat-slider-thumb-label-showing]","[class.mat-slider-vertical]","[class.mat-slider-min-value]","[class.mat-slider-hide-last-tick]","MatProgressSpinner","mode","platform","[style.width.px]","[style.height.px]","MatSpinner","MatProgressSpinnerModule","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","MatRadioGroup","MatRadioChange","MatRadioGroupBase","_MatRadioGroupMixinBase","_changeDetector","_name","_isInitialized","_labelPosition","_disabled","_updateRadioButtonNames","_markRadiosForCheck","newValue","_updateSelectedRadioFromValue","_checkSelectedRadioButton","_touch","_radios","radio","isAlreadySelected","_markForCheck","MatRadioButton","descendants","align","MatRadioButtonBase","_MatRadioButtonMixinBase","radioGroup","_radioDispatcher","_removeUniqueSelectionListener","listen","newCheckedState","notify","_isRippleDisabled","_onInputChange","groupValueChanged","[class.mat-radio-checked]","[class.mat-radio-disabled]","[attr.id]","UniqueSelectionDispatcher","ariaDescribedby","MatRadioModule","UNIQUE_SELECTION_DISPATCHER_PROVIDER","MatDrawerToggleResult","animationFinished","_container","_margins","_contentMargins","margins","_focusTrapFactory","_doc","_elementFocusedBeforeDrawerWasOpened","_mode","_disableClose","openedChange","opened","_isFocusTrapEnabled","_focusTrap","_trapFocus","_restoreFocus","onAlignChanged","onPositionChanged","_modeChanged","HTMLElement","_openedVia","enabled","destroy","isOpen","openedVia","_opened","_enableAnimations","close","_openedStream","openedStart","_closedStream","closedStart","onOpen","onClose","backdropClick","_doCheckSubject","_autosize","defaultAutosize","drawer","_watchDrawerToggle","_watchDrawerPosition","_watchDrawerMode","_isDrawerOpen","_start","_end","_updateContentMargins","debounceTime","ngDoCheck","_setContainerClass","throwMatDuplicatedDrawerError","_right","_left","_closeModalDrawer","_isShowingBackdrop","_width","errorStateMatcher","selectionChange","valueChange","MatSelect","_MatSelectMixinBase","MatSelectModule","MatOptionModule","MatFormFieldModule","MatSelectTrigger","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","matTooltipAnimations","tooltipState","SCROLL_THROTTLE_MS","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER","MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER_FACTORY","MAT_TOOLTIP_DEFAULT_OPTIONS","MatTooltip","_scrollDispatcher","_ariaDescriber","_scrollStrategy","_defaultOptions","showDelay","hideDelay","_message","_manualListeners","IOS","nodeName","webkitUserSelect","userSelect","listener","addEventListener","_detach","_updatePosition","removeDescription","_isTooltipVisible","_updateTooltipMessage","describe","_tooltipClass","_tooltipInstance","_setTooltipClass","removeEventListener","clear","delay","_portal","TooltipComponent","afterHidden","isVisible","ESCAPE","_handleTouchend","touchendHideDelay","_getOrigin","overlay","_getOverlayPosition","strategy","connectedTo","main","withFallbackPosition","fallback","withScrollableContainers","getAncestorScrollContainers","onPositionChange","scrollableViewProperties","isOverlayClipped","_setTransformOrigin","connectionPair","scrollStrategy","getConfig","withPositions","isDirectionLtr","originX","originY","getMatTooltipInvalidPositionError","_invertPosition","isLtr","overlayX","overlayY","updatePosition","tooltipClass","(touchend)","ScrollDispatcher","AriaDescriber","_positionDeprecated","_visibility","_closeOnInteraction","_transformOrigin","_onHide","_isHandset","_hideTimeoutId","_showTimeoutId","overlayPosition","_animationStart","_animationDone","_handleBodyInteraction","aria-hidden","ɵ0","ARIA_DESCRIBER_PROVIDER","MatTooltipModule","itemsPerPageLabel","nextPageLabel","previousPageLabel","firstPageLabel","lastPageLabel","getRangeLabel","MatPaginatorIntl","MAT_PAGINATOR_INTL_PROVIDER","MAT_PAGINATOR_INTL_PROVIDER_FACTORY","PageEvent","MatPaginator","_pageIndex","_length","_pageSizeOptions","_hidePageSize","_showFirstLastButtons","_intlChanges","_pageSize","_updateDisplayedPageSizeOptions","p","_initialized","nextPage","hasNextPage","_emitPageEvent","previousPage","hasPreviousPage","firstPage","lastPage","getNumberOfPages","numberOfPages","_changePageSize","floor","pageSizeOptions","_displayedPageSizeOptions","push","hidePageSize","showFirstLastButtons","MatPaginatorModule","MatProgressBarBase","_MatProgressBarMixinBase","progressbarId","MatProgressBar","_bufferValue","clamp","_primaryTransform","_bufferTransform","bufferValue","aria-valuemin","aria-valuemax","[attr.mode]","MatProgressBarModule","BASE_SIZE","MatProgressSpinnerBase","_MatProgressSpinnerMixinBase","INDETERMINATE_ANIMATION_TEMPLATE","_fallbackAnimation","_elementSize","_diameter","EDGE","TRIDENT","animationClass","diameters","_attachStyleNode","_updateElementSize","_strokeWidth","diameter","viewBox","_circleRadius","strokeWidth","PI","_strokeCircumference","styleTag","createElement","head","appendChild","sheet","insertRule","_getAnimationText","replace","Set","_panelAnimationState","MatMenu","_resetAnimation","_onAnimationDone","_event","matMenuAnimations","transformMenu","fadeInItems","MAT_MENU_DEFAULT_OPTIONS","items","MatMenuItem","lazyContent","MatMenuContent","overlapTrigger","MAT_MENU_SCROLL_STRATEGY","MAT_MENU_SCROLL_STRATEGY_PROVIDER","MAT_MENU_SCROLL_STRATEGY_PROVIDER_FACTORY","MatMenuTrigger","_parentMenu","_menuItemInstance","_menuOpen","_closeSubscription","_hoverSubscription","_openedByMouse","menuOpened","onMenuOpen","menuClosed","onMenuClose","_triggersSubmenu","triggersSubmenu","menu","_checkMenu","reason","_destroyMenu","_hovered","openMenu","_cleanUpSubscriptions","toggleMenu","closeMenu","menuData","_menuClosingActions","_initMenu","_startAnimation","menuOpen","_resetMenu","parentMenu","_setMenuElevation","_setIsMenuOpen","focusFirstItem","setElevation","depth","_highlighted","throwMatMenuMissingError","_getOverlayConfig","_subscribeToPositions","_getPosition","backdropClass","posX","posY","setPositionClasses","xPosition","originFallbackX","_b","yPosition","overlayFallbackY","_c","originFallbackY","_d","overlayFallbackX","offsetY","withDirection","withOffsetY","backdrop","parentClose","hover","_handleMousedown","isFakeMousedownFromScreenReader","aria-haspopup","(mousedown)","Self","_deprecatedMatMenuTriggerFor","MatMenuModule","matSelectAnimations","transformPanel","minWidth","group","fadeInContent","MAT_SELECT_SCROLL_STRATEGY","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MatSelectChange","MatSelectBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","mixinErrorState","_parentFormField","_scrollStrategyFactory","_panelOpen","_scrollTop","_multiple","_compareWith","o1","o2","_uid","_destroy","_triggerFontSize","_onChange","_onTouched","_optionIds","_panelDoneAnimating","_offsetY","_positions","_disableOptionCentering","focused","controlType","optionSelectionChanges","defer","options","option","onSelectionChange","onStable","switchMap","valueAccessor","_placeholder","stateChanges","_selectionModel","getMatSelectDynamicMultipleError","getMatSelectNonFunctionValueError","_initializeSelection","_id","o","SelectionModel","multiple","_initKeyManager","_resetOptions","updateErrorState","panelOpen","_triggerRect","getComputedStyle","_keyManager","withHorizontalOrientation","_calculateOverlayPosition","_highlightCorrectOption","overlayDir","fontSize","_isRtl","_setSelectionByValue","selectedOptions","viewValue","reverse","join","_handleOpenKeydown","_handleClosedKeydown","isArrowKey","altKey","onKeydown","manager","setFirstItemActive","setLastItemActive","activeItem","previouslyFocusedIndex","activeItemIndex","shiftKey","_selectViaInteraction","_onPanelDone","offsetX","_onFadeInDone","_onAttached","positionChange","_calculateOverlayOffsetX","panel","scrollTop","_getPanelTheme","color","isEmpty","isUserInput","getMatSelectNonArrayValueError","_clearSelection","currentValue","_selectValue","_sortValues","correspondingOption","setActiveItem","error","console","warn","select","skip","deselect","ActiveDescendantKeyManager","withTypeAhead","withVerticalOrientation","tabOut","_scrollActiveOptionIntoView","changedOrDestroyed","_onSelect","_setOptionIds","wasSelected","isSelected","_getOptionIndex","_propagateChanges","fallbackValue","valueToEmit","activeOptionIndex","labelCount","_countGroupLabelsBeforeOption","optionGroups","_getOptionScrollPosition","_getItemHeight","result","current","itemHeight","_getItemCount","panelHeight","scrollContainerHeight","maxScroll","selectedOptionOffset","scrollBuffer","_calculateOverlayScroll","_calculateOverlayOffsetY","_checkOverlayWithinViewport","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","placeholder","_getAriaActiveDescendant","overlayRect","viewportSize","getViewportSize","paddingWidth","SELECT_MULTIPLE_PANEL_PADDING_X","first","leftOverflow","rightOverflow","optionOffsetFromPanelTop","optionHeightAdjustment","maxOptionsDisplayed","firstDisplayedIndex","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","bottomSpaceAvailable","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","setDescribedByIds","ids","_ariaDescribedby","onContainerClick","[attr.tabindex]","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-required]","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","[attr.aria-describedby]","[attr.aria-activedescendant]","[class.mat-select-disabled]","[class.mat-select-invalid]","[class.mat-select-required]","MatFormFieldControl","MAT_OPTION_PARENT_COMPONENT","NgForm","FormGroupDirective","MatFormField","NgControl","CdkConnectedOverlay","MatOption","MatOptgroup","customTrigger","disableOptionCentering","compareWith","_setSelected","_getOptionByValue","Boolean","focusedOption","focusedIndex","_emitDeprecatedChangeEvent","MatSelectionList","MAT_SELECTION_LIST_VALUE_ACCESSOR","MatListOption","_MatSelectionListMixinBase","MatListModule","MatLineModule","MatPseudoCheckboxModule","MatList","MatNavList","MatListItem","MatListAvatarCssMatStyler","MatListIconCssMatStyler","MatListSubheaderCssMatStyler","MatDividerModule","sequence","MatMenuItemBase","_MatMenuItemMixinBase","_checkDisabled","_emitHoverEvent","getLabel","textNodeType","TEXT_NODE","output","length_1","[class.mat-menu-item-highlighted]","[class.mat-menu-item-submenu-trigger]","[attr.disabled]","_template","_appRef","context","isAttached","_outlet","DomPortalOutlet","insertBefore","outletElement","ApplicationRef","_xPosition","_yPosition","_tabSubscription","_classList","_overlapTrigger","throwMatMenuInvalidPositionX","throwMatMenuInvalidPositionY","classes","className","FocusKeyManager","withWrap","item","setFocusOrigin","resetActiveItem","newElevation","customElevation","c","_previousElevation","_navList","_isNavList","_lineSetter","MatLineSetter","_lines","_handleFocus","_handleBlur","_MatListItemMixinBase","MatSelectionListBase","MatListOptionBase","_MatListOptionMixinBase","MatListOptionChange","MatSelectionListChange","selectionList","_hasFocus","checkboxPosition","_reportValueChange","_removeOptionFromList","_text","_setFocusedOption","tabindex","[class.mat-list-item-disabled]","[class.mat-list-item-focus]","[attr.aria-selected]","_tempValues","_setOptionsFromValues","_modelChanges","_i","added","removed","optionIndex","setNextItemActive","_toggleSelectOnFocusedOption","_getSelectedOptionValues","values","iconSetConfigs","svgElement","foundIcon","_extractSvgIconFromSet","iconName","MatIconRegistry","_loadSvgIconFromConfig","_fetchUrl","url","svgText","_createSvgElementForSingleIcon","_loadSvgIconSetFromConfig","_svgElementFromString","responseText","svg","_setSvgAttributes","iconSet","iconSource","iconElement","cloneNode","_toSvgElement","str","div","innerHTML","ELEMENT_NODE","getAttribute","setAttribute","safeUrl","_httpClient","getMatIconNoHttpProviderError","_sanitizer","sanitize","SecurityContext","RESOURCE_URL","getMatIconFailedToSanitizeError","inProgressFetch","_inProgressUrlFetches","req","responseType","finalize","share","HttpClient","DomSanitizer","ICON_REGISTRY_PROVIDER","ICON_REGISTRY_PROVIDER_FACTORY","MatIconBase","_MatIconMixinBase","MatIcon","_iconRegistry","ariaHidden","_fontSet","_cleanupFontValue","_fontIcon","_splitIconName","parts","svgIcon","namespace","getNamedSvgIcon","_setSvgElement","err","log","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","layoutElement","childCount","removeChild","elem","fontSetClass","fontSet","classNameForFontAlias","getDefaultFontSetClass","_previousFontSetClass","fontIcon","_previousFontIconClass","MatListBase","_MatListMixinBase","MatListItemBase","MatDatepickerInput","_getValidDateOrNull","_dateAdapter","deserialize","_validatorOnChange","_disabledChange","_datepicker","_datepickerSubscription","selectedChanged","_cvaOnChange","dateInput","MatDatepickerInputEvent","dateChange","_localeSubscription","_valueChange","registerOnValidatorChange","validate","_validator","getPopupConnectionElementRef","getConnectedOverlayOrigin","_formField","_onInput","date","parse","_dateFormats","_lastValueValid","isValid","_getThemePalette","isDateInstance","MAT_DATEPICKER_VALUE_ACCESSOR","MAT_DATEPICKER_VALIDATORS","MAT_INPUT_VALUE_ACCESSOR","[attr.aria-haspopup]","[attr.min]","[attr.max]","[disabled]","(input)","(change)","DateAdapter","MAT_DATE_FORMATS","matDatepicker","matDatepickerFilter","MatDatepickerToggleIcon","MatDatepickerToggle","datepicker","_watchStateChanges","datepickerDisabled","inputDisabled","_datepickerInput","datepickerToggled","openedStream","closedStream","[class.mat-datepicker-toggle-active]","[class.mat-accent]","[class.mat-warn]","_customIcon","MatDatepickerModule","MatDialogModule","MatCalendar","MatCalendarBody","MatDatepicker","MatDatepickerContent","MatMonthView","MatYearView","MatMultiYearView","MatDatepickerIntl","MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER","MatDivider","_inset","[class.mat-divider-vertical]","[class.mat-divider-inset]","_hideToggle","displayMode","MatAccordion","hideToggle","CdkAccordion","MatExpansionPanelContent","matExpansionAnimations","indicatorRotate","expansionHeaderHeight","params","collapsedHeight","expandedHeight","bodyExpansion","uniqueId","MatExpansionPanel","accordion","_uniqueSelectionDispatcher","_inputChanges","_headerId","_getHideToggle","_hasSpacing","expanded","_getExpandedState","_lazyContent","_bodyAnimation","phaseName","outputs","[class.mat-expanded]","[class.mat-expansion-panel-spacing]","MatExpansionPanelActionRow","MatExpansionPanelHeader","_parentChangeSubscription","_toggle","_isExpanded","_getPanelId","_showToggle","_keydown","[attr.aria-controls]","[attr.aria-expanded]","[@expansionHeight]","MatExpansionModule","CdkAccordionModule","MatExpansionPanelTitle","MatExpansionPanelDescription","MatGridTile","_rowspan","_colspan","coerceToNumber","_setStyle","property","MatGridTileText","MatGridAvatarCssMatStyler","MatGridTileHeaderCssMatStyler","MatGridTileFooterCssMatStyler","TileCoordinator","numColumns","tiles","columnIndex","rowIndex","tracker","fill","positions","tile","_trackTile","lastRowMax","rowCount","gapStartIndex","_findMatchingGap","colspan","_markTilePosition","TilePosition","tileCols","gapEndIndex","_nextRow","_findGapEndIndex","rowspan","row","col","TileStyler","_rows","init","gutterSize","cols","_gutterSize","normalizeUnits","_cols","getBaseTileSize","sizePercent","gutterFraction","getTilePosition","baseSize","calc","getTileSize","span","setStyle","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","side","getGutterSpan","getTileSpan","tileHeight","getComputedHeight","FixedTileStyler","fixedRowHeight","reset","list","_setListStyle","_tiles","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","ratioParts","parseFloat","FitTileStyler","gutterHeightPerTile","MatGridList","_gutter","coerceToString","_rowHeight","_setTileStyler","_checkCols","_checkRowHeight","_layoutTiles","rowHeight","_tileStyler","MatGridListModule","SvgIconConfig","_svgIconConfigs","_iconSetConfigs","_cachedIconsByUrl","_fontCssClassesByAlias","_defaultFontSetClass","addSvgIcon","addSvgIconInNamespace","iconKey","addSvgIconSet","addSvgIconSetInNamespace","configNamespace","registerFontClassAlias","alias","setDefaultFontSetClass","getSvgIconFromUrl","cachedIcon","cloneSvg","tap","_getSvgFromConfig","_getSvgFromIconSetConfigs","observableThrow","getMatIconNameNotFoundError","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","iconSetConfig","catchError","forkJoin","selectedChange","yearSelected","createMissingDateImplError","_activeDate","today","oldActiveDate","validDate","clampDate","minDate","maxDate","getYear","_init","_selectedYear","_minDate","_maxDate","_focusActiveCell","_todayYear","activeYear","activeOffset","_years","year","_createCellForYear","_yearSelected","createDate","month","getMonth","activeDate","daysInMonth","getNumDaysInMonth","getDate","_handleCalendarBodyKeydown","addCalendarYears","yearsPerPage","_getActiveCell","_matCalendarBody","yearName","getYearName","MatCalendarCell","_shouldEnableYear","dateFilter","firstOfYear","addCalendarDays","monthSelected","_selectedMonth","_getMonthInCurrentYear","_monthSelected","normalizedDate","addCalendarMonths","_todayMonth","_yearLabel","monthNames","getMonthNames","_months","_createCellForMonth","monthName","format","display","monthYearA11yLabel","toLocaleUpperCase","_shouldEnableMonth","_isYearAndMonthAfterMaxDate","_isYearAndMonthBeforeMinDate","firstOfMonth","maxYear","maxMonth","minYear","minMonth","startView","_userSelection","_startAt","_clampedActiveDate","_currentView","monthYearLabel","switchToMultiYearViewLabel","switchToMonthViewLabel","prevMonthLabel","prevYearLabel","multi-year","prevMultiYearLabel","nextMonthLabel","nextYearLabel","nextMultiYearLabel","startAt","firstChange","view","monthView","yearView","multiYearView","_dateSelected","sameDate","_yearSelectedInMultiYearView","normalizedYear","_monthSelectedInYearView","normalizedMonth","_userSelected","_goToDateInView","_currentPeriodClicked","_previousClicked","_nextClicked","_previousEnabled","_isSameView","_nextEnabled","date1","date2","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY","MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY","MatDatepickerContentBase","_MatDatepickerContentMixinBase","[class.mat-datepicker-content-touch]","_inputSubscription","_popupRef","_popupComponentRef","_focusedElementBeforeOpen","activeElement","touchUi","_openAsDialog","_openAsPopup","_dialogRef","_calendarPortal","completeClose","afterClosed","componentInstance","_setColor","_createPopup","keydownEvents","MatDialog","NG_VALIDATORS","target","targetElement","_parseValidator","matDatepickerParse","text","_minValidator","controlValue","compareDate","matDatepickerMin","actual","_maxValidator","matDatepickerMax","_filterValidator","_dateFilter","Validators","compose","localeChanges","registerDatepicker","_registerInput","oldDate","[attr.role]","[@slideDialog]","(@slideDialog.start)","(@slideDialog.done)","MatDialogContainer","MatDialogRef","_containerInstance","location","disableClose","_afterOpen","_afterClosed","_beforeClose","_locationChanges","_animationStateChanged","_result","closeOnNavigation","dialogResult","detachBackdrop","_startExitAnimation","afterOpen","beforeClose","_getPositionStrategy","centerVertically","updateSize","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","_location","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenAtThisLevel","_ariaHiddenElements","afterAllClosed","openDialogs","_afterAllClosed","componentOrTemplateRef","MatDialogConfig","getDialogById","dialogContainer","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","_removeOpenDialog","closeAll","dialog","dialogConfig","minHeight","maxWidth","maxHeight","$implicit","previousValue","removeAttribute","overlayContainer","getContainerElement","parentElement","siblings","children","sibling","hasAttribute","Location","OverlayContainer","dialogElementUid","MatDialogClose","_dialog","getClosestDialog","proxiedChange","_matDialogClose","MatDialogTitle","_ariaLabelledBy","MatDialogContent","MatDialogActions","listenerOptions","supportsPassiveEventListeners","passive","AutofillMonitor","_monitoredElements","observableEmpty","info","subject","animationName","isAutofilled","unlisten","_info","MatAutofill","_autofillMonitor","matAutofill","MatTextareaAutosize","_minRows","_setMinHeight","_maxRows","_setMaxHeight","minRows","_cachedLineHeight","_setTextareaStyle","maxRows","resizeToFitContent","fromEvent","window","auditTime","_cacheTextareaLineHeight","textarea","textareaClone","rows","border","padding","overflow","force","_previousValue","placeholderText","scrollHeight","MAT_INPUT_INVALID_TYPES","MatInputBase","_MatInputMixinBase","MatInput","inputValueAccessor","_isServer","autofilled","_type","_readonly","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","el","selectionStart","selectionEnd","setSelectionRange","_validateType","_isTextarea","_dirtyCheckNativeValue","isFocused","readonly","getMatInputUnsupportedTypeError","_isNeverEmpty","_isBadInput","validity","badInput","[class.mat-input-server]","[placeholder]","[required]","[readonly]","MatInputModule","calendarLabel","openCalendarLabel","displayValue","numCols","allowDisabledSelection","activeCell","cellAspectRatio","selectedValueChange","_cellClicked","cell","_isActiveCell","cellNumber","_firstRowOffset","attr.aria-readonly","todayValue","selectedValue","labelMinRequiredCells","activeDateChange","firstDayOfWeek","getFirstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","long","narrow","_weekdays","_hasSameMonthAndYear","_selectedDate","_getDateInCurrentMonth","selectedYear","selectedMonth","selectedDate","_todayDate","_monthLabel","_firstWeekOffset","getDayOfWeek","_createWeekCells","dateNames","getDateNames","_weeks","_shouldEnableDate","dateA11yLabel","d1","d2","[class.mat-checkbox-indeterminate]","[class.mat-checkbox-checked]","[class.mat-checkbox-disabled]","[class.mat-checkbox-label-before]","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","MAT_CHECKBOX_CLICK_ACTION","MatCheckbox","indeterminateChange","ripple","indeterminate","_MatCheckboxMixinBase","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","MatCheckboxModule","MatChipSelectionChange","MatChipBase","_MatChipMixinBase","CHIP_ATTRIBUTE_NAMES","MatChipAvatar","MatChipTrailingIcon","MatChip","ngZone","chipListSelectable","_selectable","_removable","destroyed","onRemove","_addHostClassName","_chipRipple","RippleRenderer","selectable","CHIP_ATTRIBUTE_NAMES_1","attr","tagName","chip","_removeTriggerEvents","selectViaInteraction","toggleSelected","removable","DELETE","BACKSPACE","_blur","[class.mat-chip-selected]","[class.mat-chip-with-avatar]","[class.mat-chip-with-trailing-icon]","[class.mat-chip-disabled]","avatar","trailingIcon","removeIcon","MatChipRemove","_parentChip","MatChipListBase","_MatChipListMixinBase","MatChipListChange","MatChipList","_lastDestroyedIndex","_chipSet","_tabOutSubscription","_tabIndex","_userTabIndex","ariaOrientation","_chipInput","chips","_changeSubscription","_resetChips","_updateTabIndex","_updateFocusForDestroyedChips","_dropSubscriptions","registerInput","inputElement","_focusInput","_isInputEmpty","_updateKeyManager","chipIndex","chipsArray","newFocusIndex","focusChip","correspondingChip","correspondingChipIndex","updateActiveItemIndex","_markAsTouched","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","_chipBlurSubscription","_chipSelectionSubscription","chipSelectionChanges","chipFocusChanges","chipBlurChanges","_chipRemoveSubscription","chipRemoveChanges","[class.mat-chip-list-disabled]","[class.mat-chip-list-invalid]","[class.mat-chip-list-required]","MatChipInput","_addOnBlur","separatorKeyCodes","chipEnd","_chipList","_emitChipEnd","addOnBlur","_focus","chipList","CHIP_DECLARATIONS","MatChipsModule","ariaDescribedBy","autoFocus","matDialogAnimations","slideDialog","_elementFocusedBeforeDialogWasOpened","_state","throwMatDialogContentAlreadyAttachedError","_savePreviouslyFocusedElement","focusInitialElementWhenReady","toFocus","_onAnimationStart","MatAnchor","MatButton","MatButtonToggleGroupBase","_MatButtonToggleGroupMixinBase","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","MatButtonToggleGroup","_uniqueIdCounter","MatButtonToggleChange","_updateButtonToggleNames","_updateSelectedButtonToggleFromValue","_buttonToggles","matchingButtonToggle","buttonToggle","_markButtonTogglesForCheck","[class.mat-button-toggle-vertical]","MatButtonToggle","MatButtonToggleGroupMultiple","MatButtonToggleBase","_MatButtonToggleMixinBase","toggleGroup","toggleGroupMultiple","_buttonToggleDispatcher","_isSingleSelector","buttonToggleGroup","buttonToggleGroupMultiple","[class.mat-button-toggle-standalone]","[class.mat-button-toggle-checked]","[class.mat-button-toggle-disabled]","MatButtonToggleModule","MatCardContent","MatCardTitle","MatCardSubtitle","[class.mat-card-actions-align-end]","MatCardActions","MatCardFooter","MatCardImage","MatCardSmImage","MatCardMdImage","MatCardLgImage","MatCardXlImage","MatCardAvatar","MatCardHeader","MatCardTitleGroup","MatCardModule","MatCard","MatCheckboxChange","MatCheckboxBase","_clickAction","_currentAnimationClass","_currentCheckState","TransitionCheckState","Init","_indeterminate","changed","_transitionCheckState","Indeterminate","Checked","Unchecked","_getAriaChecked","newState","oldState","_getAnimationClassForCheckStateTransition","_removeFocusRipple","_onInteractionEvent","animSuffix","MatAutocompleteTrigger","autocomplete","clickTarget","formField","_setTriggerValue","_resetActiveItem","_closeKeyEventStream","activeOption","prevActiveItem","TAB","_canOpen","openPanel","_scrollToOption","_handleInput","_attachOverlay","_floatLabel","shouldAnimate","floatLabel","_animateAndLockLabel","_manuallyFloatingLabel","_resetLabel","newScrollPosition","_getScrollTop","_setScrollTop","_subscribeToClosingActions","firstStable","_zone","optionChanges","_positionStrategy","recalculateLastPosition","_setVisibility","panelClosingActions","_setValueAndClose","_destroyPanel","closePanel","toDisplay","displayWith","inputValue","_control","_clearPreviousSelectedOption","_emitSelectEvent","getMatAutocompleteMissingPanelError","_getHostWidth","_closingActionsSubscription","wasOpen","_isOpen","_getConnectedElement","autoActiveFirstOption","readOnly","aria-autocomplete","(focusin)","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","Host","MatAutocompleteModule","MatAutocomplete","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER","MatBadge","_color","_overlap","val","_updateTextContent","_description","newDescription","_updateHostAriaDescription","_hidden","isAbove","isAfter","description","_badgeElement","content","_createBadgeElement","badgeElement","oldDescription","colorPalette","[class.mat-badge-overlap]","[class.mat-badge-above]","[class.mat-badge-below]","[class.mat-badge-before]","[class.mat-badge-after]","[class.mat-badge-small]","[class.mat-badge-medium]","[class.mat-badge-large]","[class.mat-badge-hidden]","overlap","hidden","MatBadgeModule","matBottomSheetAnimations","bottomSheetState","MatBottomSheetContainer","breakpointObserver","_elementFocusedBeforeOpened","_breakpointSubscription","Medium","Large","XLarge","_toggleClass","isMatched","_validatePortalAttached","_setPanelClass","bottomSheetConfig","(@state.start)","FocusTrapFactory","MAT_BOTTOM_SHEET_DATA","MatBottomSheetConfig","MatBottomSheetRef","_keydownEvents","MatBottomSheet","_parentBottomSheet","_bottomSheetRefAtThisLevel","_openedBottomSheetRef","_attachContainer","ref","bottomSheetRef","scrollStrategies","block","MatBottomSheetModule","DEFAULT_ROUND_BUTTON_COLOR","DEFAULT_FLAT_BUTTON_COLOR","BUTTON_HOST_ATTRIBUTES","MatButtonBase","_MatButtonMixinBase","_isRoundButton","_hasHostAttributes","_isIconButton","BUTTON_HOST_ATTRIBUTES_1","attributes","attribute","focusMonitor","stopImmediatePropagation","_parent","_emitSelectionChangeEvent","setActiveStyles","setInactiveStyles","ngAfterViewChecked","_mostRecentViewValue","MatOptionSelectionChange","[class.mat-selected]","[class.mat-option-multiple]","[class.mat-active]","[class.mat-option-disabled]","MAT_LABEL_GLOBAL_OPTIONS","MatError","matFormFieldAnimations","transitionMessages","[class.mat-right]","MatHint","MatLabel","MatPlaceholder","MatPrefix","MatSuffix","MatFormFieldBase","_MatFormFieldMixinBase","labelOptions","appearance","_showAlwaysAnimate","_subscriptAnimationState","_hintLabel","_hintLabelId","_outlineGapWidth","_outlineGapStart","_labelOptions","float","_hideRequiredMarker","_processHints","_connectionContainerRef","_validateControlChild","_validatePlaceholders","_syncDescribedByIds","valueChanges","_hintChildren","_errorChildren","updateOutlineGap","_shouldForward","prop","_hasPlaceholder","_placeholderChild","_hasLabel","_labelChild","_shouldLabelFloat","_canLabelFloat","shouldLabelFloat","shouldPlaceholderFloat","_shouldAlwaysFloat","_hideControlPlaceholder","_hasFloatingLabel","_getDisplayedMessages","errorState","_label","getMatFormFieldPlaceholderConflictError","_validateHints","startHint_1","endHint_1","hint","hintLabel","getMatFormFieldDuplicatedHintError","startHint","endHint","getMatFormFieldMissingControlError","containerStart","_getStartEnd","labelStart","labelWidth","outlineGapPadding","rect","[class.mat-form-field-appearance-standard]","[class.mat-form-field-appearance-fill]","[class.mat-form-field-appearance-outline]","[class.mat-form-field-appearance-legacy]","[class.mat-input-invalid]","[class.mat-form-field-invalid]","[class.mat-form-field-can-float]","[class.mat-form-field-should-float]","[class.mat-form-field-hide-placeholder]","[class.mat-form-field-disabled]","[class.mat-form-field-autofilled]","[class.mat-focused]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","floatPlaceholder","underlineRef","_prefixChildren","_suffixChildren","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","MatAutocompleteBase","_MatAutocompleteMixinBase","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","defaults","showPanel","optionSelected","_autoActiveFirstOption","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY","_componentDestroyed","optionSelections","_outsideClickStream","__extends","d","__","constructor","extendStatics","base","class_1","defaultColor","defaultTabIndex","matcher","mixinInitialized","_pendingSubscribers","initialized","Observable","subscriber","_notifySubscriber","_markInitialized","range","valueFunction","valuesArray","enforceStyleRecalculation","getPropertyValue","distanceToFurthestCorner","distX","distY","sqrt","optionsArray","groups","groupCounter","optionOffset","currentScrollPosition","optionHeight","reposition","tslib_1.__assign","defaultOptions","provider","exp","match","parentRegistry","httpClient","sanitizer","scrollThrottle","parentIntl","sortOrder","setPrototypeOf","__proto__","__assign","assign","s","n","SHARP_CURVE","MATERIAL_SANITY_CHECKS","_sanityChecksEnabled","_hasDoneGlobalChecks","_hasCheckedHammer","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_isTestEnv","doctype","testElement","body","computedStyle","_checkHammerIsAvailable","MAT_DATE_LOCALE","MAT_DATE_LOCALE_PROVIDER","LOCALE_ID","_localeChanges","setLocale","locale","second","firstValid","secondValid","SUPPORTS_INTL_API","Intl","DEFAULT_MONTH_NAMES","short","String","DEFAULT_DATE_NAMES","DEFAULT_DAY_OF_WEEK_NAMES","ISO_8601_REGEX","NativeDateAdapter","matDateLocale","useUtcForDisplay","_clampDate","getFullYear","getDay","dtf_1","DateTimeFormat","_stripDirectionalityCharacters","Date","dtf_2","day","dtf_3","weekday","dtf","_createDateWithOverflow","clone","displayFormat","setFullYear","UTC","getHours","getMinutes","getSeconds","getMilliseconds","timeZone","toDateString","years","months","newDate","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","test","isNaN","getTime","NaN","MAT_NATIVE_DATE_FORMATS","NativeDateModule","MatNativeDateModule","ShowOnDirtyErrorStateMatcher","dirty","submitted","touched","MAT_HAMMER_OPTIONS","_hammerOptions","commonModule","_hammer","Hammer","events","buildHammer","mc","pan","Pan","swipe","Swipe","press","Press","slide","_createRecognizer","threshold","longpress","time","recognizeWith","inheritances","recognizer","HammerGestureConfig","MatLine","_setLineClass","count","_resetClasses","_setClass","isAdd","RippleRef","_renderer","RippleState","HIDDEN","fadeOutRipple","defaultRippleAnimationConfig","enterDuration","exitDuration","ignoreMouseEventsTimeout","_target","_isPointerDown","_triggerEvents","_activeRipples","_eventOptions","onMousedown","isSyntheticEvent","_lastTouchStartEvent","now","rippleDisabled","fadeInRipple","onTouchStart","touches","onPointerUp","VISIBLE","FADING_IN","_containerElement","containerRect","animationConfig","centered","radius","transitionDuration","rippleRef","runTimeoutOutsideZone","rippleEl","FADING_OUT","fadeOutAll","_triggerElement","_globalOptions","_rippleRenderer","_setupTriggerEventsIfEnabled","_trigger","configOrX","[class.mat-ripple-unbounded]","unbounded","[class.mat-pseudo-checkbox-indeterminate]","[class.mat-pseudo-checkbox-checked]","[class.mat-pseudo-checkbox-disabled]","MatPseudoCheckbox","MatOptgroupBase","_MatOptgroupMixinBase","_uniqueOptgroupIdCounter","_labelId","[class.mat-optgroup-disabled]"],"mappings":"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"}